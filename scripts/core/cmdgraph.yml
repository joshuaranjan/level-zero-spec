#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Experimental Extension APIs for CommandGraph"
version: "2.0"
--- #--------------------------------------------------------------------------
type: macro
desc: "Command Graph Experimental Extension Name"
version: "2.0"
name: $X_COMMAND_GRAPH_EXP_NAME
value: '"$X_experimental_command_graphs"'
--- #--------------------------------------------------------------------------
type: enum
desc: "Command Graph Experimental Extension Version(s)"
version: "2.0"
name: $x_command_graph_exp_version_t
etors:
    - name: "1_0"
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command graph creation flags"
version: "2.0"
class: $xCommandGraphExp
name: $x_command_graph_exp_flags_t
etors:
    - name: TBD
      desc: "reserved for future use"
--- #--------------------------------------------------------------------------
type: struct
desc: "CommandGraph descriptor"
version: "2.0"
class: $xCommandGraphExp
name: $x_command_graph_exp_desc_t
base: $x_base_desc_t
members:
    - type: $x_command_graph_exp_flags_t
      name: flags
      desc: |
            [in] creation flags.
            must be 0 (default) or a valid combination of $x_command_graph_exp_flag_t;
            default behavior may use implicit driver-based heuristics to balance latency and throughput.
      init: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a command graph on the active context."
version: "2.0"
class: $xCommandGraphExp
name: Create
decl: static
details:
    - "A command graph is used for submitting commands to any command queue."
    - "The command graph can only be used on the device for which it was created."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "const $x_command_graph_exp_desc_t*"
      name: desc
      desc: "[in] pointer to command graph descriptor"
    - type: $x_command_graph_exp_handle_t*
      name: phCommandGraph
      desc: "[out] pointer to handle of command graph object created"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a command graph."
version: "2.0"
class: $xCommandGraphExp
name: Destroy
decl: static
details:
    - "The application must call this function using the same active context on which the command graph was created."
    - "The implementation of this function may immediately free all Host allocations associated with this command graph."
    - "The application must **not** call this function from simultaneous threads with the same command graph handle."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_command_graph_exp_handle_t
      name: hCommandGraph
      desc: "[in][release] handle of command graph object to destroy"
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: function
desc: "Closes a command graph; ready to be executed by a command queue."
version: "2.0"
class: $xCommandGraphExp
name: Close
details:
    - "The command graph will optimize the execution order of the command lists."
    - "A command list may **not** be reset after the command graph is closed."
    - "The application must **not** call this function from simultaneous threads with the same command graph handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_graph_exp_handle_t
      name: hCommandGraph
      desc: "[in] handle of command graph object to close"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for command graph"
version: "2.0"
name: $xCommandGraphExp
owner: $xDevice
members:
    - type: $x_command_graph_exp_handle_t
      name: handle
      desc: "handle of command graph object"
      init: nullptr
    - type: $xDevice*
      name: pDevice
      desc: "[in] pointer to owner object"
    - type: $x_command_graph_exp_desc_t
      name: desc
      desc: "[in] descriptor of the command graph object"