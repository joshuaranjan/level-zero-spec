--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Driver APIs for CommandGraph"
--- #--------------------------------------------------------------------------
type: macro
desc: "API version of $x_command_graph_desc_t"
name: $X_COMMAND_GRAPH_DESC_VERSION
value: "$X_MAKE_VERSION( 1, 0 )"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command graph creation flags"
name: $x_command_graph_flags_t
etors:
    - name: $X_COMMAND_GRAPH_FLAG_NONE
      value: "0"
      desc: "default behavior"
--- #--------------------------------------------------------------------------
type: struct
desc: "CommandGraph descriptor"
name: $x_command_graph_desc_t
members:
    - type: uint32_t
      name: version
      desc: "[in] $X_COMMAND_GRAPH_DESC_VERSION"
    - type: $x_command_graph_flags_t
      name: flags
      desc: "[in] creation flags"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a command graph on the device for submitting commands to any command queue."
name: $xDeviceCreateCommandGraph
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "const $x_command_graph_desc_t*"
      name: desc
      desc: "[in] pointer to command graph descriptor"
    - type: $x_command_graph_handle_t*
      name: phCommandGraph
      desc: "[out] pointer to handle of command graph object created"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "nullptr for desc"
        - "nullptr for phCommandGraph"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a command graph."
name: $xCommandGraphDestroy
details:
    - "The implementation of this function will immediately free all Host allocations associated with this command graph."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_graph_handle_t
      name: hCommandGraph
      desc: "[in] handle of command graph object to destroy"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hCommandGraph"
--- #--------------------------------------------------------------------------
type: function
desc: "Adds an edge between two command lists to the command graph."
name: $xCommandGraphAddEdge
details:
    - "The command graph maintains a reference to an existing command list"
    - "The application is responsible for making sure a command list is not destroyed while the command graph still references"
    - "A command list may be reset without changing the command graph"
    - "The application may **not** call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_graph_handle_t
      name: hCommandGraph
      desc: "[in] handle of command graph object to add an edge"
    - type: $x_command_list_handle_t
      name: hProducerCommandList
      desc: "[in] handle of command list object producing dependency"
    - type: $x_command_list_handle_t
      name: hConsumerCommandList
      desc: "[in] handle of command list object consuming dependency"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hCommandGraph"
        - "hCommandGraph is closed"
--- #--------------------------------------------------------------------------
type: function
desc: "Removes an edge between two command lists to the command graph."
name: $xCommandGraphRemoveEdge
details:
    - "The application may **not** call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_graph_handle_t
      name: hCommandGraph
      desc: "[in] handle of command graph object to remove an edge"
    - type: $x_command_list_handle_t
      name: hProducerCommandList
      desc: "[in] handle of command list object producing dependency"
    - type: $x_command_list_handle_t
      name: hConsumerCommandList
      desc: "[in] handle of command list object consuming dependency"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hCommandGraph"
        - "hCommandGraph is closed"
--- #--------------------------------------------------------------------------
type: function
desc: "Closes a command graph; ready to be enqueued into a command queue."
name: $xCommandGraphClose
details:
    - "The command graph will optimize the execution order of the command lists"
    - "The application may **not** call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_graph_handle_t
      name: hCommandGraph
      desc: "[in] handle of command graph object to close"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hCommandGraph"
--- #--------------------------------------------------------------------------
type: function
desc: "Reset a command graph to initial (empty) state; ready for adding command lists."
name: $xCommandGraphReset
details:
    - "The application may **not** call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_graph_handle_t
      name: hCommandGraph
      desc: "[in] handle of command graph object to reset"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hCommandGraph"
--- #--------------------------------------------------------------------------
type: function
desc: "Returns the list of command lists in optimal execution order."
name: $xCommandGraphGetCommandLists
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_graph_handle_t
      name: hCommandGraph
      desc: "[in] handle of command graph object to add an edge"
    - type: "uint32_t*"
      name: pNumCommandLists
      desc: "[out] the number of command lists in the returned list"
    - type: "$x_command_list_handle_t**"
      name: pphCommandLists
      desc: "[out] pointer to list of ordered command list handles"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hCommandGraph"
        - "hCommandGraph is not closed"
        - "nullptr for pNumCommandLists"
        - "nullptr for pphCommandLists"
