--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Driver APIs for CommandGraph"
--- #--------------------------------------------------------------------------
type: macro
desc: "API version of $x_command_graph_desc_t"
name: $X_COMMAND_GRAPH_DESC_VERSION
value: "$X_MAKE_VERSION( 1, 0 )"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command graph creation flags"
class: $xDevice
name: $x_command_graph_flag_t
etors:
    - name: $X_COMMAND_GRAPH_FLAG_NONE
      value: "0"
      desc: "default behavior"
--- #--------------------------------------------------------------------------
type: struct
desc: "CommandGraph descriptor"
class: $xDevice
name: $x_command_graph_desc_t
members:
    - type: uint32_t
      name: version
      desc: "[in] $X_COMMAND_GRAPH_DESC_VERSION"
      init: $X_COMMAND_GRAPH_DESC_VERSION
    - type: $x_command_graph_flag_t
      name: flags
      desc: "[in] creation flags"
      init: $X_COMMAND_GRAPH_FLAG_NONE
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a command graph on the device for submitting commands to any command queue."
class: $xDevice
name: CreateCommandGraph
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "const $x_command_graph_desc_t*"
      name: desc
      desc: "[in] pointer to command graph descriptor"
    - type: $x_command_graph_handle_t*
      name: phCommandGraph
      desc: "[out] pointer to handle of command graph object created"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a command graph."
class: $xCommandGraph
name: Destroy
details:
    - "The implementation of this function will immediately free all Host allocations associated with this command graph."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_graph_handle_t
      name: hCommandGraph
      desc: "[in] handle of command graph object to destroy"
--- #--------------------------------------------------------------------------
type: function
desc: "Closes a command graph; ready to be enqueued into a command queue."
class: $xCommandGraph
name: Close
details:
    - "The command graph will optimize the execution order of the command lists."
    - "A command list may **not** be reset after the command graph is closed."
    - "The application may **not** call this function from simultaneous threads with the same command graph handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_graph_handle_t
      name: hCommandGraph
      desc: "[in] handle of command graph object to close"
--- #--------------------------------------------------------------------------
type: function
desc: "Reset a command graph to initial (empty) state; ready for adding command lists."
class: $xCommandGraph
name: Reset
details:
    - "The application may **not** call this function from simultaneous threads with the same command graph handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_graph_handle_t
      name: hCommandGraph
      desc: "[in] handle of command graph object to reset"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for command graph"
name: $xCommandGraph
members:
    - type: $x_command_graph_handle_t
      name: handle
      desc: "handle of command graph object"
    - type: $x_command_graph_desc_t
      name: desc
      desc: "descriptor of the command graph object"
