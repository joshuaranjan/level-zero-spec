--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Driver APIs for Command List"
--- #--------------------------------------------------------------------------
type: macro
desc: "API version of $x_command_list_desc_t"
name: $X_COMMAND_LIST_DESC_VERSION
value: "$X_MAKE_VERSION( 1, 0 )"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command list creation flags"
name: $x_command_list_flags_t
etors:
    - name: $X_COMMAND_LIST_FLAG_NONE
      value: "0"
      desc: "default behavior"
    - name: $X_COMMAND_LIST_FLAG_COPY_ONLY
      value: "$X_BIT(0)"
      desc: "command list **only** contains copy operations (and synchronization primitives)"
--- #--------------------------------------------------------------------------
type: struct
desc: "Command List descriptor"
name: $x_command_list_desc_t
members:
    - type: uint32_t
      name: version
      desc: "[in] $X_COMMAND_LIST_DESC_VERSION"
    - type: $x_command_list_flags_t
      name: flags
      desc: "[in] creation flags"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a command list on the device for submitting commands to any command queue."
name: $xDeviceCreateCommandList
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "const $x_command_list_desc_t*"
      name: desc
      desc: "[in] pointer to command list descriptor"
    - type: $x_command_list_handle_t*
      name: phCommandList
      desc: "[out] pointer to handle of command list object created"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "nullptr for desc"
        - "nullptr for phCommandList"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a command list."
name: $xCommandListDestroy
details:
    - "The application is responsible for making sure the GPU is not currently referencing the command list before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this command list."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list object to destroy"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hCommandList"
--- #--------------------------------------------------------------------------
type: function
desc: "Closes a command list; ready to be enqueued into a command queue."
name: $xCommandListClose
details:
    - "The application may **not** call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list object to close"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hCommandList"
--- #--------------------------------------------------------------------------
type: function
desc: "Reset a command list to initial (empty) state; ready for encoding commands."
name: $xCommandListReset
details:
    - "The application is responsible for making sure the GPU is not currently referencing the command list before it is reset"
    - "The application may **not** call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list object to reset"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hCommandList"
