#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Command List"
ordinal: "4"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command list creation flags"
class: $xCommandList
name: $x_command_list_flag_t
etors:
    - name: $X_COMMAND_LIST_FLAG_NONE
      value: "0"
      desc: "default behavior"
    - name: $X_COMMAND_LIST_FLAG_RELAXED_ORDERING
      value: "$X_BIT(0)"
      desc: |
            driver may reorder programs and copys between barriers and synchronization primitives.
            using this flag may increase Host overhead of $xCommandListClose.
            therefore, this flag should **not** be set for low-latency usage-models.
    - name: $X_COMMAND_LIST_FLAG_MAXIMIZE_THROUGHPUT
      value: "$X_BIT(1)"
      desc: |
            driver may perform additional optimizations that increase dexecution throughput. 
            using this flag may increase Host overhead of $xCommandListClose and $xCommandQueueExecuteCommandLists.
            therefore, this flag should **not** be set for low-latency usage-models.
    - name: $X_COMMAND_LIST_FLAG_EXPLICIT_ONLY
      value: "$X_BIT(2)"
      desc: |
            command list should be optimized for submission to a single command queue and device engine.
            driver **must** disable any implicit optimizations for distributing work across multiple engines.
            this flag should be used when applications want full control over multi-engine submission and scheduling.
--- #--------------------------------------------------------------------------
type: struct
desc: "Command List descriptor"
class: $xCommandList
name: $x_command_list_desc_t
members:
    - type: $x_structure_type_t
      name: stype
      desc: "[in] type of this structure"
      init: $X_STRUCTURE_TYPE_COMMAND_LIST_DESC
    - type: "const void*"
      name: pNext
      desc: "[in][optional] pointer to extension-specific structure"
      init: nullptr
    - type: uint32_t
      name: commandQueueGroupOrdinal
      desc: "[in] command queue group ordinal to which this command list will be submitted"
    - type: $x_command_list_flag_t
      name: flags
      desc: "[in] creation flags"
      init: $X_COMMAND_LIST_FLAG_NONE
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a command list on the device for submitting commands to any command queue."
class: $xCommandList
name: Create
decl: static
ordinal: "0"
details:
    - "The command list can only be used on the device on which it was created."
    - "The command list is created in the 'open' state."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "const $x_command_list_desc_t*"
      name: desc
      desc: "[in] pointer to command list descriptor"
    - type: $x_command_list_handle_t*
      name: phCommandList
      desc: "[out] pointer to handle of command list object created"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a command list on the device with an implicit command queue for immediate submission of commands."
class: $xCommandList
name: CreateImmediate
decl: static
ordinal: "0"
details:
    - "The command list can only be used on the device on which it was created."
    - "The command list is created in the 'open' state and never needs to be closed."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "const $x_command_queue_desc_t*"
      name: altdesc
      desc: "[in] pointer to command queue descriptor"
    - type: $x_command_list_handle_t*
      name: phCommandList
      desc: "[out] pointer to handle of command list object created"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a command list."
class: $xCommandList
name: Destroy
decl: static
ordinal: "0"
details:
    - "The application is responsible for making sure the device is not currently referencing the command list before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this command list."
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in][release] handle of command list object to destroy"
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: function
desc: "Closes a command list; ready to be executed by a command queue."
class: $xCommandList
name: Close
ordinal: "1"
details:
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list object to close"
--- #--------------------------------------------------------------------------
type: function
desc: "Reset a command list to initial (empty) state; ready for appending commands."
class: $xCommandList
name: Reset
ordinal: "1"
details:
    - "The application is responsible for making sure the device is not currently referencing the command list before it is reset"
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list object to reset"
--- #--------------------------------------------------------------------------
type: function
desc: "Appends a memory write of the device's timestamp value into a command list."
class: $xCommandList
name: AppendWriteTimestamp
details:
    - "The memory pointed to by dstptr must be accessible by the device on which the command list is created."
    - "The timestamp frequency can be queried from ::$x_device_properties_t.timerResolution."
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: "uint64_t*"
      name: dstptr
      desc: "[in,out] pointer to memory where 64bit timestamp will be written; must be 8byte-aligned."
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before executing query"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before executing query"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for command list"
name: $xCommandList
owner: $xDevice
members:
    - type: $x_command_list_handle_t
      name: handle
      desc: "[in] handle of command list object"
    - type: $xDevice*
      name: pDevice
      desc: "[in] pointer to owner object"
    - type: $x_command_list_desc_t
      name: desc
      desc: "[in] descriptor of the command list object"
