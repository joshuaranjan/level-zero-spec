--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Command List"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_command_list_desc_t"
class: $xDevice
name: $x_command_list_desc_version_t
etors:
    - name: $X_COMMAND_LIST_DESC_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command list creation flags"
class: $xDevice
name: $x_command_list_flag_t
etors:
    - name: $X_COMMAND_LIST_FLAG_NONE
      value: "0"
      desc: "default behavior"
    - name: $X_COMMAND_LIST_FLAG_COPY_ONLY
      value: "$X_BIT(0)"
      desc: "command list **only** contains copy operations (and synchronization primitives)"
    - name: $X_COMMAND_LIST_FLAG_RELAXED_ORDERING
      value: "$X_BIT(1)"
      desc: "driver may reorder programs and copys between barriers and synchronization primitives"
    - name: $X_COMMAND_LIST_FLAG_LOW_LATENCY
      value: "$X_BIT(2)"
      desc: "driver should optimize for immediate submission to a command queue"
    - name: $X_COMMAND_LIST_FLAG_CROSS_DEVICE
      value: "$X_BIT(3)"
      desc: "command list can be shared with another device"
--- #--------------------------------------------------------------------------
type: struct
desc: "Command List descriptor"
class: $xDevice
name: $x_command_list_desc_t
members:
    - type: $x_command_list_desc_version_t
      name: version
      desc: "[in] $X_COMMAND_LIST_DESC_VERSION_CURRENT"
      init: $X_COMMAND_LIST_DESC_VERSION_CURRENT
    - type: $x_command_list_flag_t
      name: flags
      desc: "[in] creation flags"
      init: $X_COMMAND_LIST_FLAG_NONE
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a command list on the device for submitting commands to any command queue."
class: $xDevice
name: CreateCommandList
details:
    - "The command list is created in the 'open' state."
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "const $x_command_list_desc_t*"
      name: desc
      desc: "[in] pointer to command list descriptor"
    - type: $x_command_list_handle_t*
      name: phCommandList
      desc: "[out] pointer to handle of command list object created"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a command list."
class: $xCommandList
name: Destroy
details:
    - "The application is responsible for making sure the GPU is not currently referencing the command list before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this command list."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list object to destroy"
--- #--------------------------------------------------------------------------
type: function
desc: "Closes a command list; ready to be executed by a command queue."
class: $xCommandList
name: Close
details:
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list object to close"
--- #--------------------------------------------------------------------------
type: function
desc: "Reset a command list to initial (empty) state; ready for appending commands."
class: $xCommandList
name: Reset
details:
    - "The application is responsible for making sure the GPU is not currently referencing the command list before it is reset"
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list object to reset"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command list parameters"
class: $xCommandList
name: $x_command_list_parameter_t
etors:
    - name: $X_COMMAND_LIST_PARAMETER_TBD
      desc: "TBD"
--- #--------------------------------------------------------------------------
type: function
desc: "Sets a command list's parameter."
class: $xCommandList
name: SetParameter
analogue:
    - cuCtxSetCacheConfig
    - cuCtxSetLimit
    - cuCtxSetSharedMemConfig
details:
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: $x_command_list_parameter_t
      name: parameter
      desc: "[in] parameter to change"
    - type: uint32_t
      name: value
      desc: "[in] value of attribute"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid value for attribute"
        - "invalid value for value"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves a command list's parameter."
class: $xCommandList
name: GetParameter
analogue:
    - cuCtxGetCacheConfig
    - cuCtxGetLimit
    - cuCtxGetSharedMemConfig
    - cuCtxGetStreamPriorityRange
details:
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: $x_command_list_parameter_t
      name: parameter
      desc: "[in] parameter to retrieve"
    - type: "uint32_t*"
      name: value
      desc: "[out] value of attribute"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid value for attribute"
--- #--------------------------------------------------------------------------
type: function
desc: "Resets all command list parameters to default state."
class: $xCommandList
name: ResetParameters
details:
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of the command list"
--- #--------------------------------------------------------------------------
type: function
desc: "Reserve a section of contiguous command buffer space within the command list."
class: $xCommandList
name: ReserveSpace
details:
    - "The pointer returned is valid for both Host and device access."
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: size_t
      name: size
      desc: "[in] size (in bytes) to reserve"
    - type: void**
      name: ptr
      desc: "[out] pointer to command buffer space reserved"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
       - "0 for size"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for command list"
name: $xCommandList
members:
    - type: $x_command_list_handle_t
      name: handle
      desc: "handle of command list object"
    - type: $x_command_list_desc_t
      name: desc
      desc: "descriptor of the command list object"
