#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Command List"
ordinal: "3"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_command_list_desc_t"
class: $xCommandList
name: $x_command_list_desc_version_t
etors:
    - name: $X_COMMAND_LIST_DESC_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command list creation flags"
class: $xCommandList
name: $x_command_list_flag_t
etors:
    - name: $X_COMMAND_LIST_FLAG_NONE
      value: "0"
      desc: "default behavior"
    - name: $X_COMMAND_LIST_FLAG_COPY_ONLY
      value: "$X_BIT(0)"
      desc: |
            command list **only** contains copy operations (and synchronization primitives).
            this command list may **only** be submitted to a command queue created with $X_COMMAND_QUEUE_FLAG_COPY_ONLY.
    - name: $X_COMMAND_LIST_FLAG_RELAXED_ORDERING
      value: "$X_BIT(1)"
      desc: |
            driver may reorder programs and copys between barriers and synchronization primitives.
            using this flag may increase Host overhead of $xCommandListClose.
            therefore, this flag should **not** be set for low-latency usage-models.
    - name: $X_COMMAND_LIST_FLAG_MAXIMIZE_THROUGHPUT
      value: "$X_BIT(2)"
      desc: |
            driver may perform additional optimizations that increase dexecution throughput. 
            using this flag may increase Host overhead of $xCommandListClose and $xCommandQueueExecuteCommandLists.
            therefore, this flag should **not** be set for low-latency usage-models.
    - name: $X_COMMAND_LIST_FLAG_EXPLICIT_ONLY
      value: "$X_BIT(3)"
      desc: |
            command list should be optimized for submission to a single command queue and device engine.
            driver **must** disable any implicit optimizations for distributing work across multiple engines.
            this flag should be used when applications want full control over multi-engine submission and scheduling.
--- #--------------------------------------------------------------------------
type: struct
desc: "Command List descriptor"
class: $xCommandList
name: $x_command_list_desc_t
members:
    - type: $x_command_list_desc_version_t
      name: version
      desc: "[in] $X_COMMAND_LIST_DESC_VERSION_CURRENT"
      init: $X_COMMAND_LIST_DESC_VERSION_CURRENT
    - type: $x_command_list_flag_t
      name: flags
      desc: "[in] creation flags"
      init: $X_COMMAND_LIST_FLAG_NONE
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a command list on the device for submitting commands to any command queue."
class: $xCommandList
name: Create
decl: static
ordinal: "0"
details:
    - "The command list can only be used on the device on which it was created."
    - "The command list is created in the 'open' state."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "const $x_command_list_desc_t*"
      name: desc
      desc: "[in] pointer to command list descriptor"
    - type: $x_command_list_handle_t*
      name: phCommandList
      desc: "[out] pointer to handle of command list object created"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a command list on the device with an implicit command queue for immediate submission of commands."
class: $xCommandList
name: CreateImmediate
decl: static
ordinal: "0"
details:
    - "The command list can only be used on the device on which it was created."
    - "The command list is created in the 'open' state and never needs to be closed."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "const $x_command_queue_desc_t*"
      name: altdesc
      desc: "[in] pointer to command queue descriptor"
    - type: $x_command_list_handle_t*
      name: phCommandList
      desc: "[out] pointer to handle of command list object created"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a command list."
class: $xCommandList
name: Destroy
decl: static
ordinal: "0"
details:
    - "The application is responsible for making sure the device is not currently referencing the command list before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this command list."
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in][release] handle of command list object to destroy"
--- #--------------------------------------------------------------------------
type: function
desc: "Closes a command list; ready to be executed by a command queue."
class: $xCommandList
name: Close
ordinal: "1"
details:
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list object to close"
--- #--------------------------------------------------------------------------
type: function
desc: "Reset a command list to initial (empty) state; ready for appending commands."
class: $xCommandList
name: Reset
ordinal: "1"
details:
    - "The application is responsible for making sure the device is not currently referencing the command list before it is reset"
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list object to reset"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for command list"
name: $xCommandList
owner: $xDevice
members:
    - type: $x_command_list_handle_t
      name: handle
      desc: "[in] handle of command list object"
    - type: $xDevice*
      name: pDevice
      desc: "[in] pointer to owner object"
    - type: $x_command_list_desc_t
      name: desc
      desc: "[in] descriptor of the command list object"
