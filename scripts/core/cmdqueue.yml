#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Command Queue"
ordinal: "3"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command queue flags"
class: $xCommandQueue
name: $x_command_queue_flag_t
etors:
    - name: $X_COMMAND_QUEUE_FLAG_NONE
      value: "0"
      desc: "default behavior"
    - name: $X_COMMAND_QUEUE_FLAG_SINGLE_SLICE_ONLY
      value: "$X_BIT(0)"
      desc: "command queue reserves and cannot comsume more than a single slice."
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command queue modes"
class: $xCommandQueue
name: $x_command_queue_mode_t
etors:
    - name: $X_COMMAND_QUEUE_MODE_DEFAULT
      value: "0"
      desc: "implicit default behavior; uses driver-based heuristics"
    - name: $X_COMMAND_QUEUE_MODE_SYNCHRONOUS
      desc: |
        Device execution always completes immediately on execute;
        Host thread is blocked using wait on implicit synchronization object
    - name: $X_COMMAND_QUEUE_MODE_ASYNCHRONOUS
      desc: |
        Device execution is scheduled and will complete in future;
        explicit synchronization object must be used to determine completeness
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command queue priorities"
class: $xCommandQueue
name: $x_command_queue_priority_t
etors:
    - name: $X_COMMAND_QUEUE_PRIORITY_NORMAL
      value: "0"
      desc: "[default] normal priority"
    - name: $X_COMMAND_QUEUE_PRIORITY_LOW
      desc: "lower priority than normal"
    - name: $X_COMMAND_QUEUE_PRIORITY_HIGH
      desc: "higher priority than normal"
--- #--------------------------------------------------------------------------
type: struct
desc: "Command Queue descriptor"
class: $xCommandQueue
name: $x_command_queue_desc_t
members:
    - type: $x_structure_type_t
      name: stype
      desc: "[in] type of this structure"
      init: $X_STRUCTURE_TYPE_COMMAND_QUEUE_DESC
    - type: "const void*"
      name: pNext
      desc: "[in][optional] pointer to extension-specific structure"
      init: nullptr
    - type: uint32_t
      name: ordinal
      desc: "[in] command queue group ordinal"
    - type: uint32_t
      name: index
      desc: "[in] command queue index within the group"
    - type: $x_command_queue_flag_t
      name: flags
      desc: "[in] usage flags"
    - type: $x_command_queue_mode_t
      name: mode
      desc: "[in] operation mode"
      init: $X_COMMAND_QUEUE_MODE_DEFAULT
    - type: $x_command_queue_priority_t
      name: priority
      desc: "[in] priority"
      init: $X_COMMAND_QUEUE_PRIORITY_NORMAL
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a command queue on the device."
class: $xCommandQueue
name: Create
decl: static
ordinal: "0"
analogue:
    - "**clCreateCommandQueue**"
details:
    - "The command queue can only be used on the device on which it was created."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "const $x_command_queue_desc_t*"
      name: desc
      desc: "[in] pointer to command queue descriptor"
    - type: "$x_command_queue_handle_t*"
      name: phCommandQueue
      desc: "[out] pointer to handle of command queue object created"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a command queue."
class: $xCommandQueue
name: Destroy
decl: static
ordinal: "0"
analogue:
    - "**clReleaseCommandQueue**"
details:
    - "The application is responsible for making sure the device is not currently referencing the command queue before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this command queue"
    - "The application may **not** call this function from simultaneous threads with the same command queue handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_queue_handle_t
      name: hCommandQueue
      desc: "[in][release] handle of command queue object to destroy"
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: function
desc: "Executes a command list in a command queue."
class: $xCommandQueue
name: ExecuteCommandLists
ordinal: "1"
analogue:
    - vkQueueSubmit
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_queue_handle_t
      name: hCommandQueue
      desc: "[in] handle of the command queue"
    - type: uint32_t
      name: numCommandLists
      desc: "[in] number of command lists to execute"
    - type: "$x_command_list_handle_t*"
      name: phCommandLists
      desc: "[in][range(0, numCommandLists)] list of handles of the command lists to execute"
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in][optional] handle of the fence to signal on completion"
returns:
    - $X_RESULT_ERROR_INVALID_SIZE:
       - "`0 == numCommandLists`"
    - $X_RESULT_ERROR_INVALID_COMMAND_LIST_TYPE
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
--- #--------------------------------------------------------------------------
type: function
desc: "Synchronizes a command queue by waiting on the host."
class: $xCommandQueue
name: Synchronize
ordinal: "1"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_queue_handle_t
      name: hCommandQueue
      desc: "[in] handle of the command queue"
    - type: uint32_t
      name: timeout
      desc: |
            [in] if non-zero, then indicates the maximum time to yield before returning $X_RESULT_SUCCESS or $X_RESULT_NOT_READY;
            if zero, then operates exactly like $xFenceQueryStatus;
            if UINT32_MAX, then function will not return until complete or device is lost.
returns:
    - $X_RESULT_NOT_READY:
       - "timeout expired"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for command queue"
name: $xCommandQueue
owner: $xDevice
members:
    - type: $x_command_queue_handle_t
      name: handle
      desc: "[in] handle of command queue object"
    - type: $xDevice*
      name: pDevice
      desc: "[in] pointer to owner object"
    - type: $x_command_queue_desc_t
      name: desc
      desc: "[in] descriptor of the command queue object"
