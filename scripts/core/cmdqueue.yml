#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Command Queue"
ordinal: "2"
--- #--------------------------------------------------------------------------
type: enum
desc: API version of $x_command_queue_desc_t
class: $xCommandQueue
name: $x_command_queue_desc_version_t
etors:
    - name: $X_COMMAND_QUEUE_DESC_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command queue flags"
class: $xCommandQueue
name: $x_command_queue_flag_t
etors:
    - name: $X_COMMAND_QUEUE_FLAG_NONE
      value: "0"
      desc: "default behavior"
    - name: $X_COMMAND_QUEUE_FLAG_COPY_ONLY
      value: "$X_BIT(0)"
      desc: "command queue only supports enqueing copy-only command lists"
    - name: $X_COMMAND_QUEUE_FLAG_LOGICAL_ONLY
      value: "$X_BIT(1)"
      desc: "command queue is not tied to a physical command queue; driver may dynamically assign based on usage"
    - name: $X_COMMAND_QUEUE_FLAG_SINGLE_SLICE_ONLY
      value: "$X_BIT(2)"
      desc: "command queue reserves and cannot comsume more than a single slice. 'slice' size is device-specific.  cannot be combined with COPY_ONLY."
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command queue modes"
class: $xCommandQueue
name: $x_command_queue_mode_t
etors:
    - name: $X_COMMAND_QUEUE_MODE_DEFAULT
      value: "0"
      desc: "implicit default behavior; uses driver-based heuristics"
    - name: $X_COMMAND_QUEUE_MODE_SYNCHRONOUS
      desc: |
        Device execution always completes immediately on execute;
        Host thread is blocked using wait on implicit synchronization object
    - name: $X_COMMAND_QUEUE_MODE_ASYNCHRONOUS
      desc: |
        Device execution is scheduled and will complete in future;
        explicit synchronization object must be used to determine completeness
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command queue priorities"
class: $xCommandQueue
name: $x_command_queue_priority_t
etors:
    - name: $X_COMMAND_QUEUE_PRIORITY_NORMAL
      value: "0"
      desc: "[default] normal priority"
    - name: $X_COMMAND_QUEUE_PRIORITY_LOW
      desc: "lower priority than normal"
    - name: $X_COMMAND_QUEUE_PRIORITY_HIGH
      desc: "higher priority than normal"
--- #--------------------------------------------------------------------------
type: struct
desc: "Command Queue descriptor"
class: $xCommandQueue
name: $x_command_queue_desc_t
members:
    - type: $x_command_queue_desc_version_t
      name: version
      desc: "[in] $X_COMMAND_QUEUE_DESC_VERSION_CURRENT"
      init: $X_COMMAND_QUEUE_DESC_VERSION_CURRENT
    - type: $x_command_queue_flag_t
      name: flags
      desc: "[in] creation flags"
      init: $X_COMMAND_QUEUE_FLAG_NONE
    - type: $x_command_queue_mode_t
      name: mode
      desc: "[in] operation mode"
      init: $X_COMMAND_QUEUE_MODE_DEFAULT
    - type: $x_command_queue_priority_t
      name: priority
      desc: "[in] priority"
      init: $X_COMMAND_QUEUE_PRIORITY_NORMAL
    - type: uint32_t
      name: ordinal
      desc: |
        [in] if logical-only flag is set, then will be ignored;
        else-if copy-only flag is set, then must be less than $x_device_properties_t.numAsyncCopyEngines;
        otherwise must be less than $x_device_properties_t.numAsyncComputeEngines. When using sub-devices
        the $x_device_properties_t.numAsyncComputeEngines must be queried from the sub-device being used.
      init: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a command queue on the device."
class: $xCommandQueue
name: Create
decl: static
ordinal: "0"
analogue:
    - "**clCreateCommandQueue**"
    - cuCtxCreate
    - cuCtxGetCurrent
details:
    - "The command queue can only be used on the device on which it was created."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "const $x_command_queue_desc_t*"
      name: desc
      desc: "[in] pointer to command queue descriptor"
    - type: "$x_command_queue_handle_t*"
      name: phCommandQueue
      desc: "[out] pointer to handle of command queue object created"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a command queue."
class: $xCommandQueue
name: Destroy
decl: static
ordinal: "0"
analogue:
    - "**clReleaseCommandQueue**"
    - cuCtxDestroy
details:
    - "The application is responsible for making sure the device is not currently referencing the command queue before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this command queue"
    - "The application may **not** call this function from simultaneous threads with the same command queue handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_queue_handle_t
      name: hCommandQueue
      desc: "[in][release] handle of command queue object to destroy"
--- #--------------------------------------------------------------------------
type: function
desc: "Executes a command list in a command queue."
class: $xCommandQueue
name: ExecuteCommandLists
ordinal: "1"
analogue:
    - vkQueueSubmit
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_queue_handle_t
      name: hCommandQueue
      desc: "[in] handle of the command queue"
    - type: uint32_t
      name: numCommandLists
      desc: "[in] number of command lists to execute"
    - type: "$x_command_list_handle_t*"
      name: phCommandLists
      desc: "[in][range(0, numCommandLists)] list of handles of the command lists to execute"
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in][optional] handle of the fence to signal on completion"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
       - "0 for numCommandLists"
       - "hFence is in signaled state"
--- #--------------------------------------------------------------------------
type: function
desc: "Synchronizes a command queue by waiting on the host."
class: $xCommandQueue
name: Synchronize
ordinal: "1"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_queue_handle_t
      name: hCommandQueue
      desc: "[in] handle of the command queue"
    - type: uint32_t
      name: timeout
      desc: |
            [in] if non-zero, then indicates the maximum time to yield before returning $X_RESULT_SUCCESS or $X_RESULT_NOT_READY;
            if zero, then operates exactly like $xFenceQueryStatus;
            if UINT32_MAX, then function will not return until complete or device is lost.
returns:
    - $X_RESULT_NOT_READY:
       - "timeout expired"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for command queue"
name: $xCommandQueue
owner: $xDevice
members:
    - type: $x_command_queue_handle_t
      name: handle
      desc: "[in] handle of command queue object"
    - type: $xDevice*
      name: pDevice
      desc: "[in] pointer to owner object"
    - type: $x_command_queue_desc_t
      name: desc
      desc: "[in] descriptor of the command queue object"
