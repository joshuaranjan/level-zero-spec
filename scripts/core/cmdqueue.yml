--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Driver APIs for Command Queue"
--- #--------------------------------------------------------------------------
type: macro
desc: API version of $x_command_queue_desc_t
name: $X_COMMAND_QUEUE_DESC_VERSION
value: "$X_MAKE_VERSION( 1, 0 )"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command queue flags"
name: $x_command_queue_flags_t
etors:
    - name: $X_COMMAND_QUEUE_FLAG_NONE
      value: "0"
      desc: "default behavior"
    - name: $X_COMMAND_QUEUE_FLAG_COPY_ONLY
      value: "$X_BIT(0)"
      desc: "command queue only supports enqueing copy-only command lists"
    - name: $X_COMMAND_QUEUE_FLAG_LOGICAL_ONLY
      value: "$X_BIT(1)"
      desc: "command queue is not tied to a physical command queue; driver may dynamically assign based on usage"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command queue modes"
name: $x_command_queue_mode_t
etors:
    - name: $X_COMMAND_QUEUE_MODE_DEFAULT
      value: "0"
      desc: "implicit default behavior; uses driver-based heuristics"
    - name: $X_COMMAND_QUEUE_MODE_SYNCHRONOUS
      desc: "GPU execution always completes immediately on enqueue;
            CPU thread is blocked using wait on implicit synchronization object"
    - name: $X_COMMAND_QUEUE_MODE_ASYNCHRONOUS
      desc: "GPU execution is scheduled and will complete in future;
            explicit synchronization object must be used to determine completeness"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command queue priorities"
name: $x_command_queue_priority_t
etors:
    - name: $X_COMMAND_QUEUE_PRIORITY_NORMAL
      value: "0"
      desc: "[default] normal priority"
    - name: $X_COMMAND_QUEUE_PRIORITY_LOW
      desc: "lower priority than normal"
    - name: $X_COMMAND_QUEUE_PRIORITY_HIGH
      desc: "higher priority than normal"
--- #--------------------------------------------------------------------------
type: struct
desc: "Command Queue descriptor"
name: $x_command_queue_desc_t
members:
    - type: uint32_t
      name: version
      desc: "[in] $X_COMMAND_QUEUE_DESC_VERSION"
    - type: $x_command_queue_flags_t
      name: flags
      desc: "[in] creation flags"
    - type: $x_command_queue_mode_t
      name: mode
      desc: "[in] operation mode"
    - type: $x_command_queue_priority_t
      name: priority
      desc: "[in] priority"
    - type: uint32_t
      name: ordinal
      desc: "[in] if logical-only flag is set, then must be 0;
            else-if copy-only flag is set, then must be less than $x_device_properties_t.numAsyncCopyEngines;
            otherwise must be less than $x_device_properties_t.numAsyncComputeEngines"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a command queue on the device."
name: $xDeviceCreateCommandQueue
analogue:
    - "**clCreateCommandQueue**"
    - cuCtxCreate
    - cuCtxGetCurrent
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "const $x_command_queue_desc_t*"
      name: desc
      desc: "[in] pointer to command queue descriptor"
    - type: "$x_command_queue_handle_t*"
      name: phCommandQueue
      desc: "[out] pointer to handle of command queue object created"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "nullptr for desc"
        - "nullptr for phCommandQueue"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a command queue."
name: $xCommandQueueDestroy
analogue:
    - "**clReleaseCommandQueue**"
    - cuCtxDestroy
details:
    - "The application is responsible for making sure the GPU is not currently referencing the command queue before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this command queue"
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_queue_handle_t
      name: hCommandQueue
      desc: "[in] handle of command queue object to destroy"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - invalid handle for hCommandQueue
--- #--------------------------------------------------------------------------
type: function
desc: "Enqueues a command list into a command queue."
name: $xCommandQueueEnqueueCommandLists
analogue:
    - vkQueueSubmit
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_queue_handle_t
      name: hCommandQueue
      desc: "[in] handle of the command queue"
    - type: uint32_t
      name: numCommandLists
      desc: "[in] number of command lists to enqueue"
    - type: "$x_command_list_handle_t*"
      name: phCommandLists
      desc: "[in] list of handles of the command lists to enqueue for execution"
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in][optional] handle of the fence to signal on completion"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
       - "invalid handle for hCommandQueue"
       - "0 for numCommandLists"
       - "nullptr for phCommandLists"
       - "invalid handle in phCommandLists"
       - "hFence is in signaled state"
       - "hFence is enqueued in another command queue"
--- #--------------------------------------------------------------------------
type: function
desc: "Synchronizes a command queue by waiting on the host."
name: $xCommandQueueSynchronize
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_queue_handle_t
      name: hCommandQueue
      desc: "[in] handle of the command queue"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
       - "invalid handle for hCommandQueue"
