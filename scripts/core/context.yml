#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Context"
ordinal: "3"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported context creation flags"
class: $xContext
name: $x_context_flags_t
etors:
    - name: TBD
      desc: "reserved for future use"
--- #--------------------------------------------------------------------------
type: struct
desc: "Context descriptor"
class: $xContext
name: $x_context_desc_t
base: $x_base_desc_t
members:
    - type: $x_context_flags_t
      name: flags
      desc: |
            [in] creation flags.
            must be 0 (default) or a valid combination of $x_context_flag_t;
            default behavior may use implicit driver-based heuristics.
      init: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a context for the driver."
class: $xContext
name: Create
decl: static
ordinal: "0"
details:
    - "The application must only use the context on the driver, including its sub-devices, for which it was created."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver object"
    - type: "const $x_context_desc_t*"
      name: desc
      desc: "[in] pointer to context descriptor"
    - type: $x_context_handle_t*
      name: phContext
      desc: "[out] pointer to handle of context object created"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a context."
class: $xContext
name: Destroy
decl: static
ordinal: "0"
details:
    - "The application must ensure the device is not currently referencing the context before it is deleted."
    - "The implementation of this function may immediately free all Host and Device allocations associated with this context."
    - "The application must **not** call this function from simultaneous threads with the same context handle."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in][release] handle of context object to destroy"
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: function
desc: "Returns current status of the context."
class: $xContext
name: GetStatus
details:
    - "The application may call this function from simultaneous threads with the same context handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of context object"
returns:
    - $X_RESULT_SUCCESS:
        - "Context is available for use."
    - $X_RESULT_ERROR_DEVICE_LOST:
        - "Context is invalid, due to device lost or reset and must be reset for use."
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported Cache Config flags"
class: $xContext
name: $x_cache_config_flags_t
etors:
    - name: LARGE_SLM
      desc: "Large SLM size"
    - name: LARGE_DATA
      desc: "Large General Data size"
--- #--------------------------------------------------------------------------
type: function
desc: "Sets the preferred Last Level cache configuration for a device."
class: $xContext
name: SetLastLevelCacheConfig
ordinal: "2"
details:
    - "The application must **not** call this function from simultaneous threads with the same device handle."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of context object"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device "
    - type: "$x_cache_config_flags_t"
      name: flags
      desc: |
            [in] cache configuration. 
            must be 0 (default configuration) or a valid combination of $x_cache_config_flag_t.
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for context"
name: $xContext
owner: $xDriver
members:
    - type: $x_context_handle_t
      name: handle
      desc: "[in] handle of context object"
    - type: $xDriver*
      name: pDriver
      desc: "[in] pointer to owner object"
