--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Copies"
--- #--------------------------------------------------------------------------
type: function
desc: "Copies host, device, or shared memory."
class: $xCommandList
name: AppendMemoryCopy
details:
    - "The memory pointed to by both srcptr and dstptr must be accessible by
      the device on which the command list is created."
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
analogue:
    - "**clEnqueueCopyBuffer**"
    - "**clEnqueueReadBuffer**"
    - "**clEnqueueWriteBuffer**"
    - "**clEnqueueSVMMemcpy**"
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: "void*"
      name: dstptr
      desc: "[in] pointer to destination memory to copy to"
    - type: "const void*"
      name: srcptr
      desc: "[in] pointer to source memory to copy from"
    - type: size_t
      name: size
      desc: "[in] size in bytes to copy"
--- #--------------------------------------------------------------------------
type: function
desc: "Initializes host, device, or shared memory."
class: $xCommandList
name: AppendMemorySet
details:
    - "The memory pointed to by dstptr must be accessible by the device on which the command list is created."
    - "The value to initialize memory to is interpreted as an 8-bit unsigned char; the upper 24-bits are ignored."
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
analogue:
    - "**clEnqueueFillBuffer**"
    - "**clEnqueueSVMMemFill**"
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: "void*"
      name: ptr
      desc: "[in] pointer to memory to initialize"
    - type: "int"
      name: value
      desc: "[in] value to initialize memory to"
    - type: size_t
      name: size
      desc: "[in] size in bytes to initailize"
--- #--------------------------------------------------------------------------
type: function
desc: "Copies a image."
class: $xCommandList
name: AppendImageCopy
analogue:
    - "**clEnqueueCopyImage**"
details:
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: $x_image_handle_t
      name: hDstImage
      desc: "[in] handle of destination image to copy to"
    - type: $x_image_handle_t
      name: hSrcImage
      desc: "[in] handle of source image to copy from"
--- #--------------------------------------------------------------------------
type: struct
desc: "Region descriptor"
class: $xCommandList
name: $x_image_region_t
members:
    - type: size_t
      name: offset
      desc: "[in] offset in bytes from base"
      init: "0"
    - type: size_t
      name: size
      desc: "[in] size in bytes from base+offset"
      init: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Copies a region of a image to another image."
class: $xCommandList
name: AppendImageCopyRegion
details:
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: $x_image_handle_t
      name: hDstImage
      desc: "[in] handle of destination image to copy to"
    - type: "$x_image_region_t*"
      name: pDstRegion
      desc: "[in][optional] destination region descriptor"
    - type: $x_image_handle_t
      name: hSrcImage
      desc: "[in] handle of source image to copy from"
    - type: "$x_image_region_t*"
      name: pSrcRegion
      desc: "[in][optional] source region descriptor"
--- #--------------------------------------------------------------------------
type: function
desc: "Copies from a image to device or shared memory."
class: $xCommandList
name: AppendImageCopyToMemory
analogue:
    - clEnqueueReadImage
details:
    - "The memory pointed to by dstptr must be accessible by
      the device on which the command list is created."
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: "void*"
      name: dstptr
      desc: "[in] pointer to destination memory to copy to"
    - type: $x_image_handle_t
      name: hSrcImage
      desc: "[in] handle of source image to copy from"
    - type: "$x_image_region_t*"
      name: pSrcRegion
      desc: "[in][optional] source region descriptor"
--- #--------------------------------------------------------------------------
type: function
desc: "Copies to a image from device or shared memory."
class: $xCommandList
name: AppendImageCopyFromMemory
analogue:
    - clEnqueueWriteImage
details:
    - "The memory pointed to by srcptr must be accessible by
      the device on which the command list is created."
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: $x_image_handle_t
      name: hDstImage
      desc: "[in] handle of destination image to copy to"
    - type: "$x_image_region_t*"
      name: pDstRegion
      desc: "[in][optional] destination region descriptor"
    - type: "const void*"
      name: srcptr
      desc: "[in] pointer to source memory to copy from"
--- #--------------------------------------------------------------------------
type: function
desc: "Asynchronously prefetches shared memory to the device associated with
      the specified command list"
class: $xCommandList
name: AppendMemoryPrefetch
details:
    - "This is a hint to improve performance only and is not required for correctness."
    - "Only prefetching to the device associated with the specified command list is supported.
       Prefetching to the host or to a peer device is not supported."
    - "Prefetching may not be supported for all allocation types for all devices.
       If memory prefetching is not supported for the specified memory range the prefetch hint may be ignored."
    - "Prefetching may only be supported at a device-specific granularity, such as at a page boundary.
       In this case, the memory range may be expanded such that the start and end of the range satisfy
       granularity requirements."
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
analogue:
    - cudaMemPrefetchAsync
    - clEnqueueSVMMigrateMem
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to start of the memory range to prefetch"
    - type: "size_t"
      name: count
      desc: "[in] size in bytes of the memory range to prefetch"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported memory advice hints"
class: $xCommandList
name: $x_memory_advice_t
etors:
    - name: $X_MEMORY_ADVICE_SET_READ_MOSTLY
      value: "0"
      desc: "hint that memory will be read from frequently and written to rarely"
    - name: $X_MEMORY_ADVICE_CLEAR_READ_MOSTLY
      desc: "removes the affect of $X_MEMORY_ADVICE_SET_READ_MOSTLY"
    - name: $X_MEMORY_ADVICE_SET_PREFERRED_LOCATION
      desc: "hint that the preferred memory location is the specified device"
    - name: $X_MEMORY_ADVICE_CLEAR_PREFERRED_LOCATION
      desc: "removes the affect of $X_MEMORY_ADVICE_SET_PREFERRED_LOCATION"
    - name: $X_MEMORY_ADVICE_SET_ACCESSED_BY
      desc: "hint that memory will be accessed by the specified device"
    - name: $X_MEMORY_ADVICE_CLEAR_ACCESSED_BY
      desc: "removes the affect of $X_MEMORY_ADVICE_SET_ACCESSED_BY"
    - name: $X_MEMORY_ADVICE_SET_NON_ATOMIC_MOSTLY
      desc: "hints that memory will mostly be accessed non-atomically"
    - name: $X_MEMORY_ADVICE_CLEAR_NON_ATOMIC_MOSTLY
      desc: "removes the affect of $X_MEMORY_ADVICE_SET_NON_ATOMIC_MOSTLY"
    - name: $X_MEMORY_ADVICE_BIAS_CACHED
      desc: "hints that memory should be cached"
    - name: $X_MEMORY_ADVICE_BIAS_UNCACHED
      desc: "hints that memory should be not be cached"
--- #--------------------------------------------------------------------------
type: function
desc: "Provides advice about the use of a shared memory range"
class: $xCommandList
name: AppendMemAdvise
analogue:
    - "**cudaMemAdvise**"
details:
    - "Memory advice is a performance hint only and is not required for functional correctness."
    - "Memory advice can be used to override driver heuristics to explicitly control shared memory behavior."
    - "Not all memory advice hints may be supported for all allocation types for all devices.
       If a memory advice hint is not supported by the device it will be ignored."
    - "Memory advice may only be supported at a device-specific granularity, such as at a page boundary.
       In this case, the memory range may be expanded such that the start and end of the range satisfy
       granularity requirements."
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] device associated with the memory advice"
    - type: "const void*"
      name: ptr
      desc: "[in] Pointer to the start of the memory range"
    - type: size_t
      name: size
      desc: "[in] Size in bytes of the memory range"
    - type: $x_memory_advice_t
      name: advice
      desc: "[in] Memory advice for the memory range"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid value for advice"
