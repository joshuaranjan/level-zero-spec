#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Device"
ordinal: "1"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves devices within a driver"
class: $xDevice
name: Get
decl: static
ordinal: "0"
analogue:
    - "**cuDeviceGet**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] pointer to the number of devices.
            if count is zero, then the driver will update the value with the total number of devices available.
            if count is non-zero, then driver will only retrieve that number of devices.
            if count is larger than the number of devices available, then the driver will update the value with the correct number of devices available.
    - type: "$x_device_handle_t*"
      name: phDevices
      desc: "[in,out][optional][range(0, *pCount)] array of handle of devices"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves a sub-device from a device"
class: $xDevice
name: GetSubDevices
ordinal: "1"
analogue:
    - clCreateSubDevices
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] pointer to the number of sub-devices.
            if count is zero, then the driver will update the value with the total number of sub-devices available.
            if count is non-zero, then driver will only retrieve that number of sub-devices.
            if count is larger than the number of sub-devices available, then the driver will update the value with the correct number of sub-devices available.
    - type: "$x_device_handle_t*"
      name: phSubdevices
      desc: "[in,out][optional][range(0, *pCount)] array of handle of sub-devices"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_device_properties_t"
class: $xDevice
name: $x_device_properties_version_t
etors:
    - name: $X_DEVICE_PROPERTIES_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported device types"
class: $xDevice
name: $x_device_type_t
etors:
    - name: $X_DEVICE_TYPE_GPU
      value: "1"
      desc: "Graphics Processing Unit"
    - name: $X_DEVICE_TYPE_FPGA
      desc: "Field Programmable Gate Array"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum device universal unique id (UUID) size in bytes"
name: $X_MAX_DEVICE_UUID_SIZE
value: "16"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device universal unique id (UUID)"
name: "$x_device_uuid_t"
members:
    - type: uint8_t
      name: "id[$X_MAX_DEVICE_UUID_SIZE]"
      desc: "Opaque data representing a device UUID"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum device name string size"
name: $X_MAX_DEVICE_NAME
value: "256"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device properties queried using $xDeviceGetProperties"
class: $xDevice
name: $x_device_properties_t
members:
    - type: $x_device_properties_version_t
      name: version
      desc: "[in] $X_DEVICE_PROPERTIES_VERSION_CURRENT"
      init: $X_DEVICE_PROPERTIES_VERSION_CURRENT
    - type: $x_device_type_t
      name: type
      desc: "[out] generic device type"
    - type: uint32_t
      name: vendorId
      desc: "[out] vendor id from PCI configuration"
    - type: uint32_t
      name: deviceId
      desc: "[out] device id from PCI configuration" 
    - type: $x_device_uuid_t
      name: uuid
      desc: "[out] universal unique identifier."
    - type: $x_bool_t
      name: isSubdevice
      desc: "[out] If the device handle used for query represents a sub-device."
    - type: uint32_t
      name: subdeviceId
      desc: "[out] sub-device id. Only valid if isSubdevice is true."
    - type: uint32_t
      name: coreClockRate
      desc: "[out] Clock rate for device core."
    - type: $x_bool_t
      name: unifiedMemorySupported
      desc: "[out] Supports unified physical memory between Host and device."
    - type: $x_bool_t
      name: eccMemorySupported
      desc: "[out] Supports error correction memory access."
    - type: $x_bool_t
      name: onDemandPageFaultsSupported
      desc: "[out] Supports on-demand page-faulting."
    - type: uint32_t
      name: maxCommandQueues
      desc: "[out] Maximum number of logical command queues."
    - type: uint32_t
      name: numAsyncComputeEngines
      desc: "[out] Number of asynchronous compute engines"
    - type: uint32_t
      name: numAsyncCopyEngines
      desc: "[out] Number of asynchronous copy engines"
    - type: uint32_t
      name: maxCommandQueuePriority
      desc: "[out] Maximum priority for command queues. Higher value is higher priority."
    - type: uint32_t
      name: numThreadsPerEU
      desc: "[out] Number of threads per EU."
    - type: uint32_t
      name: physicalEUSimdWidth
      desc: "[out] The physical EU simd width."
    - type: uint32_t
      name: numEUsPerSubslice
      desc: "[out] Number of EUs per sub-slice."
    - type: uint32_t
      name: numSubslicesPerSlice
      desc: "[out] Number of sub-slices per slice."
    - type: uint32_t
      name: numSlicesPerTile
      desc: "[out] Number of slices per tile."
    - type: uint32_t
      name: numTiles
      desc: "[out] Number of tiles."
    - type: uint64_t
      name: timerResolution
      desc: "[out] Returns the resolution of device timer in nanoseconds."
    - type: char
      name: "name[$X_MAX_DEVICE_NAME]"
      desc: "[out] Device name"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves properties of the device."
class: $xDevice
name: GetProperties
ordinal: "1"
analogue:
    - "**cuDeviceGetAttribute**"
    - cuDeviceGetName
    - clGetDeviceInfo
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "$x_device_properties_t*"
      name: pDeviceProperties
      desc: "[in,out] query result for device properties"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_device_compute_properties_t"
class: $xDevice
name: $x_device_compute_properties_version_t
etors:
    - name: $X_DEVICE_COMPUTE_PROPERTIES_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum number of subgroup sizes supported."
name: $X_SUBGROUPSIZE_COUNT
value: "8"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device compute properties queried using $xDeviceGetComputeProperties"
class: $xDevice
name: $x_device_compute_properties_t
members:
    - type: $x_device_compute_properties_version_t
      name: version
      desc: "[in] $X_DEVICE_COMPUTE_PROPERTIES_VERSION_CURRENT"
      init: $X_DEVICE_COMPUTE_PROPERTIES_VERSION_CURRENT
    - type: uint32_t
      name: maxTotalGroupSize
      desc: "[out] Maximum items per compute group. (maxGroupSizeX * maxGroupSizeY * maxGroupSizeZ) <= maxTotalGroupSize"
    - type: uint32_t
      name: maxGroupSizeX
      desc: "[out] Maximum items for X dimension in group"
    - type: uint32_t
      name: maxGroupSizeY
      desc: "[out] Maximum items for Y dimension in group"
    - type: uint32_t
      name: maxGroupSizeZ
      desc: "[out] Maximum items for Z dimension in group"
    - type: uint32_t
      name: maxGroupCountX
      desc: "[out] Maximum groups that can be launched for x dimension"
    - type: uint32_t
      name: maxGroupCountY
      desc: "[out] Maximum groups that can be launched for y dimension"
    - type: uint32_t
      name: maxGroupCountZ
      desc: "[out] Maximum groups that can be launched for z dimension"
    - type: uint32_t
      name: maxSharedLocalMemory
      desc: "[out] Maximum shared local memory per group."
    - type: uint32_t
      name: numSubGroupSizes
      desc: "[out] Number of subgroup sizes supported. This indicates number of entries in subGroupSizes."
    - type: uint32_t
      name: "subGroupSizes[$X_SUBGROUPSIZE_COUNT]"
      desc: "[out] Size group sizes supported."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves compute properties of the device."
class: $xDevice
name: GetComputeProperties
ordinal: "1"
analogue:
    - "**cuDeviceGetAttribute**"
    - clGetDeviceInfo
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "$x_device_compute_properties_t*"
      name: pComputeProperties
      desc: "[in,out] query result for compute properties"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_device_kernel_properties_t"
class: $xDevice
name: $x_device_kernel_properties_version_t
etors:
    - name: $X_DEVICE_KERNEL_PROPERTIES_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum native kernel universal unique id (UUID) size in bytes"
name: $X_MAX_NATIVE_KERNEL_UUID_SIZE
value: "16"
--- #--------------------------------------------------------------------------
type: struct
desc: "Native kernel universal unique id (UUID)"
class: $xDevice
name: "$x_native_kernel_uuid_t"
members:
    - type: uint8_t
      name: "id[$X_MAX_NATIVE_KERNEL_UUID_SIZE]"
      desc: "Opaque data representing a native kernel UUID"
--- #--------------------------------------------------------------------------
type: enum
desc: "Floating Point capabilities"
class: $xDevice
name: $x_floating_point_capabilities_t
details:
    - "floating-point capabilities of the device."
etors:
    - name: $X_FP_CAPS_NONE
      value: "0"
      desc: "None"
    - name: $X_FP_CAPS_DENORM
      value: "$X_BIT( 0 )"
      desc: "Supports denorms"
    - name: $X_FP_CAPS_INF_NAN
      value: "$X_BIT( 1 )"
      desc: "Supports INF and quiet NaNs"
    - name: $X_FP_CAPS_ROUND_TO_NEAREST
      value: "$X_BIT( 2 )"
      desc: "Supports rounding to nearest even rounding mode"
    - name: $X_FP_CAPS_ROUND_TO_ZERO
      value: "$X_BIT( 3 )"
      desc: "Supports rounding to zero."
    - name: $X_FP_CAPS_ROUND_TO_INF
      value: "$X_BIT( 4 )"
      desc: "Supports rounding to both positive and negative INF."
    - name: $X_FP_CAPS_FMA
      value: "$X_BIT( 5 )"
      desc: "Supports IEEE754-2008 fused multiply-add."
    - name: $X_FP_CAPS_ROUNDED_DIVIDE_SQRT
      value: "$X_BIT( 6 )"
      desc: "Supports rounding as defined by IEEE754 for divide and sqrt operations."
    - name: $X_FP_CAPS_SOFT_FLOAT
      value: "$X_BIT( 7 )"
      desc: "Uses software implementation for basic floating-point operations."
--- #--------------------------------------------------------------------------
type: struct
desc: "Device properties queried using $xDeviceGetKernelProperties"
class: $xDevice
name: $x_device_kernel_properties_t
members:
    - type: $x_device_kernel_properties_version_t
      name: version
      desc: "[in] $X_DEVICE_KERNEL_PROPERTIES_VERSION_CURRENT"
      init: $X_DEVICE_KERNEL_PROPERTIES_VERSION_CURRENT
    - type: uint32_t
      name: spirvVersionSupported
      desc: |
            [out] Maximum supported SPIR-V version.
            Returns zero if SPIR-V is not supported.
            Contains major and minor attributes, use $X_MAJOR_VERSION and $X_MINOR_VERSION.
    - type: $x_native_kernel_uuid_t
      name: nativeKernelSupported
      desc: |
            [out] Compatibility UUID of supported native kernel.
            UUID may or may not be the same across driver release, devices, or operating systems.
            Application is responsible for ensuring UUID matches before creating module using
            previously created native kernel.
    - type: $x_bool_t
      name: fp16Supported
      desc: "[out] Supports 16-bit floating-point operations"
    - type: $x_bool_t
      name: fp64Supported
      desc: "[out] Supports 64-bit floating-point operations"
    - type: $x_bool_t
      name: int64AtomicsSupported
      desc: "[out] Supports 64-bit atomic operations"
    - type: $x_bool_t
      name: dp4aSupported
      desc: "[out] Supports four component dot product and accumulate operations"
    - type: $x_floating_point_capabilities_t
      name: singleFpCapabilities
      desc: "[out] Capabilities for single-precision floating-point operations."
    - type: $x_floating_point_capabilities_t
      name: doubleFpCapabilities
      desc: "[out] Capabilities for double-precision floating-point operations."
    - type: uint32_t
      name: maxArgumentsSize
      desc: "[out] Maximum kernel argument size that is supported."
    - type: uint32_t
      name: printfBufferSize
      desc: "[out] Maximum size of internal buffer that holds output of printf calls from kernel."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves kernel properties of the device"
class: $xDevice
name: GetKernelProperties
ordinal: "1"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: "$x_device_kernel_properties_t*"
      name: pKernelProperties
      desc: "[in,out] query result for kernel properties"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_device_memory_properties_t"
class: $xDevice
name: $x_device_memory_properties_version_t
etors:
    - name: $X_DEVICE_MEMORY_PROPERTIES_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device local memory properties queried using $xDeviceGetMemoryProperties"
class: $xDevice
name: $x_device_memory_properties_t
members:
    - type: $x_device_memory_properties_version_t
      name: version
      desc: "[in] $X_DEVICE_MEMORY_PROPERTIES_VERSION_CURRENT"
      init: $X_DEVICE_MEMORY_PROPERTIES_VERSION_CURRENT
    - type: uint32_t
      name: maxClockRate
      desc: "[out] Maximum clock rate for device memory."
    - type: uint32_t
      name: maxBusWidth
      desc: "[out] Maximum bus width between device and memory."
    - type: uint64_t
      name: totalSize
      desc: "[out] Total memory size in bytes."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves local memory properties of the device."
class: $xDevice
name: GetMemoryProperties
ordinal: "1"
analogue:
    - "**cuDeviceGetAttribute**"
    - cuDeviceTotalMem
    - clGetDeviceInfo
details:
    - "Properties are reported for each physical memory type supported by the device."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: uint32_t*
      name: pCount
      desc: |
            [in,out] pointer to the number of memory properties.
            if count is zero, then the driver will update the value with the total number of memory properties available.
            if count is non-zero, then driver will only retrieve that number of memory properties.
            if count is larger than the number of memory properties available, then the driver will update the value with the correct number of memory properties available.
    - type: "$x_device_memory_properties_t*"
      name: pMemProperties
      desc: "[in,out][optional][range(0, *pCount)] array of query results for memory properties"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_device_memory_access_properties_t"
class: $xDevice
name: $x_device_memory_access_properties_version_t
etors:
    - name: $X_DEVICE_MEMORY_ACCESS_PROPERTIES_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Memory access capabilities"
class: $xDevice
name: $x_memory_access_capabilities_t
details:
    - "Supported access capabilities for different types of memory allocations"
etors:
    - name: $X_MEMORY_ACCESS_NONE
      value: "0"
      desc: "Access not supported"
    - name: $X_MEMORY_ACCESS
      value: "$X_BIT( 0 )"
      desc: "Supports load/store access"
    - name: $X_MEMORY_ATOMIC_ACCESS
      value: "$X_BIT( 1 )"
      desc: "Supports atomic access"
    - name: $X_MEMORY_CONCURRENT_ACCESS
      value: "$X_BIT( 2 )"
      desc: "Supports concurrent access"
    - name: $X_MEMORY_CONCURRENT_ATOMIC_ACCESS
      value: "$X_BIT( 3 )"
      desc: "Supports concurrent atomic access"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device memory access properties queried using $xDeviceGetMemoryAccessProperties"
class: $xDevice
name: $x_device_memory_access_properties_t
members:
    - type: $x_device_memory_access_properties_version_t
      name: version
      desc: "[in] $X_DEVICE_MEMORY_ACCESS_PROPERTIES_VERSION_CURRENT"
      init: $X_DEVICE_MEMORY_ACCESS_PROPERTIES_VERSION_CURRENT
    - type: $x_memory_access_capabilities_t
      name: hostAllocCapabilities
      desc: "[out] Bitfield describing host memory capabilities"
    - type: $x_memory_access_capabilities_t
      name: deviceAllocCapabilities
      desc: "[out] Bitfield describing device memory capabilities"
    - type: $x_memory_access_capabilities_t
      name: sharedSingleDeviceAllocCapabilities
      desc: "[out] Bitfield describing shared (single-device) memory capabilities"
    - type: $x_memory_access_capabilities_t
      name: sharedCrossDeviceAllocCapabilities
      desc: "[out] Bitfield describing shared (cross-device) memory capabilities"
    - type: $x_memory_access_capabilities_t
      name: sharedSystemAllocCapabilities
      desc: "[out] Bitfield describing shared (system) memory capabilities"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves memory access properties of the device."
class: $xDevice
name: GetMemoryAccessProperties
ordinal: "1"
analogue:
    - "**cuDeviceGetAttribute**"
    - cuDeviceTotalMem
    - clGetDeviceInfo
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "$x_device_memory_access_properties_t*"
      name: pMemAccessProperties
      desc: "[in,out] query result for memory access properties"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_device_cache_properties_t"
class: $xDevice
name: $x_device_cache_properties_version_t
etors:
    - name: $X_DEVICE_CACHE_PROPERTIES_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device cache properties queried using $xDeviceGetCacheProperties"
class: $xDevice
name: $x_device_cache_properties_t
members:
    - type: $x_device_cache_properties_version_t
      name: version
      desc: "[in] $X_DEVICE_CACHE_PROPERTIES_VERSION_CURRENT"
      init: $X_DEVICE_CACHE_PROPERTIES_VERSION_CURRENT
    - type: $x_bool_t
      name: intermediateCacheControlSupported
      desc: "[out] Support User control on Intermediate Cache (i.e. Resize SLM section vs Generic Cache)"
    - type: size_t
      name: intermediateCacheSize
      desc: "[out] Per-cache Intermediate Cache (L1/L2) size, in bytes"
    - type: uint32_t
      name: intermediateCachelineSize
      desc: "[out] Cacheline size in bytes for intermediate cacheline (L1/L2)."
    - type: $x_bool_t
      name: lastLevelCacheSizeControlSupported
      desc: "[out] Support User control on Last Level Cache (i.e. Resize SLM section vs Generic Cache)."
    - type: size_t
      name: lastLevelCacheSize
      desc: "[out] Per-cache Last Level Cache (L3) size, in bytes"
    - type: uint32_t
      name: lastLevelCachelineSize
      desc: "[out] Cacheline size in bytes for last-level cacheline (L3)."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves cache properties of the device"
class: $xDevice
name: GetCacheProperties
ordinal: "1"
analogue:
    - "**cuDeviceGetAttribute**"
    - cuDeviceTotalMem
    - clGetDeviceInfo
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "$x_device_cache_properties_t*"
      name: pCacheProperties
      desc: "[in,out] query result for cache properties"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_device_image_properties_t"
class: $xDevice
name: $x_device_image_properties_version_t
etors:
    - name: $X_DEVICE_IMAGE_PROPERTIES_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device image properties queried using $xDeviceGetComputeProperties"
class: $xDevice
name: $x_device_image_properties_t
members:
    - type: $x_device_image_properties_version_t
      name: version
      desc: "[in] $X_DEVICE_IMAGE_PROPERTIES_VERSION_CURRENT"
      init: $X_DEVICE_IMAGE_PROPERTIES_VERSION_CURRENT
    - type: $x_bool_t
      name: supported
      desc: "[out] Supports reading and writing of images. See ::$xImageGetProperties for format-specific capabilities."
    - type: uint32_t
      name: maxImageDims1D
      desc: "[out] Maximum image dimensions for 1D resources."
    - type: uint32_t
      name: maxImageDims2D
      desc: "[out] Maximum image dimensions for 2D resources."
    - type: uint32_t
      name: maxImageDims3D
      desc: "[out] Maximum image dimensions for 3D resources."
    - type: uint64_t
      name: maxImageBufferSize
      desc: "[out] Maximum image buffer size in bytes."
    - type: uint32_t
      name: maxImageArraySlices
      desc: "[out] Maximum image array slices"
    - type: uint32_t
      name: maxSamplers
      desc: "[out] Max samplers that can be used in kernel."
    - type: uint32_t
      name: maxReadImageArgs
      desc: "[out] Returns the maximum number of simultaneous image objects that can be read from by a kernel."
    - type: uint32_t
      name: maxWriteImageArgs
      desc: "[out] Returns the maximum number of simultaneous image objects that can be written to by a kernel."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves image X_DEVICE_MEMORY_ACCESS_PROPERTIES_VERSION_CURRENT of the device"
class: $xDevice
name: GetImageProperties
ordinal: "1"
analogue:
    - "**cuDeviceGetAttribute**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "$x_device_image_properties_t*"
      name: pImageProperties
      desc: "[in,out] query result for image properties"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_device_p2p_properties_t"
class: $xDevice
name: $x_device_p2p_properties_version_t
etors:
    - name: $X_DEVICE_P2P_PROPERTIES_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device properties queried using $xDeviceGetP2PProperties"
class: $xDevice
name: $x_device_p2p_properties_t
members:
    - type: $x_device_p2p_properties_version_t
      name: version
      desc: "[in] $X_DEVICE_P2P_PROPERTIES_VERSION_CURRENT"
      init: $X_DEVICE_P2P_PROPERTIES_VERSION_CURRENT
    - type: $x_bool_t
      name: accessSupported
      desc: "[out] Supports access between peer devices."
    - type: $x_bool_t
      name: atomicsSupported
      desc: "[out] Supports atomics between peer devices."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves Peer-to-Peer properties between one device and a peer devices"
class: $xDevice
name: GetP2PProperties
ordinal: "1"
analogue:
    - "**cudaDeviceGetP2PAttribute**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device performing the access"
    - type: "$x_device_handle_t"
      name: hPeerDevice
      desc: "[in] handle of the peer device with the allocation"
    - type: "$x_device_p2p_properties_t*"
      name: pP2PProperties
      desc: "[in,out] Peer-to-Peer properties between source and peer device"
--- #--------------------------------------------------------------------------
type: function
desc: "Queries if one device can directly access peer device allocations"
class: $xDevice
name: CanAccessPeer
ordinal: "2"
analogue:
    - "**cudaDeviceCanAccessPeer**"
details:
    - "Any device can access any other device within a node through a scale-up fabric."
    - "The following are conditions for CanAccessPeer query.":
        - "If both device and peer device are the same then return true."
        - "If both sub-device and peer sub-device are the same then return true."
        - "If both are sub-devices and share the same parent device then return true."
        - "If both device and remote device are connected by a direct or indirect scale-up fabric or over PCIe (same root complex or shared PCIe switch) then true."
        - "If both sub-device and remote parent device (and vice-versa) are connected by a direct or indirect scale-up fabric or over PCIe (same root complex or shared PCIe switch) then true."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device performing the access"
    - type: "$x_device_handle_t"
      name: hPeerDevice
      desc: "[in] handle of the peer device with the allocation"
    - type: "$x_bool_t*"
      name: value
      desc: "[out] returned access capability"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported Cache Config"
class: $xDevice
name: $x_cache_config_t
details:
    - "Supported Cache Config (Default, Large SLM, Large Data Cache)"
etors:
    - name: $X_CACHE_CONFIG_DEFAULT
      value: "$X_BIT( 0 )"
      desc: "Default Config"
    - name: $X_CACHE_CONFIG_LARGE_SLM
      value: "$X_BIT( 1 )"
      desc: "Large SLM size"
    - name: $X_CACHE_CONFIG_LARGE_DATA
      value: "$X_BIT( 2 )"
      desc: "Large General Data size"
--- #--------------------------------------------------------------------------
type: function
desc: "Sets the preferred Last Level cache configuration for a device."
class: $xDevice
name: SetLastLevelCacheConfig
ordinal: "2"
details:
    - "The application may **not** call this function from simultaneous threads with the same device handle."
analogue:
    - "**cudaFuncSetCacheConfig **"
params:
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device "
    - type: "$x_cache_config_t"
      name: CacheConfig
      desc: "[in] CacheConfig"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for a device"
name: $xDevice
attribute: singleton
owner: $xDriver
members:
    - type: $x_device_handle_t
      name: handle
      desc: "[in] handle of device object"
    - type: $xDriver*
      name: pDriver
      desc: "[in] pointer to owner object"
