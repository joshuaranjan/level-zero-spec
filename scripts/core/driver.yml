#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs"
ordinal: "1"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported initialization flags"
class: $x
name: $x_init_flag_t
etors:
    - name: $X_INIT_FLAG_NONE
      value: "0"
      desc: "default behavior"
    - name: $X_INIT_FLAG_GPU_ONLY
      value: "$X_BIT(0)"
      desc: "only initialize GPU drivers"
--- #--------------------------------------------------------------------------
type: function
desc: "Initialize the $OneApi driver and must be called before any other API function"
class: $x
name: Init
decl: static
ordinal: "0"
details: 
    - "If this function is not called then all other functions will return $X_RESULT_ERROR_UNINITIALIZED."
    - "Only one instance of a driver per process will be initialized."
    - "This function is thread-safe for scenarios where multiple libraries may initialize the driver simultaneously."
params:
    - type: $x_init_flag_t
      name: flags
      desc: "[in] initialization flags"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves driver instances"
class: $xDriver
name: Get
decl: static
ordinal: "0"
analogue:
    - clGetPlatformIDs
details:
    - "A driver represents a collection of physical devices."
    - "The application may pass nullptr for pDrivers when only querying the number of drivers."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] pointer to the number of driver instances.
            if count is zero, then the loader will update the value with the total number of drivers available.
            if count is non-zero, then the loader will only retrieve that number of drivers.
            if count is larger than the number of drivers available, then the loader will update the value with the correct number of drivers available.
    - type: "$x_driver_handle_t*"
      name: phDrivers
      desc: "[in,out][optional][range(0, *pCount)] array of driver instance handles"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported API versions"
class: $xDriver
name: $x_api_version_t
details:
    - "API versions contain major and minor attributes, use $X_MAJOR_VERSION and $X_MINOR_VERSION"
etors:
    - name: $X_API_VERSION_0_91
      value: "$X_MAKE_VERSION( 0, 91 )"
      desc: "0.91"
--- #--------------------------------------------------------------------------
type: function
desc: "Returns the API version supported by the specified driver"
class: $xDriver
name: GetApiVersion
ordinal: "1"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "$x_api_version_t*"
      name: version
      desc: "[out] api version"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_driver_properties_t"
class: $xDriver
name: $x_driver_properties_version_t
etors:
    - name: $X_DRIVER_PROPERTIES_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 0, 91 )"
      desc: "version 0.91"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum driver universal unique id (UUID) size in bytes"
name: $X_MAX_DRIVER_UUID_SIZE
value: "16"
--- #--------------------------------------------------------------------------
type: struct
desc: "Driver universal unique id (UUID)"
name: "$x_driver_uuid_t"
members:
    - type: uint8_t
      name: "id[$X_MAX_DRIVER_UUID_SIZE]"
      desc: "Opaque data representing a driver UUID"
--- #--------------------------------------------------------------------------
type: struct
desc: "Driver properties queried using $xDriverGetProperties"
class: $xDriver
name: $x_driver_properties_t
members:
    - type: $x_driver_properties_version_t
      name: version
      desc: "[in] $X_DRIVER_PROPERTIES_VERSION_CURRENT"
      init: $X_DRIVER_PROPERTIES_VERSION_CURRENT
    - type: $x_driver_uuid_t
      name: uuid
      desc: "[out] universal unique identifier."
    - type: uint32_t
      name: driverVersion
      desc: |
        [out] driver version
        The driver version is a non-zero, monotonically increasing value where higher values always indicate a more recent version.
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves properties of the driver."
class: $xDriver
name: GetProperties
ordinal: "1"
analogue:
    - "**clGetPlatformInfo**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "$x_driver_properties_t*"
      name: pDriverProperties
      desc: "[in,out] query result for driver properties"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_driver_ipc_properties_t"
class: $xDriver
name: $x_driver_ipc_properties_version_t
etors:
    - name: $X_DRIVER_IPC_PROPERTIES_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 0, 91 )"
      desc: "version 0.91"
--- #--------------------------------------------------------------------------
type: struct
desc: "IPC properties queried using $xDriverGetIPCProperties"
class: $xDriver
name: $x_driver_ipc_properties_t
members:
    - type: $x_driver_ipc_properties_version_t
      name: version
      desc: "[in] $X_DRIVER_IPC_PROPERTIES_VERSION_CURRENT"
      init: $X_DRIVER_IPC_PROPERTIES_VERSION_CURRENT
    - type: $x_bool_t
      name: memsSupported
      desc: "[out] Supports passing memory allocations between processes. See ::$xDriverGetMemIpcHandle."
    - type: $x_bool_t
      name: eventsSupported
      desc: "[out] Supports passing events between processes. See ::$xEventPoolGetIpcHandle."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves IPC attributes of the driver"
class: $xDriver
name: GetIPCProperties
ordinal: "1"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "$x_driver_ipc_properties_t*"
      name: pIPCProperties
      desc: "[out] query result for IPC properties"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves an extension function for the specified driver"
class: $xDriver
name: GetExtensionFunctionAddress
ordinal: "1"
analogue:
    - "**clGetExtensionFunctionAddressForPlatform**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "const char*"
      name: pFuncName
      desc: "[in] name of the extension function"
    - type: "void**"
      name: pfunc
      desc: "[out] pointer to extension function"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for a driver instance handle"
name: $xDriver
attribute: singleton
members:
    - type: $x_driver_handle_t
      name: handle
      desc: "[in] handle of the driver instance"
