--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Driver APIs for Event"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_event_desc_t"
class: $xDevice
name: $x_event_desc_version_t
etors:
    - name: $X_EVENT_DESC_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported event creation flags"
class: $xDevice
name: $x_event_flag_t
etors:
    - name: $X_EVENT_FLAG_NONE
      value: "0"
      desc: "signals and waits only within the same device"
    - name: $X_EVENT_FLAG_HOST_TO_DEVICE
      value: "$X_BIT(0)"
      desc: "signals from host, waits on device"
    - name: $X_EVENT_FLAG_DEVICE_TO_HOST
      value: "$X_BIT(1)"
      desc: "signals from device, waits on host"
    - name: $X_EVENT_FLAG_DEVICE_TO_DEVICE
      value: "$X_BIT(2)"
      desc: "signals from device, waits on another device"
    - name: $X_EVENT_FLAG_IPC
      value: "$X_BIT(3)"
      desc: "signals and waits may occur across processes"
    - name: $X_EVENT_FLAG_TIMESTAMP
      value: "$X_BIT(4)"
      desc: "supports time-based queries"
    - name: $X_EVENT_FLAG_PERFORMANCE_METRICS
      value: "$X_BIT(5)"
      desc: "supports performance metrics (MDAPI)"
--- #--------------------------------------------------------------------------
type: struct
desc: "Event descriptor"
class: $xDevice
name: $x_event_desc_t
members:
    - type: $x_event_desc_version_t
      name: version
      desc: "[in] $X_EVENT_DESC_VERSION_CURRENT"
      init: $X_EVENT_DESC_VERSION_CURRENT
    - type: $x_event_flag_t
      name: flags
      desc: "[in] creation flags"
      init: $X_EVENT_FLAG_NONE
--- #--------------------------------------------------------------------------
type: function
desc: "Creates an event object on the device."
class: $xDevice
name: CreateEvent
analogue:
    - "**clCreateUserEvent**"
    - vkCreateEvent
    - cuEventCreate
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "const $x_event_desc_t*"
      name: desc
      desc: "[in] pointer to event descriptor"
    - type: "$x_event_handle_t*"
      name: phEvent
      desc: "[out] pointer to handle of event object created"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Creates an event object on the device from existing memory."
class: $xDevice
name: PlaceEvent
details:
    - "This function is intended for sharing fences with peer devices or across processes"
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "const $x_event_desc_t*"
      name: desc
      desc: "[in] pointer to event descriptor"
    - type: "void*"
      name: ptr
      desc: "[in] pointer to the device pointer where the event should be placed"
    - type: "$x_event_handle_t*"
      name: phEvent
      desc: "[out] pointer to handle of event object created"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Deletes an event object."
class: $xEvent
name: Destroy
details:
    - "The application is responsible for making sure the GPU is not currently referencing the event before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this event"
    - "The implementation of this function should be lock-free."
analogue:
     - "**clReleaseEvent**"
     - vkDestroyEvent
     - cuEventDestroy
params:
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of event object to destroy"
--- #--------------------------------------------------------------------------
type: function
desc: "Encodes a signal of the event from the device into a command list."
class: $xCommandList
name: EncodeSignalEvent
analogue:
    - "**clSetUserEventStatus**"
    - cuEventRecord
    - vkCmdSetEvent
details:
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
--- #--------------------------------------------------------------------------
type: function
desc: "Encodes a wait on event from a host signal into a command list."
class: $xCommandList
name: EncodeWaitOnEvent
details:
    - "The application may **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
--- #--------------------------------------------------------------------------
type: function
desc: "Signals a event from host."
class: $x
name: HostSignalEvent
analogue:
    - clSetUserEventStatus
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
--- #--------------------------------------------------------------------------
type: function
desc: "The current host thread waits on an event from a device signal."
class: $x
name: HostWaitOnEvent
analogue:
    - clWaitForEvents
    - cuEventSynchronize
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
    - type: uint32_t
      name: timeout
      desc: "[in] if non-zero, then indicates the maximum time to yield before returning $X_RESULT_SUCCESS or $X_RESULT_NOT_READY;
            if zero, then operates exactly like $xEventQueryStatus;
            if MAX_UINT32, then function will not return until complete or device is lost."
returns:
    - $X_RESULT_NOT_READY:
       - "timeout expired"
--- #--------------------------------------------------------------------------
type: function
desc: "Queries an event object's status."
class: $xEvent
name: QueryStatus
analogue:
    - "**clGetEventInfo**"
    - vkGetEventStatus
    - cuEventQuery
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
returns:
    - $X_RESULT_NOT_READY:
        - not signaled
--- #--------------------------------------------------------------------------
type: function
desc: "Queries the elapsed time between two device-signaled events."
class: $x
name: EventQueryElapsedTime
analogue:
    - "**cuEventElapsedTime**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_handle_t
      name: hEventStart
      desc: "[in] handle of the start event"
    - type: $x_event_handle_t
      name: hEventEnd
      desc: "[in] handle of the end event"
    - type: "double*"
      name: pTime
      desc: "[out] time in milliseconds"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "either event not signaled by device"
        - "either event not created with $X_EVENT_FLAG_TIMESTAMP"
--- #--------------------------------------------------------------------------
type: function
desc: "Queries performance metrics between two device-signaled events."
class: $x
name: EventQueryMetricsData
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_handle_t
      name: hEventStart
      desc: "[in] handle of the start event"
    - type: $x_event_handle_t
      name: hEventEnd
      desc: "[in] handle of the end event"
    - type: size_t
      name: reportSize
      desc: "[in] size of the report data buffer in bytes"
    - type: "uint32_t*"
      name: pReportData
      desc: "[out] report data buffer"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "either event not signaled by device"
        - "either event not created with $X_EVENT_FLAG_PERFORMANCE_METRICS"
        - "report size too small"
--- #--------------------------------------------------------------------------
type: function
desc: "Reset an event back to not signaled state"
class: $xCommandList
name: EncodeEventReset
analogue:
    - vkResetEvent
details:
    - "The application may **not** call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
--- #--------------------------------------------------------------------------
type: function
desc: "Reset an event back to not signaled state"
class: $xEvent
name: Reset
analogue:
    - vkResetEvent
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for event"
name: $xEvent
members:
    - type: $x_event_handle_t
      name: handle
      desc: "handle of event object"
    - type: $x_event_desc_t
      name: desc
      desc: "descriptor of the event object"
