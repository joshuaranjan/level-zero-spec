#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Fabric Edge"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum fabric edge model string size"
name: $X_MAX_FABRIC_EDGE_MODEL_SIZE
value: "256"
--- #--------------------------------------------------------------------------
type: enum
desc: "Fabric edge duplexity"
version: "1.4"
class: $xFabricEdge
name: $x_fabric_edge_duplexity_t
etors:
    - name: UNKNOWN
      desc: Fabric edge duplexity is unknown
    - name: HALF_DUPLEX
      desc: Fabric edge is half duplex, i.e. stated bandwidth is obtained in only one direction at time
    - name: FULL_DUPLEX
      desc: Fabric edge is full duplex, i.e. stated bandwidth is supported in both directions simultaneously
--- #--------------------------------------------------------------------------
type: struct
desc: "Fabric Edge properties"
class: $xFabricEdge
name: $x_fabric_edge_properties_t
base: $x_base_properties_t
members:
    - type: $x_uuid_t
      name: uuid
      desc: "[out] universal unique identifier."
    - type: char
      name: "model[$X_MAX_FABRIC_EDGE_MODEL_SIZE]"
      desc: "[out] Description of fabric edge technology. Will be set to the string \"unkown\" if this cannot be determined for this edge"
    - type: uint32_t
      name: "bandwith"
      desc: "[out] design bandwidth"
    - type: $x_bandwidth_unit_t
      name: "bandwidthUnit"
      desc: "[out] bandwith unit"
    - type: uint32_t
      name: "latency"
      desc: "[out] design latency"
    - type: $x_latency_unit_t
      name: "latencyUnit"
      desc: "[out] latency unit"
    - type: $x_fabric_edge_duplexity_t
      name: "duplexity"
      desc: "[out] Duplexity of the fabric edge"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves all fabric edges between provided pair of fabric vertices"
version: "1.4"
class: $xFabricEdge
name: Get
decl: static
ordinal: "0"
details:
    - "A fabric edge represents one or more physical links between two fabric vertices."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_fabric_vertex_handle_t
      name: hVertexA
      desc: "[in] handle of first fabric vertex instance"
    - type: $x_fabric_vertex_handle_t
      name: hVertexB
      desc: "[in] handle of second fabric vertex instance"
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] pointer to the number of fabric edges.
            if count is zero, then the driver shall update the value with the total number of fabric edges available.
            if count is greater than the number of fabric edges available, then the driver shall update the value with the correct number of fabric edges available.
    - type: "$x_fabric_edge_handle_t*"
      name: phEdges
      desc: |
            [in,out][optional][range(0, *pCount)] array of handle of fabric edges.
            if count is less than the number of fabric edges available, then driver shall only retrieve that number of fabric edges.
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves fabric vertices connected by a fabric edge"
version: "1.4"
class: $xFabricEdge
name: GetVertices
decl: static
ordinal: "0"
details:
    - "A fabric vertex represents either a device or a switch connected to other fabric vertices via a fabric edge."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_fabric_edge_handle_t
      name: hEdge
      desc: "[in] handle of the fabric edge instance"
    - type: "$x_fabric_vertex_handle_t*"
      name: phVertexA
      desc: "[out] fabric vertex connected to one end of the given fabric edge."
    - type: "$x_fabric_vertex_handle_t*"
      name: phVertexB
      desc: "[out] fabric vertex connected to other end of the given fabric edge."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves properties of the fabric edge."
version: "1.4"
class: $xFabricEdge
name: GetProperties
ordinal: "1"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_fabric_edge_handle_t
      name: hEdge
      desc: "[in] handle of the fabric edge"
    - type: "$x_fabric_edge_properties_t*"
      name: pEdgeProperties
      desc: "[in,out] query result for fabric edge properties"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for fabric edge"
name: $xFabricEdge
owner: $xDriver
members:
    - type: $x_fabric_edge_handle_t
      name: handle
      desc: "[in] handle of fabric edge object"
    - type: $xDriver*
      name: pDriver
      desc: "[in] pointer to owner object"
