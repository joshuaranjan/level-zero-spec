--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Driver APIs for Fence"
--- #--------------------------------------------------------------------------
type: macro
desc: "API version of $x_fence_desc_t"
name: $X_FENCE_DESC_VERSION
value: "$X_MAKE_VERSION( 1, 0 )"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported fence creation flags"
name: $x_fence_flags_t
etors:
    - name: $X_FENCE_FLAG_NONE
      value: "0"
      desc: "default behavior"
--- #--------------------------------------------------------------------------
type: struct
desc: "Fence descriptor"
name: $x_fence_desc_t
members:
    - type: uint32_t
      name: version
      desc: "[in] descriptor version"
    - type: $x_fence_flags_t
      name: flags
      desc: "[in] creation flags"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a fence object on the device's command queue."
name: $xCommandQueueCreateFence
analogue:
    - "**vkCreateFence**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_queue_handle_t
      name: hCommandQueue
      desc: "[in] handle of command queue"
    - type: "const $x_fence_desc_t*"
      name: desc
      desc: "[in] pointer to fence descriptor"
    - type: "$x_fence_handle_t*"
      name: phFence
      desc: "[out] pointer to handle of fence object created"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hCommandQueue"
        - "nullptr for desc"
        - "nullptr for phFence"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Deletes a fence object."
name: $xFenceDestroy
details:
    - "The application is responsible for making sure the GPU is not currently referencing the fence before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this fence"
    - "The implementation of this function should be lock-free."
analogue:
    - "**vkDestroyFence**"
params:
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in] handle of fence object to destroy"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFence"
        - "fence is enqueued in a command queue"
--- #--------------------------------------------------------------------------
type: function
desc: "The current host thread waits on a fence to be signaled."
name: $xHostWaitOnFence
analogue:
    - "**vkWaitForFences**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in] handle of the fence"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFence"
        - "fence is not enqueued in a command queue"
--- #--------------------------------------------------------------------------
type: function
desc: "The current host thread waits on a multiple fences to be signaled."
name: $xHostWaitOnMultipleFences
analogue:
    - "**vkWaitForFences**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: uint32_t
      name: numFences
      desc: "[in] number of fences in hFences"
    - type: "$x_fence_handle_t*"
      name: phFences
      desc: "[in] pointer to array of handles of the fences"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "nullptr for phFences"
        - "any invalid handle in phFences"
        - "any fence is not enqueued in a command queue"
--- #--------------------------------------------------------------------------
type: function
desc: "Queries a fence object's status."
name: $xFenceQueryStatus
analogue:
    - "**vkGetFenceStatus**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in] handle of the fence"
returns:
    - $X_RESULT_NOT_READY:
        - not signaled
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFence"
        - "fence is not enqueued in a command queue"
--- #--------------------------------------------------------------------------
type: function
desc: "Queries the elapsed time between two signaled fences."
name: $xFenceQueryElapsedTime
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_fence_handle_t
      name: hFenceStart
      desc: "[in] handle of the fence"
    - type: $x_fence_handle_t
      name: hFenceEnd
      desc: "[in] handle of the fence"
    - type: "double_t*"
      name: pTime
      desc: "[out] time in milliseconds"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFenceStart"
        - "invalid handle for hFenceEnd"
        - "either fence not enqueued"
        - "nullptr for pTime"
--- #--------------------------------------------------------------------------
type: function
desc: "Reset a fence back to the not signaled state."
name: $xFenceReset
analogue:
    -"**vkResetFences**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in] handle of the fence"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFence"
