#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Fence"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_fence_desc_t"
class: $xFence
name: $x_fence_desc_version_t
etors:
    - name: $X_FENCE_DESC_VERSION_1_0
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported fence creation flags"
class: $xFence
name: $x_fence_flag_t
etors:
    - name: $X_FENCE_FLAG_NONE
      value: "0"
      desc: "default behavior"
--- #--------------------------------------------------------------------------
type: struct
desc: "Fence descriptor"
class: $xFence
name: $x_fence_desc_t
members:
    - type: $x_fence_desc_version_t
      name: version
      desc: "[in] $X_FENCE_DESC_VERSION_CURRENT"
      init: $X_FENCE_DESC_VERSION_CURRENT
    - type: $x_fence_flag_t
      name: flags
      desc: "[in] creation flags"
      init: $X_FENCE_FLAG_NONE
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a fence object on the device's command queue."
class: $xFence
name: Create
decl: static
ordinal: "0"
analogue:
    - "**vkCreateFence**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_queue_handle_t
      name: hCommandQueue
      desc: "[in] handle of command queue"
    - type: "const $x_fence_desc_t*"
      name: desc
      desc: "[in] pointer to fence descriptor"
    - type: "$x_fence_handle_t*"
      name: phFence
      desc: "[out] pointer to handle of fence object created"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Deletes a fence object."
class: $xFence
name: Destroy
decl: static
ordinal: "0"
details:
    - "The application is responsible for making sure the device is not currently referencing the fence before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this fence"
    - "The application may **not** call this function from simultaneous threads with the same fence handle."
    - "The implementation of this function should be lock-free."
analogue:
    - "**vkDestroyFence**"
params:
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in][release] handle of fence object to destroy"
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: function
desc: "The current host thread waits on a fence to be signaled."
class: $xFence
name: HostSynchronize
analogue:
    - "**vkWaitForFences**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in] handle of the fence"
    - type: uint32_t
      name: timeout
      desc: |
            [in] if non-zero, then indicates the maximum time (in nanoseconds) to yield before returning $X_RESULT_SUCCESS or $X_RESULT_NOT_READY;
            if zero, then operates exactly like $xFenceQueryStatus;
            if UINT32_MAX, then function will not return until complete or device is lost.
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_NOT_READY:
       - "timeout expired"
--- #--------------------------------------------------------------------------
type: function
desc: "Queries a fence object's status."
class: $xFence
name: QueryStatus
analogue:
    - "**vkGetFenceStatus**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in] handle of the fence"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_NOT_READY:
        - not signaled
--- #--------------------------------------------------------------------------
type: function
desc: "Reset a fence back to the not signaled state."
class: $xFence
name: Reset
analogue:
    - "**vkResetFences**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in] handle of the fence"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for fence"
name: $xFence
owner: $xCommandQueue
members:
    - type: $x_fence_handle_t
      name: handle
      desc: "[in] handle of fence object"
    - type: $xCommandQueue*
      name: pCommandQueue
      desc: "[in] pointer to owner object"
    - type: $x_fence_desc_t
      name: desc
      desc: "[in] descriptor of the fence object"
