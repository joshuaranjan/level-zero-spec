--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Driver APIs for Images"
--- #--------------------------------------------------------------------------
type: macro
desc: "API version of $x_image_desc_t"
name: $X_IMAGE_DESC_VERSION
value: "$X_MAKE_VERSION( 1, 0 )"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported image creation flags"
name: $x_image_flags_t
etors:
    - name: $X_IMAGE_FLAG_PROGRAM_READ
      value: "$X_BIT( 0 )"
      desc: "programs will read contents"
    - name: $X_IMAGE_FLAG_PROGRAM_WRITE
      value: "$X_BIT( 1 )"
      desc: "programs will write contents"
    - name: $X_IMAGE_FLAG_BIAS_CACHED
      value: "$X_BIT( 2 )"
      desc: "device should cache contents"
    - name: $X_IMAGE_FLAG_BIAS_UNCACHED
      value: "$X_BIT( 3 )"
      desc: "device should not cache contents"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported image types"
name: $x_image_type_t
etors:
    - name: $X_IMAGE_TYPE_1D
      desc: "1D"
    - name: $X_IMAGE_TYPE_1DARRAY
      desc: "1D array"
    - name: $X_IMAGE_TYPE_2D
      desc: "2D"
    - name: $X_IMAGE_TYPE_2DARRAY
      desc: "2D array"
    - name: $X_IMAGE_TYPE_3D
      desc: "3D"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported image formats"
name: $x_image_format_t
etors:
    - name: $X_IMAGE_FORMAT_UINT8
      desc: "8-bit unsigned integer"
    - name: $X_IMAGE_FORMAT_UINT16
      desc: "16-bit unsigned integer"
    - name: $X_IMAGE_FORMAT_UINT32
      desc: "32-bit unsigned integer"
    - name: $X_IMAGE_FORMAT_SINT8
      desc: "8-bit signed integer"
    - name: $X_IMAGE_FORMAT_SINT16
      desc: "16-bit signed integer"
    - name: $X_IMAGE_FORMAT_SINT32
      desc: "32-bit signed integer"
    - name: $X_IMAGE_FORMAT_FLOAT16
      desc: "16-bit float"
    - name: $X_IMAGE_FORMAT_FLOAT32
      desc: "32-bit float"
--- #--------------------------------------------------------------------------
type: struct
desc: "Image descriptor"
name: $x_image_desc_t
members:
    - type: uint32_t
      name: version
      desc: "[in] $X_IMAGE_DESC_VERSION"
    - type: $x_image_flags_t
      name: flags
      desc: "[in] creation flags"
    - type: $x_image_type_t
      name: type
      desc: "[in] image type"
    - type: $x_image_format_t
      name: format
      desc: "[in] image channel format"
    - type: uint32_t
      name: numChannels
      desc: "[in] number of channels per pixel [1,4]"
    - type: size_t
      name: width
      desc: "[in] width in pixels, see $x_device_memory_properties_t::maxImageDims1D/2D/3D"
    - type: size_t
      name: height
      desc: "[in] height in pixels (2D or 3D only), see $x_device_memory_properties_t::maxImageDims2D/3D"
    - type: size_t
      name: depth
      desc: "[in] depth in pixels (3D only), see $x_device_memory_properties_t::maxImageDims3D"
    - type: size_t
      name: arraylevels
      desc: "[in] array levels (array types only), see $x_device_memory_properties_t::maxImageArraySlices"
    - type: size_t
      name: miplevels
      desc: "[in] mipmap levels (must be 0)"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a image object on the device."
class: $xDevice
name: CreateImage
analogue:
    - clCreateImage
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "const $x_image_desc_t*"
      name: desc
      desc: "[in] pointer to image descriptor"
    - type: "$x_image_handle_t*"
      name: phImage
      desc: "[out] pointer to handle of image object created"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "nullptr for desc"
        - "nullptr for phImage"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Deletes a image object."
class: $xImage
name: Destroy
details:
    - "The application is responsible for making sure the GPU is not currently referencing the image before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this image"
    - "The implementation of this function should be lock-free."
params:
    - type: $x_image_handle_t
      name: hImage
      desc: "[in] handle of image object to destroy"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hImage"
