--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Images"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_image_desc_t"
class: $xImage
name: $x_image_desc_version_t
etors:
    - name: $X_IMAGE_DESC_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported image creation flags"
class: $xImage
name: $x_image_flag_t
etors:
    - name: $X_IMAGE_FLAG_PROGRAM_READ
      value: "$X_BIT( 0 )"
      desc: "programs will read contents"
    - name: $X_IMAGE_FLAG_PROGRAM_WRITE
      value: "$X_BIT( 1 )"
      desc: "programs will write contents"
    - name: $X_IMAGE_FLAG_BIAS_CACHED
      value: "$X_BIT( 2 )"
      desc: "device should cache contents"
    - name: $X_IMAGE_FLAG_BIAS_UNCACHED
      value: "$X_BIT( 3 )"
      desc: "device should not cache contents"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported image types"
class: $xImage
name: $x_image_type_t
etors:
    - name: $X_IMAGE_TYPE_1D
      desc: "1D"
    - name: $X_IMAGE_TYPE_1DARRAY
      desc: "1D array"
    - name: $X_IMAGE_TYPE_2D
      desc: "2D"
    - name: $X_IMAGE_TYPE_2DARRAY
      desc: "2D array"
    - name: $X_IMAGE_TYPE_3D
      desc: "3D"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported image format layouts"
class: $xImage
name: $x_image_format_layout_t
etors:
    - name: $X_IMAGE_FORMAT_LAYOUT_8
      desc: "8-bit single component layout"
    - name: $X_IMAGE_FORMAT_LAYOUT_16
      desc: "16-bit single component layout"
    - name: $X_IMAGE_FORMAT_LAYOUT_32
      desc: "32-bit single component layout"
    - name: $X_IMAGE_FORMAT_LAYOUT_8_8
      desc: "2-component 8-bit layout"
    - name: $X_IMAGE_FORMAT_LAYOUT_8_8_8_8
      desc: "4-component 8-bit layout"
    - name: $X_IMAGE_FORMAT_LAYOUT_16_16
      desc: "2-component 16-bit layout"
    - name: $X_IMAGE_FORMAT_LAYOUT_16_16_16_16
      desc: "4-component 16-bit layout"
    - name: $X_IMAGE_FORMAT_LAYOUT_32_32
      desc: "2-component 32-bit layout"
    - name: $X_IMAGE_FORMAT_LAYOUT_32_32_32_32
      desc: "4-component 32-bit layout"
    - name: $X_IMAGE_FORMAT_LAYOUT_10_10_10_2
      desc: "4-component 10_10_10_2 layout"
    - name: $X_IMAGE_FORMAT_LAYOUT_11_11_10
      desc: "3-component 11_11_10 layout"
    - name: $X_IMAGE_FORMAT_LAYOUT_5_6_5
      desc: "3-component 5_6_5 layout"
    - name: $X_IMAGE_FORMAT_LAYOUT_5_5_5_1
      desc: "4-component 5_5_5_1 layout"
    - name: $X_IMAGE_FORMAT_LAYOUT_4_4_4_4
      desc: "4-component 4_4_4_4 layout"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported image format types"
class: $xImage
name: $x_image_format_type_t
etors:
    - name: $X_IMAGE_FORMAT_TYPE_UINT
      desc: "Unsigned integer"
    - name: $X_IMAGE_FORMAT_TYPE_SINT
      desc: "Signed integer"
    - name: $X_IMAGE_FORMAT_TYPE_UNORM
      desc: "Unsigned normalized integer"
    - name: $X_IMAGE_FORMAT_TYPE_SNORM
      desc: "Signed normalized integer"
    - name: $X_IMAGE_FORMAT_TYPE_FLOAT
      desc: "Float"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported image format component swizzle into channel"
class: $xImage
name: $x_image_format_swizzle_t
etors:
    - name: $X_IMAGE_FORMAT_SWIZ_R
      desc: "Red component"
    - name: $X_IMAGE_FORMAT_SWIZ_G
      desc: "Green component"
    - name: $X_IMAGE_FORMAT_SWIZ_B
      desc: "Blue component"
    - name: $X_IMAGE_FORMAT_SWIZ_A
      desc: "Alpha component"
    - name: $X_IMAGE_FORMAT_SWIZ_0
      desc: "Zero"
    - name: $X_IMAGE_FORMAT_SWIZ_1
      desc: "One"
    - name: $X_IMAGE_FORMAT_SWIZ_X
      desc: "Don't care"
--- #--------------------------------------------------------------------------
type: struct
desc: "Image format descriptor"
class: $xImage
name: $x_image_format_desc_t
members:
    - type: $x_image_format_layout_t
      name: layout
      desc: "[in] image format component layout"
    - type: $x_image_format_type_t
      name: type
      desc: "[in] image format type"
    - type: $x_image_format_swizzle_t
      name: x
      desc: "[in] image component swizzle into channel x"
    - type: $x_image_format_swizzle_t
      name: y
      desc: "[in] image component swizzle into channel y"
    - type: $x_image_format_swizzle_t
      name: z
      desc: "[in] image component swizzle into channel z"
    - type: $x_image_format_swizzle_t
      name: w
      desc: "[in] image component swizzle into channel w"
--- #--------------------------------------------------------------------------
type: struct
desc: "Image descriptor"
class: $xImage
name: $x_image_desc_t
members:
    - type: $x_image_desc_version_t
      name: version
      desc: "[in] $X_IMAGE_DESC_VERSION_CURRENT"
      init: $X_IMAGE_DESC_VERSION_CURRENT
    - type: $x_image_flag_t
      name: flags
      desc: "[in] creation flags"
    - type: $x_image_type_t
      name: type
      desc: "[in] image type"
    - type: $x_image_format_desc_t
      name: format
      desc: "[in] image format"
    - type: size_t
      name: width
      desc: "[in] width in pixels, see $x_device_memory_properties_t::maxImageDims1D/2D/3D"
      init: "0"
    - type: size_t
      name: height
      desc: "[in] height in pixels (2D or 3D only), see $x_device_memory_properties_t::maxImageDims2D/3D"
      init: "0"
    - type: size_t
      name: depth
      desc: "[in] depth in pixels (3D only), see $x_device_memory_properties_t::maxImageDims3D"
      init: "0"
    - type: size_t
      name: arraylevels
      desc: "[in] array levels (array types only), see $x_device_memory_properties_t::maxImageArraySlices"
      init: "1"
    - type: size_t
      name: miplevels
      desc: "[in] mipmap levels (must be 0)"
      init: "0"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_image_properties_t"
class: $xImage
name: $x_image_properties_version_t
etors:
    - name: $X_IMAGE_PROPERTIES_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported sampler filtering flags"
class: $xImage
name: $x_image_sampler_filter_flags_t
etors:
    - name: $X_IMAGE_SAMPLER_FILTER_FLAGS_LINEAR
      value: "$X_BIT(0)"
      desc: "device supports linear filtering"
--- #--------------------------------------------------------------------------
type: struct
desc: "Image properties"
class: $xImage
name: $x_image_properties_t
members:
    - type: $x_image_properties_version_t
      name: version
      desc: "[in] $X_IMAGE_PROPERTIES_VERSION_CURRENT"
      init: $X_IMAGE_PROPERTIES_VERSION_CURRENT
    - type: $x_image_sampler_filter_flags_t
      name: samplerFilterFlags
      desc: "[out] supported sampler filtering"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves supported properties of an image."
class: $xImage
name: GetProperties
decl: static
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "const $x_image_desc_t*"
      name: desc
      desc: "[in] pointer to image descriptor"
    - type: "$x_image_properties_t*"
      name: pImageProperties
      desc: "[out] pointer to image properties"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a image object on the device."
class: $xImage
name: Create
decl: static
analogue:
    - clCreateImage
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "const $x_image_desc_t*"
      name: desc
      desc: "[in] pointer to image descriptor"
    - type: "$x_image_handle_t*"
      name: phImage
      desc: "[out] pointer to handle of image object created"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Deletes a image object."
class: $xImage
name: Destroy
decl: static
details:
    - "The application is responsible for making sure the GPU is not currently referencing the image before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this image"
    - "The implementation of this function should be lock-free."
params:
    - type: $x_image_handle_t
      name: hImage
      desc: "[in] handle of image object to destroy"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for image"
name: $xImage
members:
    - type: $x_image_handle_t
      name: handle
      desc: "handle of image object"
    - type: $x_image_desc_t
      name: desc
      desc: "descriptor of the image object"
