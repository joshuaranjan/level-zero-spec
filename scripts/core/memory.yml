#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Memory"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported memory allocation flags"
class: $xContext
name: $x_device_mem_alloc_flags_t
etors:
    - name: BIAS_CACHED
      desc: "device should cache allocation"
    - name: BIAS_UNCACHED
      desc: "device should not cache allocation (UC)"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device memory allocation descriptor"
class: $xContext
name: $x_device_mem_alloc_desc_t
base: $x_base_desc_t
members:
    - type: "$x_device_mem_alloc_flags_t"
      name: flags
      desc: |
            [in] flags specifying additional allocation controls.
            must be 0 (default) or a valid combination of $x_device_mem_alloc_flag_t;
            default behavior may use implicit driver-based heuristics.
      init: "0"
    - type: uint32_t
      name: ordinal
      desc: |
            [in] ordinal of the device's local memory to allocate from.
            must be less than the count returned from $xDeviceGetMemoryProperties.
      init: "0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported host memory allocation flags"
class: $xContext
name: $x_host_mem_alloc_flags_t
etors:
    - name: BIAS_CACHED
      desc: "host should cache allocation"
    - name: BIAS_UNCACHED
      desc: "host should not cache allocation (UC)"
    - name: BIAS_WRITE_COMBINED
      desc: "host memory should be allocated write-combined (WC)"
--- #--------------------------------------------------------------------------
type: struct
desc: "Host memory allocation descriptor"
class: $xContext
name: $x_host_mem_alloc_desc_t
base: $x_base_desc_t
members:
    - type: "$x_host_mem_alloc_flags_t"
      name: flags
      desc: |
            [in] flags specifying additional allocation controls.
            must be 0 (default) or a valid combination of $x_host_mem_alloc_flag_t;
            default behavior may use implicit driver-based heuristics.
      init: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates shared memory on the context."
class: $xContext
name: AllocSharedMem
details:
    - "Shared allocations share ownership between the host and one or more devices."
    - "Shared allocations may optionally be associated with a device by passing a handle to the device."
    - |
      Devices supporting only single-device shared access capabilities may access shared memory associated with the device.
      For these devices, ownership of the allocation is shared between the host and the associated device only.
    - |
      Passing nullptr as the device handle does not associate the shared allocation with any device.
      For allocations with no associated device, ownership of the allocation is shared between the host and all devices supporting cross-device shared access capabilities.
    - "The application must only use the memory allocation for the context and device, or its sub-devices, which was provided during allocation."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const $x_device_mem_alloc_desc_t*"
      name: device_desc
      desc: "[in] pointer to device memory allocation descriptor"
    - type: "const $x_host_mem_alloc_desc_t*"
      name: host_desc
      desc: "[in] pointer to host memory allocation descriptor"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate; must be less-than $x_device_properties_t.maxMemAllocSize."
    - type: size_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation; must be a power of two."
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in][optional] device handle to associate with"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to shared allocation"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT:
        - "Must be zero or a power-of-two"
        - "`0 != (alignment & (alignment - 1))`"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates device memory on the context."
class: $xContext
name: AllocDeviceMem
details:
    - "Device allocations are owned by a specific device."
    - "In general, a device allocation may only be accessed by the device that owns it."
    - "The application must only use the memory allocation for the context and device, or its sub-devices, which was provided during allocation."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const $x_device_mem_alloc_desc_t*"
      name: device_desc
      desc: "[in] pointer to device memory allocation descriptor"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate; must be less-than $x_device_properties_t.maxMemAllocSize."
    - type: size_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation; must be a power of two."
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to device allocation"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT:
        - "Must be zero or a power-of-two"
        - "`0 != (alignment & (alignment - 1))`"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates host memory on the context."
class: $xContext
name: AllocHostMem
details:
    - "Host allocations are owned by the host process."
    - "Host allocations are accessible by the host and all devices within the driver's context."
    - "Host allocations are frequently used as staging areas to transfer data to or from devices."
    - "The application must only use the memory allocation for the context which was provided during allocation."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const $x_host_mem_alloc_desc_t*"
      name: host_desc
      desc: "[in] pointer to host memory allocation descriptor"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate; must be less-than $x_device_properties_t.maxMemAllocSize."
    - type: size_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation; must be a power of two."
    - type: "void**"
      name: pptr
      desc: "[out] pointer to host allocation"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT:
        - "Must be zero or a power-of-two"
        - "`0 != (alignment & (alignment - 1))`"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Frees allocated host memory, device memory, or shared memory on the context."
class: $xContext
name: FreeMem
details:
    - "The application must ensure the device is not currently referencing the memory before it is freed"
    - "The implementation of this function may immediately free all Host and Device allocations associated with this memory"
    - "The application must **not** call this function from simultaneous threads with the same pointer."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "void*"
      name: ptr
      desc: "[in][release] pointer to memory to free"
--- #--------------------------------------------------------------------------
type: enum
desc: "Memory allocation type"
class: $xContext
name: $x_memory_type_t
etors:
    - name: UNKNOWN
      value: "0"
      desc: "the memory pointed to is of unknown type"
    - name: HOST
      desc: "the memory pointed to is a host allocation"
    - name: DEVICE
      desc: "the memory pointed to is a device allocation"
    - name: SHARED
      desc: "the memory pointed to is a shared ownership allocation"
--- #--------------------------------------------------------------------------
type: struct
desc: "Memory allocation properties queried using $xContextGetMemAllocProperties"
class: $xContext
name: $x_memory_allocation_properties_t
base: $x_base_properties_t
members:
    - type: $x_memory_type_t
      name: type
      desc: "[out] type of allocated memory"
    - type: uint64_t
      name: id
      desc: "[out] identifier for this allocation"
    - type: uint64_t
      name: pageSize
      desc: "[out] page size used for allocation"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves attributes of a memory allocation"
class: $xContext
name: GetMemAllocProperties
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: ptr
      desc: "[in] memory pointer to query"
    - type: "$x_memory_allocation_properties_t*"
      name: pMemAllocProperties
      desc: "[in,out] query result for memory allocation properties"
    - type: "$x_device_handle_t*"
      name: phDevice
      desc: "[out][optional] device associated with this allocation"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves the base address and/or size of an allocation"
class: $xContext
name: GetMemAddressRange
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: ptr
      desc: "[in] memory pointer to query"
    - type: "void**"
      name: pBase
      desc: "[in,out][optional] base address of the allocation"
    - type: size_t*
      name: pSize
      desc: "[in,out][optional] size of the allocation"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates an IPC memory handle for the specified allocation"
class: $xContext
name: GetMemIpcHandle
details:
    - "Takes a pointer to a device memory allocation and creates an IPC memory handle for exporting it for use in another process."
    - "The pointer must be base pointer of the device memory allocation; i.e. the value returned from $xContextAllocDeviceMem."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to the device memory allocation"
    - type: $x_ipc_mem_handle_t*
      name: pIpcHandle
      desc: "[out] Returned IPC memory handle"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported IPC memory flags"
class: $xContext
name: $x_ipc_memory_flags_t
etors:
    - name: TBD
      desc: "reserved for future use"
--- #--------------------------------------------------------------------------
type: function
desc: "Opens an IPC memory handle to retrieve a device pointer on the context."
class: $xContext
name: OpenMemIpcHandle
details:
    - "Takes an IPC memory handle from a remote process and associates it with a device pointer usable in this process."
    - "The device pointer in this process should not be freed with $xContextFreeMem, but rather with $xContextCloseMemIpcHandle."
    - "Multiple calls to this function with the same IPC handle will return unique pointers."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device to associate with the IPC memory handle"
    - type: $x_ipc_mem_handle_t
      name: handle
      desc: "[in] IPC memory handle"
    - type: $x_ipc_memory_flags_t
      name: flags
      desc: |
            [in] flags controlling the operation.
            must be 0 (default) or a valid combination of $x_ipc_memory_flag_t.
      init: "0"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to device allocation in this process"
--- #--------------------------------------------------------------------------
type: function
desc: "Closes an IPC memory handle"
class: $xContext
name: CloseMemIpcHandle
details:
    - "Closes an IPC memory handle by unmapping memory that was opened in this process using $xContextOpenMemIpcHandle."
    - "The application must **not** call this function from simultaneous threads with the same pointer."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: ptr
      desc: "[in][release] pointer to device allocation in this process"
--- #--------------------------------------------------------------------------
type: enum
desc: "Virtual memory page access attributes"
class: $xContext
name: $x_memory_access_attribute_t
etors:
    - name: NONE
      value: "0"
      desc: "Indicates the memory page is inaccessible."
    - name: READWRITE
      desc: "Indicates the memory page supports read write access."
    - name: READONLY
      desc: "Indicates the memory page supports read-only access."
--- #--------------------------------------------------------------------------
type: function
desc: "Reserves pages in virtual address space."
class: $xContext
name: VirtualReserve
details:
    - "The application must only use the memory allocation on the context for which it was created."
    - "The starting address and size must be at least aligned to ${x}_device_properties_t.minMemPageSize."
    - "If pStart is not null then implementation will attempt to reserve starting from that address. If not available then will find another suitable starting address."
    - "The application can query and use preferred page size using ${x}DeviceQueryPreferredPageSize."
    - "The application may call this function from simultaneous threads."
    - "The access attributes will default to none to indicate reservation is inaccessible."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: pStart
      desc: "[in] pointer to start of region to reserve. If nullptr then implementation will choose a start address."
    - type: size_t
      name: size
      desc: "[in] size in bytes to reserve; must be page aligned."
    - type: "void**"
      name: pptr
      desc: "[out] pointer to virtual reservation."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Free pages in a reserved virtual address range."
class: $xContext
name: VirtualFree
details:
    - "Any existing virtual mappings for the range will be unmapped."
    - "Physical allocations objects that were mapped to this range will not be destroyed. These need to be destroyed explicitly."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to start of region to free."
    - type: size_t
      name: size
      desc: "[in] size in bytes to free; must be page aligned."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT
--- #--------------------------------------------------------------------------
type: function
desc: "Queries page size to use for aligning virtual memory reservations and physical memory allocations."
class: $xContext
name: VirtualQueryPageSize
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: size_t
      name: size
      desc: "[in] unaligned allocation size in bytes"
    - type: "size_t*"
      name: pagesize
      desc: "[out] pointer to preferred page size."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a physical memory object on the device."
class: $xContext
name: PhysicalCreate
details:
    - "The application must only use the physical memory object on the context for which it was created."
    - "The size must be at least aligned to ${x}_device_properties_t.minMemPageSize."
    - "The application can query and use preferred page size using ${x}DeviceQueryPreferredPageSize."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: size_t
      name: size
      desc: "[in] size in bytes to reserve; must be page aligned."
    - type: "$x_physical_memory_handle_t*"
      name: phPhysicalMemory
      desc: "[out] pointer to handle of physical memory object created"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a physical memory object."
class: $xContext
name: PhysicalDestroy
ordinal: "0"
details:
    - "The application must ensure the device is not currently referencing the physical memory object before it is deleted"
    - "The application must **not** call this function from simultaneous threads with the same physical memory handle."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: $x_physical_memory_handle_t
      name: hPhysicalMemory
      desc: "[in][release] handle of physical memory object to destroy"
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: function
desc: "Maps pages in virtual address space to pages from physical memory object."
class: $xContext
name: VirtualMap
details:
    - "The virtual address range must have been reserved using $xContextVirtualReserve."
    - "The application must only use the mapped memory allocation on the context for which it was created."
    - "The virtual start address and size must be at least aligned to ${x}_device_properties_t.minMemPageSize."
    - "The application should use, for the starting address and size, the same size alignment used for the physical allocation."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to start of virtual address range to map."
    - type: size_t
      name: size
      desc: "[in] size in bytes of virtual address range to map; must be page aligned."
    - type: $x_physical_memory_handle_t
      name: hPhysicalMemory
      desc: "[in] handle to physical memory object."
    - type: size_t
      name: offset
      desc: "[in] offset into physical memory allocation object; must be page aligned."
    - type: $x_memory_access_attribute_t
      name: access
      desc: "[in] specifies page access attributes to apply to the virtual address range."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT
--- #--------------------------------------------------------------------------
type: function
desc: "Unmaps pages in virtual address space from pages from a physical memory object."
class: $xContext
name: VirtualUnmap
details:
    - "The page access attributes for virtual address range will revert back to none."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to start of region to unmap."
    - type: size_t
      name: size
      desc: "[in] size in bytes to unmap; must be page aligned."
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT
        - "Address must be page aligned"
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
        - "Size must be page aligned"
--- #--------------------------------------------------------------------------
type: function
desc: "Set memory access attributes for a virtual address range."
class: $xContext
name: SetMemAccessAttribute
details:
    - "This function may be called from simultaneous threads with the same function handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to start of region to unmap."
    - type: size_t
      name: size
      desc: "[in] size in bytes; must be page aligned."
    - type: $x_memory_access_attribute_t
      name: access
      desc: "[in] specifies page access attributes to apply to the virtual address range."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT
        - "Address must be page aligned"
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
        - "Size must be page aligned"
--- #--------------------------------------------------------------------------
type: function
desc: "Get memory access attribute for a virtual address range."
class: $xContext
name: GetMemAccessAttribute
details:
    - "If size and outSize are equal then the pages in the specified virtual address range have the same access attributes."
    - "This function may be called from simultaneous threads with the same function handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to start of virtual address region for query."
    - type: size_t
      name: size
      desc: "[in] size in bytes; must be page aligned."
    - type: $x_memory_access_attribute_t*
      name: access
      desc: "[out] query result for page access attribute."
    - type: size_t*
      name: outSize
      desc: "[out] query result for size of virtual address range, starting at ptr, that shares same access attribute."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT
        - "Address must be page aligned"
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
        - "Size must be page aligned"