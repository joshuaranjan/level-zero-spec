--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Driver APIs for Memory"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported device memory allocation flags"
name: $x_device_mem_alloc_flags_t
etors:
    - name: $X_DEVICE_MEM_ALLOC_FLAG_DEFAULT
      value: "0"
      desc: "implicit default behavior; uses driver-based heuristics"
    - name: $X_DEVICE_MEM_ALLOC_FLAG_BIAS_CACHED
      value: "$X_BIT( 0 )"
      desc: "device should cache allocation"
    - name: $X_DEVICE_MEM_ALLOC_FLAG_BIAS_UNCACHED
      value: "$X_BIT( 1 )"
      desc: "device should not cache allocation (UC)"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported host memory allocation flags"
name: $x_host_mem_alloc_flags_t
etors:
    - name: $X_HOST_MEM_ALLOC_FLAG_DEFAULT
      value: "0"
      desc: "implicit default behavior; uses driver-based heuristics"
    - name: $X_HOST_MEM_ALLOC_FLAG_BIAS_CACHED
      value: "$X_BIT( 0 )"
      desc: "host should cache allocation"
    - name: $X_HOST_MEM_ALLOC_FLAG_BIAS_UNCACHED
      value: "$X_BIT( 1 )"
      desc: "host should not cache allocation (UC)"
    - name: $X_HOST_MEM_ALLOC_FLAG_BIAS_WRITE_COMBINED
      value: "$X_BIT( 2 )"
      desc: "host memory should be allocated write-combined (WC)"
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates memory that is shared between the host and one or more devices"
class: $x
name: SharedMemAlloc
analogue:
    - "**cudaMallocManaged**"
details:
    - "Shared allocations share ownership between the host and one or more devices."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: "$x_device_mem_alloc_flags_t"
      name: device_flags
      desc: "[in] flags specifying additional device allocation controls"
    - type: "$x_host_mem_alloc_flags_t"
      name: host_flags
      desc: "[in] flags specifying additional host allocation controls"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: uint32_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "void**"
      name: ptr
      desc: "[out] pointer to shared allocation"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "unsupported allocation size"
        - "nullptr for ptr"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates memory specific to a device"
class: $x
name: MemAlloc
analogue:
    - "**cudaMalloc**"
details:
    - "A device allocation is owned by a specific device."
    - "In general, a device allocation may only be accessed by the device that owns it."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: "$x_device_mem_alloc_flags_t"
      name: flags
      desc: "[in] flags specifying additional allocation controls"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: uint32_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "void**"
      name: ptr
      desc: "[out] pointer to device allocation"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "unsupported allocation size"
        - "nullptr for ptr"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates host memory"
class: $x
name: HostMemAlloc
analogue:
    - "**cudaHostAlloc**"
details:
    - "A host allocation is owned by the host process."
    - "Host allocations are accessible by the host and all devices."
    - "Host allocations are frequently used a staging areas to transfer data to or from devices."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_host_mem_alloc_flags_t"
      name: flags
      desc: "[in] flags specifying additional allocation controls"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: uint32_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "void**"
      name: ptr
      desc: "[out] pointer to host allocation"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "unsupported allocation size"
        - "nullptr for ptr"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Frees allocated host memory, device memory, or shared memory"
class: $x
name: MemFree
analogue:
    - "**cudaFree**"
    - "**cudaFreeHost**"
details:
    - "The application is responsible for making sure the GPU is not currently referencing the memory before it is freed"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this memory"
    - "The implementation of this function should be lock-free."
params:
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to memory to free"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid pointer"
--- #--------------------------------------------------------------------------
type: enum
desc: "Memory allocation type"
name: $x_memory_type_t
etors:
    - name: $X_MEMORY_TYPE_UNKNOWN
      value: "0"
      desc: "the memory pointed to was not allocated by $Xx"
    - name: $X_MEMORY_TYPE_HOST
      desc: "the memory pointed to is a host allocation"
    - name: $X_MEMORY_TYPE_DEVICE
      desc: "the memory pointed to is a device allocation"
    - name: $X_MEMORY_TYPE_SHARED
      desc: "the memory pointed to is a shared ownership allocation"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported memory allocation query properties"
name: $x_memory_property_t
etors:
    - name: $X_MEMORY_TYPE
      value: "0"
      desc: "see $x_memory_type_t"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves a property of an allocation"
class: $x
name: MemGetProperty
analogue:
    - "**cudaPointerGetAttributes**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "const void*"
      name: ptr
      desc: "[in] Pointer to query"
    - type: $x_memory_property_t
      name: property
      desc: "[in] Property of the allocation to query"
    - type: "uint32_t*"
      name: value
      desc: "[out] Value of the queried property"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid pointer"
        - "invalid property"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates an IPC memory handle for the specified allocation in the sending process"
class: $x
name: IpcGetMemHandle
analogue:
    - "**cuIpcGetMemHandle**"
details:
    - "Takes a pointer to the base of a device memory allocation and exports it for use in another process."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "const void*"
      name: ptr
      desc: "[in] Pointer to the device memory allocation"
    - type: $x_ipc_mem_handle_t*
      name: pIpcHandle
      desc: "[out] Returned IPC memory handle"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid pointer"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported IPC memory flags"
name: $x_ipc_memory_flags_t
etors:
    - name: $X_IPC_MEMORY_FLAGS_NONE
      value: "0"
      desc: "No special flags"
--- #--------------------------------------------------------------------------
type: function
desc: "Opens an IPC memory handle to retrieve a device pointer in a receiving process"
class: $x
name: IpcOpenMemHandle
analogue:
    - "**cuIpcOpenMemHandle**"
details:
    - "Takes an IPC memory handle from a sending process and associates it with a device pointer usable in this process."
    - "The device pointer in this process should not be freed with $xMemFree, but rather with $xIpcCloseMemHandle."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device to associate with the IPC memory handle"
    - type: $x_ipc_mem_handle_t
      name: handle
      desc: "[in] IPC memory handle"
    - type: $x_ipc_memory_flags_t
      name: flags
      desc: "[in] flags controlling the operation"
    - type: "void**"
      name: ptr
      desc: "[out] pointer to device allocation in this process"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "invalid handle for handle"
        - "invalid flags"
        - "nullptr for ptr"
--- #--------------------------------------------------------------------------
type: function
desc: "Closes an IPC memory handle in a receiving process"
class: $x
name: IpcCloseMemHandle
analogue:
    - "**cuIpcCloseMemHandle**"
details:
    - "Closes an IPC memory handle by unmapping memory that was opened in this process using $xIpcOpenMemHandle."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device to associate with the IPC memory handle"
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to memory to free"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "invalid ptr"
