--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Driver APIs for Memory"
--- #--------------------------------------------------------------------------
type: macro
desc: "@todo Ben: need a kernel property to indicate indirect shared memory access"
name: "$X_KERNEL_PROPERTY_INDIRECT_SHARED_ACCESS"
value: "0"
--- #--------------------------------------------------------------------------
type: macro
desc: "@todo Ben: possible kernel property to indicate indirect device memory access?"
name: "$X_KERNEL_PROPERTY_INDIRECT_DEVICE_ACCESS"
value: "0"
--- #--------------------------------------------------------------------------
type: macro
desc: "@todo Ben: possible kernel property to indicate indirect host memory access?"
name: "$X_KERNEL_PROPERTY_INDIRECT_HOST_ACCESS"
value: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates memory that is shared between the host and one or more devices"
name: $xSharedMemAlloc
details:
    - "Shared allocations share ownership between the host and one or more devices."
    - "@todo Ben: comprehend multi-tile?"
analogue:
    - "**cudaMallocManaged**"
params:
    - type: "const $x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: uint32_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "void**"
      name: ptr
      desc: "[out] pointer to shared allocation"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "unsupported allocation size"
        - "nullptr for ptr"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates memory specific to a device"
name: $xMemAlloc
details:
    - "A device allocation is owned by a specific device.
      In general, a device allocation may only be accessed by the device that owns it."
analogue:
    - "**cudaMalloc**"
params:
    - type: "const $x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: uint32_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "void**"
      name: ptr
      desc: "[out] pointer to device allocation"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "unsupported allocation size"
        - "nullptr for ptr"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported host allocation flags"
name: $x_host_mem_alloc_flags_t
etors:
    - name: $X_HOST_MEM_ALLOC_DEFAULT
      value: "0"
      desc: "implicit default behavior; uses driver-based heuristics"
    - name: $X_HOST_MEM_ALLOC_WRITE_COMBINED
      value: "$X_BIT( 0 )"
      desc: "allocate the host memory as write-combined (WC)"
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates host memory"
name: $xHostMemAlloc
details:
    - "A host allocation is owned by the host process.
      Host allocations are accessible by the host and all devices.
      Host allocations are frequently used a staging areas to transfer data to or from devices."
analogue:
    - "**cudaHostAlloc**"
params:
    - type: "$x_host_mem_alloc_flags_t"
      name: flags
      desc: "[in] flags controlling specifying additional allocation controls"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: uint32_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "void**"
      name: ptr
      desc: "[out] pointer to host allocation"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "unsupported allocation size"
        - "nullptr for ptr"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Frees allocated host memory, device memory, or shared memory"
name: $xMemFree
details:
    - "@todo Ben: Should the pointer passed to the $xMemFree function be const or non-const?"
analogue:
    - "**cudaFree**"
    - "**cudaFreeHost**"
params:
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to memory to free"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid pointer"
--- #--------------------------------------------------------------------------
type: enum
desc: "Memory allocation type"
name: $x_memory_type_t
etors:
    - name: $X_MEMORY_TYPE_UNKNOWN
      value: "0"
      desc: "the memory pointed to was not allocated by $Xx"
    - name: $X_MEMORY_TYPE_HOST
      desc: "the memory pointed to is a host allocation"
    - name: $X_MEMORY_TYPE_DEVICE
      desc: "the memory pointed to is a device allocation"
    - name: $X_MEMORY_TYPE_SHARED
      desc: "the memory pointed to is a shared ownership allocation"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported memory allocation query properties"
name: $x_memory_property_t
etors:
    - name: $X_MEMORY_TYPE
      value: "0"
      desc: "see $x_memory_type_t"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves a property of an allocation"
name: $xMemGetProperty
details:
    - "@todo Ben: do we need to support additional properties: base addr, size, etc? 
       @todo Ben: do we need to support querying the associated device? 
       @todo Ben: should we return all attributes as a (versioned) struct instead?"
analogue:
    - "**cudaPointerGetAttributes**"
params:
    - type: "const void*"
      name: ptr
      desc: "[in] Pointer to query"
    - type: $x_memory_property_t
      name: property
      desc: "[in] Property of the allocation to query"
    - type: "uint32_t*"
      name: value
      desc: "[out] Value of the queried property"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid pointer"
        - "invalid property"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported memory advice hints"
name: $x_memory_advice_t
etors:
    - name: $X_MEMORY_ADVICE_TBD
      value: "0"
      desc: "@todo Ben: which memory advice hints could/should we support?"
--- #--------------------------------------------------------------------------
type: function
desc: "Provides advice about the use of a shared memory range"
name: $xMemAdvise
details:
    - "Memory advice can be used to override driver heuristics to explicitly control shared memory behavior."
    - "@todo Ben: likely will snap to page boundaries"
analogue:
    - "**cudaMemAdvise**"
params:
    - type: "const $x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device to apply the advice to"
    - type: "const void*"
      name: ptr
      desc: "[in] Pointer to the start of the memory range"
    - type: size_t
      name: size
      desc: "[in] Size in bytes of the memory range"
    - type: $x_memory_advice_t
      name: advice
      desc: "[in] Memory advice for the memory range"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "invalid pointer"
        - "invalid advice"
