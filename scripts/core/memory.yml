#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Memory"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported memory allocation flags"
class: $xDriver
name: $x_device_mem_alloc_flags_t
etors:
    - name: BIAS_CACHED
      desc: "device should cache allocation"
    - name: BIAS_UNCACHED
      desc: "device should not cache allocation (UC)"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device mem alloc descriptor"
class: $xDriver
name: $x_device_mem_alloc_desc_t
base: $x_base_desc_t
members:
    - type: "$x_device_mem_alloc_flags_t"
      name: flags
      desc: |
            [in] flags specifying additional allocation controls.
            must be 0 (default) or a valid combination of $x_device_mem_alloc_flag_t;
            default behavior may use implicit driver-based heuristics.
      init: "0"
    - type: uint32_t
      name: ordinal
      desc: |
            [in] ordinal of the device's local memory to allocate from.
            must be less than the count returned from $xDeviceGetMemoryProperties.
      init: "0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported host memory allocation flags"
class: $xDriver
name: $x_host_mem_alloc_flags_t
etors:
    - name: BIAS_CACHED
      desc: "host should cache allocation"
    - name: BIAS_UNCACHED
      desc: "host should not cache allocation (UC)"
    - name: BIAS_WRITE_COMBINED
      desc: "host memory should be allocated write-combined (WC)"
--- #--------------------------------------------------------------------------
type: struct
desc: "Host mem alloc descriptor"
class: $xDriver
name: $x_host_mem_alloc_desc_t
base: $x_base_desc_t
members:
    - type: "$x_host_mem_alloc_flags_t"
      name: flags
      desc: |
            [in] flags specifying additional allocation controls.
            must be 0 (default) or a valid combination of $x_host_mem_alloc_flag_t;
            default behavior may use implicit driver-based heuristics.
      init: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates memory that is shared between the host and one or more devices"
class: $xDriver
name: AllocSharedMem
details:
    - "Shared allocations share ownership between the host and one or more devices."
    - "Shared allocations may optionally be associated with a device by passing a handle to the device."
    - |
      Devices supporting only single-device shared access capabilities may access shared memory associated with the device.
      For these devices, ownership of the allocation is shared between the host and the associated device only.
    - |
      Passing nullptr as the device handle does not associate the shared allocation with any device.
      For allocations with no associated device, ownership of the allocation is shared between the host and all devices supporting cross-device shared access capabilities.
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "const $x_device_mem_alloc_desc_t*"
      name: device_desc
      desc: "[in] pointer to device mem alloc descriptor"
    - type: "const $x_host_mem_alloc_desc_t*"
      name: host_desc
      desc: "[in] pointer to host mem alloc descriptor"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: size_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in][optional] device handle to associate with"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to shared allocation"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT:
        - "Must be zero or a power-of-two"
        - "`0 != (alignment & (alignment - 1))`"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates memory specific to a device"
class: $xDriver
name: AllocDeviceMem
details:
    - "A device allocation is owned by a specific device."
    - "In general, a device allocation may only be accessed by the device that owns it."
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "const $x_device_mem_alloc_desc_t*"
      name: device_desc
      desc: "[in] pointer to device mem alloc descriptor"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: size_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to device allocation"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT:
        - "Must be zero or a power-of-two"
        - "`0 != (alignment & (alignment - 1))`"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates host memory"
class: $xDriver
name: AllocHostMem
details:
    - "A host allocation is owned by the host process."
    - "Host allocations are accessible by the host and all devices within the driver driver."
    - "Host allocations are frequently used as staging areas to transfer data to or from devices."
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "const $x_host_mem_alloc_desc_t*"
      name: host_desc
      desc: "[in] pointer to host mem alloc descriptor"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: size_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to host allocation"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT:
        - "Must be zero or a power-of-two"
        - "`0 != (alignment & (alignment - 1))`"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Frees allocated host memory, device memory, or shared memory"
class: $xDriver
name: FreeMem
details:
    - "The application must ensure the device is not currently referencing the memory before it is freed"
    - "The implementation of this function may immediately free all Host and Device allocations associated with this memory"
    - "The application must **not** call this function from simultaneous threads with the same pointer."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "void*"
      name: ptr
      desc: "[in][release] pointer to memory to free"
--- #--------------------------------------------------------------------------
type: enum
desc: "Memory allocation type"
class: $xDriver
name: $x_memory_type_t
etors:
    - name: UNKNOWN
      value: "0"
      desc: "the memory pointed to is of unknown type"
    - name: HOST
      desc: "the memory pointed to is a host allocation"
    - name: DEVICE
      desc: "the memory pointed to is a device allocation"
    - name: SHARED
      desc: "the memory pointed to is a shared ownership allocation"
--- #--------------------------------------------------------------------------
type: struct
desc: "Memory allocation properties queried using $xDriverGetMemAllocProperties"
class: $xDriver
name: $x_memory_allocation_properties_t
base: $x_base_properties_t
members:
    - type: $x_memory_type_t
      name: type
      desc: "[out] type of allocated memory"
    - type: uint64_t
      name: id
      desc: "[out] identifier for this allocation"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves attributes of a memory allocation"
class: $xDriver
name: GetMemAllocProperties
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "const void*"
      name: ptr
      desc: "[in] memory pointer to query"
    - type: "$x_memory_allocation_properties_t*"
      name: pMemAllocProperties
      desc: "[in,out] query result for memory allocation properties"
    - type: "$x_device_handle_t*"
      name: phDevice
      desc: "[out][optional] device associated with this allocation"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves the base address and/or size of an allocation"
class: $xDriver
name: GetMemAddressRange
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "const void*"
      name: ptr
      desc: "[in] memory pointer to query"
    - type: "void**"
      name: pBase
      desc: "[in,out][optional] base address of the allocation"
    - type: size_t*
      name: pSize
      desc: "[in,out][optional] size of the allocation"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates an IPC memory handle for the specified allocation"
class: $xDriver
name: GetMemIpcHandle
details:
    - "Takes a pointer to the base of a device memory allocation and exports it for use in another process."
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to the device memory allocation"
    - type: $x_ipc_mem_handle_t*
      name: pIpcHandle
      desc: "[out] Returned IPC memory handle"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported IPC memory flags"
class: $xDriver
name: $x_ipc_memory_flags_t
etors:
    - name: TBD
      desc: "reserved for future use"
--- #--------------------------------------------------------------------------
type: function
desc: "Opens an IPC memory handle to retrieve a device pointer"
class: $xDriver
name: OpenMemIpcHandle
details:
    - "Takes an IPC memory handle from a remote process and associates it with a device pointer usable in this process."
    - "The device pointer in this process should not be freed with $xDriverFreeMem, but rather with $xDriverCloseMemIpcHandle."
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device to associate with the IPC memory handle"
    - type: $x_ipc_mem_handle_t
      name: handle
      desc: "[in] IPC memory handle"
    - type: $x_ipc_memory_flags_t
      name: flags
      desc: |
            [in] flags controlling the operation.
            must be 0 (default) or a valid combination of $x_ipc_memory_flag_t.
      init: "0"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to device allocation in this process"
--- #--------------------------------------------------------------------------
type: function
desc: "Closes an IPC memory handle"
class: $xDriver
name: CloseMemIpcHandle
details:
    - "Closes an IPC memory handle by unmapping memory that was opened in this process using $xDriverOpenMemIpcHandle."
    - "The application must **not** call this function from simultaneous threads with the same pointer."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "const void*"
      name: ptr
      desc: "[in][release] pointer to device allocation in this process"
