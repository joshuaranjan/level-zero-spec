#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Memory"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported device memory allocation flags"
class: $xDeviceGroup
name: $x_device_mem_alloc_flag_t
etors:
    - name: $X_DEVICE_MEM_ALLOC_FLAG_DEFAULT
      value: "0"
      desc: "implicit default behavior; uses driver-based heuristics"
    - name: $X_DEVICE_MEM_ALLOC_FLAG_BIAS_CACHED
      value: "$X_BIT( 0 )"
      desc: "device should cache allocation"
    - name: $X_DEVICE_MEM_ALLOC_FLAG_BIAS_UNCACHED
      value: "$X_BIT( 1 )"
      desc: "device should not cache allocation (UC)"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported host memory allocation flags"
class: $xDeviceGroup
name: $x_host_mem_alloc_flag_t
etors:
    - name: $X_HOST_MEM_ALLOC_FLAG_DEFAULT
      value: "0"
      desc: "implicit default behavior; uses driver-based heuristics"
    - name: $X_HOST_MEM_ALLOC_FLAG_BIAS_CACHED
      value: "$X_BIT( 0 )"
      desc: "host should cache allocation"
    - name: $X_HOST_MEM_ALLOC_FLAG_BIAS_UNCACHED
      value: "$X_BIT( 1 )"
      desc: "host should not cache allocation (UC)"
    - name: $X_HOST_MEM_ALLOC_FLAG_BIAS_WRITE_COMBINED
      value: "$X_BIT( 2 )"
      desc: "host memory should be allocated write-combined (WC)"
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates memory that is shared between the host and one or more devices"
class: $xDeviceGroup
name: AllocSharedMem
analogue:
    - "**cudaMallocManaged**"
details:
    - "Shared allocations share ownership between the host and one or more devices."
    - "By default, shared allocations are visible to all devices in the device group."
    - "A shared allocation can be restricted to be only visible to the host and a single device by specifying a single device handle."
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_device_group_handle_t
      name: hDeviceGroup
      desc: "[in] handle of the device group object"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of a device"
    - type: "$x_device_mem_alloc_flag_t"
      name: device_flags
      desc: "[in] flags specifying additional device allocation controls"
    - type: uint32_t
      name: ordinal
      desc: |
            [in] ordinal of the device's local memory to allocate from;
            must be less than the count returned from $xDeviceGroupGetMemoryProperties
    - type: "$x_host_mem_alloc_flag_t"
      name: host_flags
      desc: "[in] flags specifying additional host allocation controls"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: size_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to shared allocation"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "unsupported allocation size"
        - "unsupported alignment"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates memory specific to a device"
class: $xDeviceGroup
name: AllocDeviceMem
analogue:
    - "**cudaMalloc**"
details:
    - "A device allocation is owned by a specific device."
    - "In general, a device allocation may only be accessed by the device that owns it."
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_device_group_handle_t
      name: hDeviceGroup
      desc: "[in] handle of the device group object"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: "$x_device_mem_alloc_flag_t"
      name: flags
      desc: "[in] flags specifying additional allocation controls"
    - type: uint32_t
      name: ordinal
      desc: |
            [in] ordinal of the device's local memory to allocate from;
            must be less than the count returned from $xDeviceGroupGetMemoryProperties
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: size_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to device allocation"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "unsupported allocation size"
        - "unsupported alignment"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates host memory"
class: $xDeviceGroup
name: AllocHostMem
analogue:
    - "**cudaHostAlloc**"
details:
    - "A host allocation is owned by the host process."
    - "Host allocations are accessible by the host and all devices within the device group."
    - "Host allocations are frequently used as staging areas to transfer data to or from devices."
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_device_group_handle_t
      name: hDeviceGroup
      desc: "[in] handle of the device group object"
    - type: "$x_host_mem_alloc_flag_t"
      name: flags
      desc: "[in] flags specifying additional allocation controls"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: size_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to host allocation"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "unsupported allocation size"
        - "unsupported alignment"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Frees allocated host memory, device memory, or shared memory"
class: $xDeviceGroup
name: FreeMem
analogue:
    - "**cudaFree**"
    - "**cudaFreeHost**"
details:
    - "The application is responsible for making sure the device is not currently referencing the memory before it is freed"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this memory"
    - "The application may **not** call this function from simultaneous threads with the same pointer."
params:
    - type: $x_device_group_handle_t
      name: hDeviceGroup
      desc: "[in] handle of the device group object"
    - type: "void*"
      name: ptr
      desc: "[in][release] pointer to memory to free"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of $x_memory_allocation_properties_t"
class: $xDeviceGroup
name: $x_memory_allocation_properties_version_t
etors:
    - name: $X_MEMORY_ALLOCATION_PROPERTIES_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Memory allocation type"
class: $xDeviceGroup
name: $x_memory_type_t
etors:
    - name: $X_MEMORY_TYPE_UNKNOWN
      value: "0"
      desc: "the memory pointed to is of unknown type"
    - name: $X_MEMORY_TYPE_HOST
      desc: "the memory pointed to is a host allocation"
    - name: $X_MEMORY_TYPE_DEVICE
      desc: "the memory pointed to is a device allocation"
    - name: $X_MEMORY_TYPE_SHARED
      desc: "the memory pointed to is a shared ownership allocation"
--- #--------------------------------------------------------------------------
type: struct
desc: "Memory allocation properties queried using $xDeviceGroupGetMemProperties"
class: $xDeviceGroup
name: $x_memory_allocation_properties_t
members:
    - type: $x_memory_allocation_properties_version_t
      name: version
      desc: "[in] $X_MEMORY_ALLOCATION_PROPERTIES_VERSION_CURRENT"
      init: "$X_MEMORY_ALLOCATION_PROPERTIES_VERSION_CURRENT"
    - type: $x_memory_type_t
      name: type
      desc: "[out] type of allocated memory"
    - type: uint64_t
      name: id
      desc: "[out] identifier for this allocation"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves attributes of a memory allocation"
class: $xDeviceGroup
name: GetMemProperties
analogue:
    - "**cuPointerGetAttribute**"
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_device_group_handle_t
      name: hDeviceGroup
      desc: "[in] handle of the device group object"
    - type: "const void*"
      name: ptr
      desc: "[in] memory pointer to query"
    - type: "$x_memory_allocation_properties_t*"
      name: pMemProperties
      desc: "[out] query result for memory allocation properties"
    - type: "$x_device_handle_t*"
      name: phDevice
      desc: "[out][optional] device associated with this allocation"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves the base address and/or size of an allocation"
class: $xDeviceGroup
name: GetMemAddressRange
analogue:
    - "**cuMemGetAddressRange**"
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_device_group_handle_t
      name: hDeviceGroup
      desc: "[in] handle of the device group object"
    - type: "const void*"
      name: ptr
      desc: "[in] memory pointer to query"
    - type: "void**"
      name: pBase
      desc: "[in,out][optional] base address of the allocation"
    - type: size_t*
      name: pSize
      desc: "[in,out][optional] size of the allocation"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates an IPC memory handle for the specified allocation in the sending process"
class: $xDeviceGroup
name: GetMemIpcHandle
analogue:
    - "**cuIpcGetMemHandle**"
details:
    - "Takes a pointer to the base of a device memory allocation and exports it for use in another process."
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_device_group_handle_t
      name: hDeviceGroup
      desc: "[in] handle of the device group object"
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to the device memory allocation"
    - type: $x_ipc_mem_handle_t*
      name: pIpcHandle
      desc: "[out] Returned IPC memory handle"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported IPC memory flags"
class: $xDeviceGroup
name: $x_ipc_memory_flag_t
etors:
    - name: $X_IPC_MEMORY_FLAG_NONE
      value: "0"
      desc: "No special flags"
--- #--------------------------------------------------------------------------
type: function
desc: "Opens an IPC memory handle to retrieve a device pointer in a receiving process"
class: $xDeviceGroup
name: OpenMemIpcHandle
analogue:
    - "**cuIpcOpenMemHandle**"
details:
    - "Takes an IPC memory handle from a sending process and associates it with a device pointer usable in this process."
    - "The device pointer in this process should not be freed with $xDeviceGroupFreeMem, but rather with $xDeviceGroupCloseMemIpcHandle."
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_device_group_handle_t
      name: hDeviceGroup
      desc: "[in] handle of the device group object"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device to associate with the IPC memory handle"
    - type: $x_ipc_mem_handle_t
      name: handle
      desc: "[in] IPC memory handle"
    - type: $x_ipc_memory_flag_t
      name: flags
      desc: "[in] flags controlling the operation"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to device allocation in this process"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid flags"
--- #--------------------------------------------------------------------------
type: function
desc: "Closes an IPC memory handle in a receiving process"
class: $xDeviceGroup
name: CloseMemIpcHandle
analogue:
    - "**cuIpcCloseMemHandle**"
details:
    - "Closes an IPC memory handle by unmapping memory that was opened in this process using $xDeviceGroupOpenMemIpcHandle."
    - "The application may **not** call this function from simultaneous threads with the same pointer."
params:
    - type: $x_device_group_handle_t
      name: hDeviceGroup
      desc: "[in] handle of the device group object"
    - type: "const void*"
      name: ptr
      desc: "[in][release] pointer to device allocation in this process"
