--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Driver APIs for Module"
--- #--------------------------------------------------------------------------
type: enum
desc: API version of $x_module_desc_t
class: $xDevice
name: $x_module_desc_version_t
etors:
    - name: $X_MODULE_DESC_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported module creation input formats"
class: $xDevice
name: $x_module_format_t
etors:
    - name: $X_MODULE_FORMAT_IL_SPIRV
      value: "0"
      desc: "Format is SPIRV IL format"
    - name: $X_MODULE_FORMAT_NATIVE
      desc: "Format is device native format"
--- #--------------------------------------------------------------------------
type: struct
desc: "Module descriptor"
class: $xDevice
name: $x_module_desc_t
members:
    - type: $x_module_desc_version_t
      name: version
      desc: "[in] $X_MODULE_DESC_VERSION_CURRENT"
      init: $X_MODULE_DESC_VERSION_CURRENT
    - type: "$x_module_format_t"
      name: format
      desc: "[in] Module format passed in with pInputModule"
    - type: "size_t"
      name: inputSize
      desc: "[in] size of input IL or ISA from pInputModule."
      init: "0"
    - type: "const char*"
      name: pInputModule
      desc: "[in] pointer to IL or ISA"
      init: nullptr
    - type: "const char*"
      name: pBuildFlags
      desc: "[in] string containing compiler flags. See documentation for build flags."
      init: nullptr
--- #--------------------------------------------------------------------------
type: function
desc: "Creates module object from an input IL or native binary."
class: $xDevice
name: CreateModule
analogue:
    - "**cuModuleLoad**"
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "This function will create and compile the module object."
    - "A build log can optionally be returned to the caller. Caller is responsible for destroying build log using $xModuleBuildLogDestroy"
    - "Device memory will be allocated for module during creation."
    - "A module can be created directly from native binary format."
    - "A native binary object can be retrieved from a module using $xModuleGetNativeBinary. This can be cached to disk and to create new modules."
    - "The following build options are supported:":
        - "\"-$x-opt-disable\" - Disable optimizations"
        - "\"-$x-opt-greater-than-4GB-buffer-required\" - Use 64-bit offset calculations for buffers."
        - "\"-$x-opt-large-register-file\" - Increase number of registers available to threads."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "const $x_module_desc_t*"
      name: pDesc
      desc: "[in] pointer to module descriptor"
    - type: "$x_module_handle_t*"
      name: phModule
      desc: "[out] pointer to handle of module object created"
    - type: "$x_module_build_log_handle_t*"
      name: phBuildLog
      desc: "[out][optional] pointer to handle of module's build log."
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid pDesc->format"
        - "nullptr == pDesc->pInputModule"
        - "nullptr == pDesc->phModule"
        - "0 == pDesc->inputSize"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
    - $X_RESULT_ERROR_MODULE_BUILD_FAILURE:
        - "Failure to build module. See build log for more details."
    
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys module"
class: $xModule
name: Destroy
analogue:
    - "**cuModuleUnload**"
details:
    - "The application is responsible for making sure the GPU is not currently referencing the event before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this module"
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_module_handle_t"
      name: hModule
      desc: "[in] handle of the module"
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys module build log object"
class: $x
name: ModuleBuildLogDestroy
details:
    - "The application is responsible for making sure the GPU is not currently referencing the event before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this object"
    - "The implementation of this function should be lock-free."
    - "This function can be called before or after $xModuleDestroy for the associated module."
params:
    - type: "$x_module_build_log_handle_t"
      name: hModuleBuildLog
      desc: "[in] handle of the module build log object."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves text string for build log."
class: $x
name: ModuleBuildLogGetString
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_module_build_log_handle_t
      name: hModuleBuildLog
      desc: "[in] handle of the module build log object."
    - type: "uint32_t*"
      name: pSize
      desc: "[out] size of build log string."
    - type: "char**"
      name: pBuildLog
      desc: "[out] pointer to null-terminated string of the log."
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieve native binary from Module."
class: $xModule
name: GetNativeBinary
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "The memory for the native binary output is associated with the module. The output pointer should not be accessed after a module has been destroyed."
    - "The native binary output can be cached to disk and new modules can be later constructed from the cached copy."
    - "The native binary will retain debugging information that is associated with a module."
params:
    - type: $x_module_handle_t
      name: hModule
      desc: "[in] handle of the device"
    - type: "uint32_t*"
      name: pSize
      desc: "[out] size of native binary."
    - type: "char**"
      name: pModuleNativeBinary
      desc: "[out] pointer to native binary"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid format"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: enum
desc: API version of $x_function_desc_t
class: $xModule
name: $x_function_desc_version_t
etors:
    - name: $X_FUNCTION_DESC_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported function creation flags"
class: $xModule
name: $x_function_flag_t
etors:
    - name: $X_FUNCTION_FLAG_NONE
      value: "0"
      desc: "default driver behavior"
    - name: $X_FUNCTION_FLAG_FORCE_RESIDENCY
      desc: "force all device allocations to be resident during execution"
--- #--------------------------------------------------------------------------
type: struct
desc: "Function descriptor"
class: $xModule
name: $x_function_desc_t
members:
    - type: $x_function_desc_version_t
      name: version
      desc: "[in] $X_FUNCTION_DESC_VERSION_CURRENT"
      init: $X_FUNCTION_DESC_VERSION_CURRENT
    - type: "$x_function_flag_t"
      name: flags
      desc: "[in] creation flags"
      init: $X_FUNCTION_FLAG_NONE
    - type: "const char*"
      name: pFunctionName
      desc: "[in] null-terminated name of function in Module"
      init: nullptr
--- #--------------------------------------------------------------------------
type: function
desc: "Create Function object from Module by name"
class: $xModule
name: CreateFunction
analogue:
    - "**cuModuleGetFunction**"
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "Function objects should be destroyed before the Module is destroyed."
params:
    - type: "$x_module_handle_t"
      name: hModule
      desc: "[in] handle of the module"
    - type: "const $x_function_desc_t*"
      name: pDesc
      desc: "[in] pointer to function descriptor"
    - type: "$x_function_handle_t*"
      name:  phFunction
      desc: "[out] handle of the Function object"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "nullptr == pDesc->pFunctionName"
        - "invalid value for pDesc->pFunctionName"
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys Function object"
class: $xFunction
name: Destroy
details:
    - "The application is responsible for making sure the GPU is not currently referencing the event before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this function"
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"  
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieve function pointer from Module by name"
class: $xModule
name: GetFunctionPointer
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "Function pointer is no longer valid if Module is destroyed."
params:
    - type: "$x_module_handle_t"
      name: hModule
      desc: "[in] handle of the module"
    - type: "const char*"
      name: pFunctionName
      desc: "[in] Name of function to retrieve function pointer for."
    - type: "void**"
      name:  pfnFunction
      desc: "[out] pointer to function."
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid value pFunctionName. Function name must exist in Module."
--- #--------------------------------------------------------------------------
type: function
desc: "Set group size for Function."
class: $xFunction
name: SetGroupSize
details:
    - "The implementation of this function will immediately free all Host and Device allocations associated with this function"
    - "The implementation of this function should be lock-free."
    - "This can be called multiple times. The driver copies the group size information when encoding dispatch functions into a command list."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object" 
    - type: "uint32_t"
      name: groupSizeX
      desc: "[in] group size for X dimension to use for this function."
    - type: "uint32_t"
      name: groupSizeY
      desc: "[in] group size for Y dimension to use for this function."
    - type: "uint32_t"
      name: groupSizeZ
      desc: "[in] group size for Z dimension to use for this function."
--- #--------------------------------------------------------------------------
type: function
desc: "Query a suggested group size for function given a global size for each dimension."
class: $xFunction
name: SuggestGroupSize
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "This function ignores the group size that is set using $xFunctionSetGroupSize."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object" 
    - type: "uint32_t"
      name: globalSizeX
      desc: "[in] global width for X dimension."
    - type: "uint32_t"
      name: globalSizeY
      desc: "[in] global width for Y dimension."
    - type: "uint32_t"
      name: globalSizeZ
      desc: "[in] global width for Z dimension."
    - type: "uint32_t*"
      name: groupSizeX
      desc: "[out] recommended size of group for X dimension."
    - type: "uint32_t*"
      name: groupSizeY
      desc: "[out] recommended size of group for Y dimension."
    - type: "uint32_t*"
      name: groupSizeZ
      desc: "[out] recommended size of group for Z dimension."
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid number of threads."
--- #--------------------------------------------------------------------------
type: function
desc: "Set function argument used for function dispatch."
class: $xFunction
name: SetArgumentValue
details:
    - "This function may **not** be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in/out] handle of the function args object."
    - type: "uint32_t"
      name: argIndex
      desc: "[in] argument index in range [0, num args - 1]"
    - type: "size_t"
      name: argSize
      desc: "[in] size of argument type"
    - type: "const void*"
      name: pArgValue
      desc: "[in] argument value represented as matching arg type"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid argument index"
        - "invalid size specified"
--- #--------------------------------------------------------------------------
type: enum
desc: "Function attributes"
class: $xFunction
name: $x_function_set_attribute_t
analogue:
    - "**cl_kernel_exec_info**"
etors:
    - name: $X_FUNCTION_SET_ATTR_INDIRECT_HOST_ACCESS
      value: "0"
      desc: "Indicates that the function accesses host allocations indirectly (default: false)"
    - name: $X_FUNCTION_SET_ATTR_INDIRECT_DEVICE_ACCESS
      desc: "Indicates that the function accesses device allocations indirectly (default: false)"
    - name: $X_FUNCTION_SET_ATTR_INDIRECT_SHARED_ACCESS
      desc: "Indicates that the function accesses shared allocations indirectly (default: false)"
--- #--------------------------------------------------------------------------
type: function
desc: "Sets a function attribute"
class: $xFunction
name: SetAttribute
analogue:
    - "**clSetKernelExecInfo**"
details:
    - "This function may **not** be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in/out] handle of the function."
    - type: "$x_function_set_attribute_t"
      name: attr
      desc: "[in] attribute to set"
    - type: "uint32_t"
      name: value
      desc: "[in] attribute value to set"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid value for attr"
        - "invalid value for value"
--- #--------------------------------------------------------------------------
type: enum
desc: "Function attributes"
class: $xFunction
name: $x_function_get_attribute_t
analogue:
    - "**CUfunction_attribute**"
etors:
    - name: $X_FUNCTION_GET_ATTR_MAX_REGS_USED
      value: "0"
      desc: "Maximum device registers used for this function"
    - name: $X_FUNCTION_GET_ATTR_NUM_THREAD_DIMENSIONS
      desc: "Maximum dimensions for group for this function"
    - name: $X_FUNCTION_GET_ATTR_MAX_SHARED_MEM_SIZE
      desc: "Maximum shared memory required for this function"
    - name: $X_FUNCTION_GET_ATTR_HAS_SPILL_FILL
      desc: "Function required spill/fills."
    - name: $X_FUNCTION_GET_ATTR_HAS_BARRIERS
      desc: "Function contains barriers."
    - name: $X_FUNCTION_GET_ATTR_HAS_DPAS
      desc: "Function contains DPAs."
--- #--------------------------------------------------------------------------
type: function
desc: "Query a function attribute."
class: $xFunction
name: GetAttribute
analogue:
    - "**cuFuncGetAttribute**"
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
    - type: "$x_function_get_attribute_t"
      name: attr
      desc: "[in] attribute to query"
    - type: "uint32_t*"
      name: pValue
      desc: "[out] returned attribute value"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid value for attr"
--- #--------------------------------------------------------------------------
type: enum
desc: API version of $x_dispatch_function_arguments_t
class: [ $xCommandList, $xCommandGraph ]
name: $x_dispatch_function_arguments_version_t
etors:
    - name: $X_DISPATCH_FUNCTION_ARGUMENTS_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: struct
desc: "Dispatch function arguments."
class: [ $xCommandList, $xCommandGraph ]
name: $x_dispatch_function_arguments_t
members:
    - type: "$x_dispatch_function_arguments_version_t"
      name: version
      desc: "[in] $X_DISPATCH_FUNCTION_ARGUMENTS_VERSION_CURRENT"
      init: $X_DISPATCH_FUNCTION_ARGUMENTS_VERSION_CURRENT
    - type: "uint32_t"
      name: groupCountX
      desc: "[in] width of dispatches in X dimension"
      init: "0"
    - type: "uint32_t"
      name: groupCountY
      desc: "[in] width of dispatches in Y dimension"
      init: "0"
    - type: "uint32_t"
      name: groupCountZ
      desc: "[in] width of dispatches in Z dimension"
      init: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Dispatch command over one or more work groups."
class: [ $xCommandList, $xCommandGraph ]
name: EncodeDispatchFunction
analogue:
    - "**cuLaunchKernel**"
details:
    - "This function may **not** be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
      class: $xCommandList
    - type: $x_command_graph_handle_t
      name: hCommandGraph
      desc: "[in] handle of the command graph"
      class: $xCommandGraph
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
    - type: "const $x_dispatch_function_arguments_t*"
      name: pDispatchFuncArgs
      desc: "[in] dispatch function arguments."
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in][optional] handle of the event to signal on completion"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid group count range for dispatch"
        - "invalid dispatch count range for dispatch"
--- #--------------------------------------------------------------------------
type: struct
desc: "Indirect function arguments. These arguments are device visible."
class: [ $xCommandList, $xCommandGraph ]
name: $x_dispatch_function_indirect_arguments_t
members:
    - type: "uint32_t"
      name: groupCountX
      desc: "[in] width of dispatches in X dimension"
    - type: "uint32_t"
      name: groupCountY
      desc: "[in] width of dispatches in Y dimension"
    - type: "uint32_t"
      name: groupCountZ
      desc: "[in] width of dispatches in Z dimension"
--- #--------------------------------------------------------------------------
type: function
desc: "Dispatch command over one or more work groups using indirect dispatch arguments."
class: [ $xCommandList, $xCommandGraph ]
name: EncodeDispatchFunctionIndirect
analogue:
    - "**cuLaunchKernel**"
details:
    - "This function may **not** be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "The dispatch arguments need to be device visible."
    - "The dispatch arguments buffer may not be reusued until dispatch has completed on the device."
params:
    - type: "$x_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
      class: $xCommandList
    - type: $x_command_graph_handle_t
      name: hCommandGraph
      desc: "[in] handle of the command graph"
      class: $xCommandGraph
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
    - type: "const $x_dispatch_function_indirect_arguments_t*"
      name: pDispatchArgumentsBuffer
      desc: "[in] Pointer to buffer that will contain dispatch arguments."
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in][optional] handle of the event to signal on completion"
--- #--------------------------------------------------------------------------
type: typedef
desc: "type definition for host function pointers used with $xCommandListEncodeDispatchHostFunction"
class: [ $xCommandList, $xCommandGraph ]
name: $x_host_pfn_t
returns: void
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "void*"
      name: pUserData
      desc: "[in] Pointer to user data to pass to host function."
--- #--------------------------------------------------------------------------
type: function
desc: "Dispatch host function. All work after this command in the command list will block until host function completes."
class: [ $xCommandList, $xCommandGraph ]
name: EncodeDispatchHostFunction
analogue:
    - "**cuLaunchHostFunc**"
details:
    - "This function may **not** be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
      class: $xCommandList
    - type: $x_command_graph_handle_t
      name: hCommandGraph
      desc: "[in] handle of the command graph"
      class: $xCommandGraph
    - type: "$x_host_pfn_t"
      name: pfnHostFunc
      desc: "[in] pointer to host function."
    - type: "void*"
      name: pUserData
      desc: "[in] pointer to user data to pass to host function."
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for module"
name: $xModule
members:
    - type: $x_module_handle_t
      name: handle
      desc: "handle of module object"
    - type: $x_module_desc_t
      name: desc
      desc: "descriptor of the module object"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for function"
name: $xFunction
members:
    - type: $x_function_handle_t
      name: handle
      desc: "handle of function object"
    - type: $x_function_desc_t
      name: desc
      desc: "descriptor of the function object"