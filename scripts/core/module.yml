#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Module"
--- #--------------------------------------------------------------------------
type: enum
desc: API version of $x_module_desc_t
class: $xModule
name: $x_module_desc_version_t
etors:
    - name: $X_MODULE_DESC_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported module creation input formats"
class: $xModule
name: $x_module_format_t
etors:
    - name: $X_MODULE_FORMAT_IL_SPIRV
      value: "0"
      desc: "Format is SPIRV IL format"
    - name: $X_MODULE_FORMAT_NATIVE
      desc: "Format is device native format"
--- #--------------------------------------------------------------------------
type: struct
desc: "Specialization constants - User defined constants"
class: $xModule
name: $x_module_constants_t
members:
    - type: "uint32_t"
      name: numConstants
      desc: "[in] Number of specialization constants."
    - type: "const uint32_t*"
      name: pConstantIds
      desc: "[in] Pointer to array of IDs that is sized to numConstants."
    - type: "const uint64_t*"
      name: pConstantValues
      desc: "[in] Pointer to array of values that is sized to numConstants."
--- #--------------------------------------------------------------------------
type: struct
desc: "Module descriptor"
class: $xModule
name: $x_module_desc_t
members:
    - type: $x_module_desc_version_t
      name: version
      desc: "[in] $X_MODULE_DESC_VERSION_CURRENT"
      init: $X_MODULE_DESC_VERSION_CURRENT
    - type: "$x_module_format_t"
      name: format
      desc: "[in] Module format passed in with pInputModule"
    - type: "size_t"
      name: inputSize
      desc: "[in] size of input IL or ISA from pInputModule."
      init: "0"
    - type: "const uint8_t*"
      name: pInputModule
      desc: "[in] pointer to IL or ISA"
      init: nullptr
    - type: "const char*"
      name: pBuildFlags
      desc: "[in] string containing compiler flags. See programming guide for build flags."
      init: nullptr
    - type: "const $x_module_constants_t*"
      name: pConstants
      desc: "[in] pointer to specialization constants. Valid only for SPIR-V input."
      init: nullptr
--- #--------------------------------------------------------------------------
type: function
desc: "Creates module object from an input IL or native binary."
class: $xModule
name: Create
decl: static
ordinal: "0"
analogue:
    - "**cuModuleLoad**"
details:
    - "Compiles the module for execution on the device."
    - "The module can only be used on the device on which it was created."
    - "The module can be copied to other devices within the same driver instance by using $xModuleGetNativeBinary."
    - "The following build options are supported:":
        - "\"-$x-opt-disable\" - Disable optimizations"
        - "\"-$x-opt-greater-than-4GB-buffer-required\" - Use 64-bit offset calculations for buffers."
        - "\"-$x-opt-large-register-file\" - Increase number of registers available to threads."
    - "A build log can optionally be returned to the caller. The caller is responsible for destroying build log using $xModuleBuildLogDestroy."
    - "The module descriptor constants are only supported for SPIR-V specialization constants."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "const $x_module_desc_t*"
      name: desc
      desc: "[in] pointer to module descriptor"
    - type: "$x_module_handle_t*"
      name: phModule
      desc: "[out] pointer to handle of module object created"
    - type: "$x_module_build_log_handle_t*"
      name: phBuildLog
      desc: "[out][optional] pointer to handle of module's build log."
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid pDesc->format"
        - "nullptr == pDesc->pInputModule"
        - "nullptr == pDesc->phModule"
        - "0 == pDesc->inputSize"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
    - $X_RESULT_ERROR_MODULE_BUILD_FAILURE:
        - "Failure to build module. See build log for more details."
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys module"
class: $xModule
name: Destroy
decl: static
ordinal: "0"
analogue:
    - "**cuModuleUnload**"
details:
    - "The application is responsible for making sure the device is not currently referencing the module before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this module"
    - "The application may **not** call this function from simultaneous threads with the same module handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_module_handle_t"
      name: hModule
      desc: "[in][release] handle of the module"
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys module build log object"
class: $xModuleBuildLog
name: Destroy
decl: static
ordinal: "0"
details:
    - "The implementation of this function will immediately free all Host allocations associated with this object"
    - "The application may **not** call this function from simultaneous threads with the same build log handle."
    - "The implementation of this function should be lock-free."
    - "This function can be called before or after $xModuleDestroy for the associated module."
params:
    - type: "$x_module_build_log_handle_t"
      name: hModuleBuildLog
      desc: "[in][release] handle of the module build log object."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves text string for build log."
class: $xModuleBuildLog
name: GetString
details:
    - "The caller can pass nullptr for pBuildLog when querying only for size."
    - "The caller must provide memory for build log."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_module_build_log_handle_t
      name: hModuleBuildLog
      desc: "[in] handle of the module build log object."
    - type: "size_t*"
      name: pSize
      desc: "[in,out] size of build log string."
    - type: "char*"
      name: pBuildLog
      desc: "[in,out][optional] pointer to null-terminated string of the log."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieve native binary from Module."
class: $xModule
name: GetNativeBinary
details:
    - "The native binary output can be cached to disk and new modules can be later constructed from the cached copy."
    - "The native binary will retain debugging information that is associated with a module."
    - "The caller can pass nullptr for pModuleNativeBinary when querying only for size."
    - "The implementation will copy the native binary into a buffer supplied by the caller."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_module_handle_t
      name: hModule
      desc: "[in] handle of the module"
    - type: "size_t*"
      name: pSize
      desc: "[in,out] size of native binary in bytes."
    - type: "uint8_t*"
      name: pModuleNativeBinary
      desc: "[in,out][optional] byte pointer to native binary"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieve global variable pointer from Module."
class: $xModule
name: GetGlobalPointer
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_module_handle_t
      name: hModule
      desc: "[in] handle of the device"
    - type: "const char*"
      name: pGlobalName
      desc: "[in] name of global variable in module"
    - type: "void**"
      name: pptr
      desc: "[out] device visible pointer"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid name"
    - $X_RESULT_ERROR_UNSUPPORTED
--- #--------------------------------------------------------------------------
type: enum
desc: API version of $x_kernel_desc_t
class: $xKernel
name: $x_kernel_desc_version_t
etors:
    - name: $X_KERNEL_DESC_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported kernel creation flags"
class: $xKernel
name: $x_kernel_flag_t
etors:
    - name: $X_KERNEL_FLAG_NONE
      value: "0"
      desc: "default driver behavior"
    - name: $X_KERNEL_FLAG_FORCE_RESIDENCY
      desc: "force all device allocations to be resident during execution"
--- #--------------------------------------------------------------------------
type: struct
desc: "Kernel descriptor"
class: $xKernel
name: $x_kernel_desc_t
members:
    - type: $x_kernel_desc_version_t
      name: version
      desc: "[in] $X_KERNEL_DESC_VERSION_CURRENT"
      init: $X_KERNEL_DESC_VERSION_CURRENT
    - type: "$x_kernel_flag_t"
      name: flags
      desc: "[in] creation flags"
      init: $X_KERNEL_FLAG_NONE
    - type: "const char*"
      name: pKernelName
      desc: "[in] null-terminated name of kernel in module"
      init: nullptr
--- #--------------------------------------------------------------------------
type: function
desc: "Create a kernel object from a module by name"
class: $xKernel
name: Create
decl: static
ordinal: "0"
analogue:
    - "**cuModuleGetFunction**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_module_handle_t"
      name: hModule
      desc: "[in] handle of the module"
    - type: "const $x_kernel_desc_t*"
      name: desc
      desc: "[in] pointer to kernel descriptor"
    - type: "$x_kernel_handle_t*"
      name:  phKernel
      desc: "[out] handle of the Function object"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "nullptr == pDesc->pKernelName"
        - "invalid value for pDesc->pKernelName"
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a kernel object"
class: $xKernel
name: Destroy
decl: static
ordinal: "0"
details:
    - "All kernels must be destroyed before the module is destroyed."
    - "The application is responsible for making sure the device is not currently referencing the kernel before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this kernel"
    - "The application may **not** call this function from simultaneous threads with the same kernel handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in][release] handle of the kernel object"  
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieve a function pointer from a module by name"
class: $xModule
name: GetFunctionPointer
details:
    - "The function pointer is unique for the device on which the module was created."
    - "The function pointer is no longer valid if module is destroyed."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_module_handle_t"
      name: hModule
      desc: "[in] handle of the module"
    - type: "const char*"
      name: pFunctionName
      desc: "[in] Name of function to retrieve function pointer for."
    - type: "void**"
      name:  pfnFunction
      desc: "[out] pointer to function."
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid value pFunctionName. Function name must exist in Module."
--- #--------------------------------------------------------------------------
type: function
desc: "Set group size for a kernel"
class: $xKernel
name: SetGroupSize
details:
    - "The application may **not** call this function from simultaneous threads with the same kernel handle."
    - "The implementation of this function should be lock-free."
    - "The implementation will copy the group size information into a command list when the function is appended."
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object" 
    - type: "uint32_t"
      name: groupSizeX
      desc: "[in] group size for X dimension to use for this kernel"
    - type: "uint32_t"
      name: groupSizeY
      desc: "[in] group size for Y dimension to use for this kernel"
    - type: "uint32_t"
      name: groupSizeZ
      desc: "[in] group size for Z dimension to use for this kernel"
--- #--------------------------------------------------------------------------
type: function
desc: "Query a suggested group size for a kernel given a global size for each dimension."
class: $xKernel
name: SuggestGroupSize
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "This function ignores the group size that is set using $xKernelSetGroupSize."
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object" 
    - type: "uint32_t"
      name: globalSizeX
      desc: "[in] global width for X dimension"
    - type: "uint32_t"
      name: globalSizeY
      desc: "[in] global width for Y dimension"
    - type: "uint32_t"
      name: globalSizeZ
      desc: "[in] global width for Z dimension"
    - type: "uint32_t*"
      name: groupSizeX
      desc: "[out] recommended size of group for X dimension"
    - type: "uint32_t*"
      name: groupSizeY
      desc: "[out] recommended size of group for Y dimension"
    - type: "uint32_t*"
      name: groupSizeZ
      desc: "[out] recommended size of group for Z dimension"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid global width"
--- #--------------------------------------------------------------------------
type: function
desc: "Query a suggested max group count a cooperative kernel."
class: $xKernel
name: SuggestMaxCooperativeGroupCount
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object" 
    - type: "uint32_t*"
      name: totalGroupCount
      desc: "[out] recommended total group count."
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid number of threads."        
--- #--------------------------------------------------------------------------
type: function
desc: "Set kernel argument used on kernel launch."
class: $xKernel
name: SetArgumentValue
details:
    - "This function may **not** be called from simultaneous threads with the same function handle."
    - "The implementation of this function should be lock-free."
    - "The implementation will copy the arguments into a command list when the function is appended."
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: "uint32_t"
      name: argIndex
      desc: "[in] argument index in range [0, num args - 1]"
    - type: "size_t"
      name: argSize
      desc: "[in] size of argument type"
    - type: "const void*"
      name: pArgValue
      desc: "[in][optional] argument value represented as matching arg type. If null then argument value is considered null."
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid argument index"
        - "invalid size specified"
--- #--------------------------------------------------------------------------
type: enum
desc: "Kernel attributes"
class: $xKernel
name: $x_kernel_set_attribute_t
analogue:
    - "**cl_kernel_exec_info**"
etors:
    - name: $X_KERNEL_SET_ATTR_INDIRECT_HOST_ACCESS
      value: "0"
      desc: "Indicates that the function accesses host allocations indirectly (default: false)"
    - name: $X_KERNEL_SET_ATTR_INDIRECT_DEVICE_ACCESS
      desc: "Indicates that the function accesses device allocations indirectly (default: false)"
    - name: $X_KERNEL_SET_ATTR_INDIRECT_SHARED_ACCESS
      desc: "Indicates that the function accesses shared allocations indirectly (default: false)"
--- #--------------------------------------------------------------------------
type: function
desc: "Sets a kernel attribute"
class: $xKernel
name: SetAttribute
analogue:
    - "**clSetKernelExecInfo**"
details:
    - "This function may **not** be called from simultaneous threads with the same function handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: "$x_kernel_set_attribute_t"
      name: attr
      desc: "[in] attribute to set"
    - type: "uint32_t"
      name: value
      desc: "[in] attribute value to set"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid value for attr"
        - "invalid value for value"
--- #--------------------------------------------------------------------------
type: function
desc: "Sets the preferred Intermediate cache configuration for a kernel."
class: $xKernel
name: SetIntermediateCacheConfig
ordinal: "2"
details:
    - "The application may **not** call this function from simultaneous threads with the same kernel handle."
analogue:
    - "**cudaFuncSetCacheConfig **"
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object" 
    - type: "$x_cache_config_t"
      name: CacheConfig
      desc: "[in] CacheConfig"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "devices do not support CacheConfig"
--- #--------------------------------------------------------------------------
type: enum
desc: API version of $x_kernel_properties_t
class: $xKernel
name: $x_kernel_properties_version_t
etors:
    - name: $X_KERNEL_PROPERTIES_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum device name string size"
name: $X_MAX_KERNEL_NAME
value: "256"
--- #--------------------------------------------------------------------------
type: struct
desc: "Kernel properties"
class: $xKernel
name: $x_kernel_properties_t
members:
    - type: $x_kernel_properties_version_t
      name: version
      desc: "[in] $X_KERNEL_PROPERTIES_VERSION_CURRENT"
      init: $X_KERNEL_PROPERTIES_VERSION_CURRENT
    - type: char
      name: "name[$X_MAX_KERNEL_NAME]"
      desc: "[out] Kernel name"
    - type: "uint32_t"
      name: numKernelArgs
      desc: "[out] number of kernel arguments."
    - type: "uint32_t"
      name: requiredGroupSizeX
      desc: "[out] required group size in the X dimension"
    - type: "uint32_t"
      name: requiredGroupSizeY
      desc: "[out] required group size in the Y dimension"
    - type: "uint32_t"
      name: requiredGroupSizeZ
      desc: "[out] required group size in the Z dimension"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieve kernel properties."
class: $xKernel
name: GetProperties
analogue:
    - "**cuFuncGetAttribute**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: "$x_kernel_properties_t*"
      name: pKernelProperties
      desc: "[in,out] query result for kernel properties."
--- #--------------------------------------------------------------------------
type: struct
desc: "Kernel dispatch group count."
class: $xCommandList
name: $x_group_count_t
members:
    - type: "uint32_t"
      name: groupCountX
      desc: "[in] number of thread groups in X dimension"
      init: "0"
    - type: "uint32_t"
      name: groupCountY
      desc: "[in] number of thread groups in Y dimension"
      init: "0"
    - type: "uint32_t"
      name: groupCountZ
      desc: "[in] number of thread groups in Z dimension"
      init: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Launch kernel over one or more work groups."
class: $xCommandList
name: AppendLaunchKernel
analogue:
    - "**cuLaunchKernel**"
details:
    - "This may **not** be called for a command list created with $X_COMMAND_LIST_FLAG_COPY_ONLY."
    - "This function may **not** be called from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: "const $x_group_count_t*"
      name: pLaunchFuncArgs
      desc: "[in] thread group launch arguments"
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
--- #--------------------------------------------------------------------------
type: function
desc: "Launch kernel cooperatively over one or more work groups."
class: $xCommandList
name: AppendLaunchCooperativeKernel
analogue:
    - "**cudaLaunchCooperativeKernel**"
details:
    - "This may **not** be called for a command list created with $X_COMMAND_LIST_FLAG_COPY_ONLY."
    - "This may only be used for a command list that are submitted to command queue with cooperative flag set."
    - "This function may **not** be called from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
    - "Use $xKernelSuggestMaxCooperativeGroupCount to recommend max group count for device for cooperative functions that device supports."
params:
    - type: "$x_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: "const $x_group_count_t*"
      name: pLaunchFuncArgs
      desc: "[in] thread group launch arguments"
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"      
--- #--------------------------------------------------------------------------
type: function
desc: "Launch kernel over one or more work groups using indirect arguments."
class: $xCommandList
name: AppendLaunchKernelIndirect
analogue:
    - "**cuLaunchKernel**"
details:
    - "The launch arguments need to be device visible."
    - "The launch arguments buffer may not be reused until the function has completed on the device."
    - "This may **not** be called for a command list created with $X_COMMAND_LIST_FLAG_COPY_ONLY."
    - "This function may **not** be called from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: "const $x_group_count_t*"
      name: pLaunchArgumentsBuffer
      desc: "[in] pointer to device buffer that will contain thread group launch arguments"
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
--- #--------------------------------------------------------------------------
type: function
desc: "Launch multiple kernels over one or more work groups using an array of indirect arguments."
class: $xCommandList
name: AppendLaunchMultipleKernelsIndirect
analogue:
    - "**cuLaunchKernel**"
details:
    - "The array of launch arguments need to be device visible."
    - "The array of launch arguments buffer may not be reused until the kernel has completed on the device."
    - "This may **not** be called for a command list created with $X_COMMAND_LIST_FLAG_COPY_ONLY."
    - "This function may **not** be called from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: uint32_t
      name: numKernels
      desc: "[in] maximum number of kernels to launch"
    - type: "$x_kernel_handle_t*"
      name: phKernels
      desc: "[in][range(0, numKernels)] handles of the kernel objects"
    - type: "const uint32_t*"
      name: pCountBuffer
      desc: "[in] pointer to device memory location that will contain the actual number of kernels to launch; value must be less-than or equal-to numKernels"
    - type: "const $x_group_count_t*"
      name: pLaunchArgumentsBuffer
      desc: "[in][range(0, numKernels)] pointer to device buffer that will contain a contiguous array of thread group launch arguments"
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for module"
name: $xModule
owner: $xDevice
members:
    - type: $x_module_handle_t
      name: handle
      desc: "[in] handle of module object"
    - type: $xDevice*
      name: pDevice
      desc: "[in] pointer to owner object"
    - type: $x_module_desc_t
      name: desc
      desc: "[in] descriptor of the module object"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for buildlog"
name: $xModuleBuildLog
owner: $xModule
members:
    - type: $x_module_build_log_handle_t
      name: handle
      desc: "[in] handle of the buildlog object"
    - type: $xModule*
      name: pModule
      desc: "[in] pointer to owner object"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for kernel"
name: $xKernel
owner: $xModule
members:
    - type: $x_kernel_handle_t
      name: handle
      desc: "[in] handle of kernel object"
    - type: $xModule*
      name: pModule
      desc: "[in] pointer to owner object"
    - type: $x_kernel_desc_t
      name: desc
      desc: "[in] descriptor of the kernel object"