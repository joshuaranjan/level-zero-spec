#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Module"
--- #--------------------------------------------------------------------------
type: enum
desc: API version of $x_module_desc_t
class: $xModule
name: $x_module_desc_version_t
etors:
    - name: $X_MODULE_DESC_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported module creation input formats"
class: $xModule
name: $x_module_format_t
etors:
    - name: $X_MODULE_FORMAT_IL_SPIRV
      value: "0"
      desc: "Format is SPIRV IL format"
    - name: $X_MODULE_FORMAT_NATIVE
      desc: "Format is device native format"
--- #--------------------------------------------------------------------------
type: struct
desc: "Module descriptor"
class: $xModule
name: $x_module_desc_t
members:
    - type: $x_module_desc_version_t
      name: version
      desc: "[in] $X_MODULE_DESC_VERSION_CURRENT"
      init: $X_MODULE_DESC_VERSION_CURRENT
    - type: "$x_module_format_t"
      name: format
      desc: "[in] Module format passed in with pInputModule"
    - type: "size_t"
      name: inputSize
      desc: "[in] size of input IL or ISA from pInputModule."
      init: "0"
    - type: "const uint8_t*"
      name: pInputModule
      desc: "[in] pointer to IL or ISA"
      init: nullptr
    - type: "const char*"
      name: pBuildFlags
      desc: "[in] string containing compiler flags. See programming guide for build flags."
      init: nullptr
--- #--------------------------------------------------------------------------
type: function
desc: "Creates module object from an input IL or native binary."
class: $xModule
name: Create
decl: static
ordinal: "0"
analogue:
    - "**cuModuleLoad**"
details:
    - "Compiles the module for execution on the device."
    - "The module can only be used on the device on which it was created."
    - "The module can be copied to other devices within the same driver instance by using $xModuleGetNativeBinary."
    - "The following build options are supported:":
        - "\"-$x-opt-disable\" - Disable optimizations"
        - "\"-$x-opt-greater-than-4GB-buffer-required\" - Use 64-bit offset calculations for buffers."
        - "\"-$x-opt-large-register-file\" - Increase number of registers available to threads."
    - "A build log can optionally be returned to the caller. The caller is responsible for destroying build log using $xModuleBuildLogDestroy."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "const $x_module_desc_t*"
      name: desc
      desc: "[in] pointer to module descriptor"
    - type: "$x_module_handle_t*"
      name: phModule
      desc: "[out] pointer to handle of module object created"
    - type: "$x_module_build_log_handle_t*"
      name: phBuildLog
      desc: "[out][optional] pointer to handle of module's build log."
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid pDesc->format"
        - "nullptr == pDesc->pInputModule"
        - "nullptr == pDesc->phModule"
        - "0 == pDesc->inputSize"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
    - $X_RESULT_ERROR_MODULE_BUILD_FAILURE:
        - "Failure to build module. See build log for more details."
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys module"
class: $xModule
name: Destroy
decl: static
ordinal: "0"
analogue:
    - "**cuModuleUnload**"
details:
    - "The application is responsible for making sure the device is not currently referencing the module before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this module"
    - "The application may **not** call this function from simultaneous threads with the same module handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_module_handle_t"
      name: hModule
      desc: "[in][release] handle of the module"
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys module build log object"
class: $xModuleBuildLog
name: Destroy
decl: static
ordinal: "0"
details:
    - "The implementation of this function will immediately free all Host allocations associated with this object"
    - "The application may **not** call this function from simultaneous threads with the same build log handle."
    - "The implementation of this function should be lock-free."
    - "This function can be called before or after $xModuleDestroy for the associated module."
params:
    - type: "$x_module_build_log_handle_t"
      name: hModuleBuildLog
      desc: "[in][release] handle of the module build log object."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves text string for build log."
class: $xModuleBuildLog
name: GetString
details:
    - "The caller can pass nullptr for pBuildLog when querying only for size."
    - "The caller must provide memory for build log."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_module_build_log_handle_t
      name: hModuleBuildLog
      desc: "[in] handle of the module build log object."
    - type: "size_t*"
      name: pSize
      desc: "[in,out] size of build log string."
    - type: "char*"
      name: pBuildLog
      desc: "[in,out][optional] pointer to null-terminated string of the log."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieve native binary from Module."
class: $xModule
name: GetNativeBinary
details:
    - "The native binary output can be cached to disk and new modules can be later constructed from the cached copy."
    - "The native binary will retain debugging information that is associated with a module."
    - "The caller can pass nullptr for pModuleNativeBinary when querying only for size."
    - "The implementation will copy the native binary into a buffer supplied by the caller."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_module_handle_t
      name: hModule
      desc: "[in] handle of the module"
    - type: "size_t*"
      name: pSize
      desc: "[in,out] size of native binary in bytes."
    - type: "uint8_t*"
      name: pModuleNativeBinary
      desc: "[in,out][optional] byte pointer to native binary"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieve global variable pointer from Module."
class: $xModule
name: GetGlobalPointer
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_module_handle_t
      name: hModule
      desc: "[in] handle of the device"
    - type: "const char*"
      name: pGlobalName
      desc: "[in] name of function in global"
    - type: "void**"
      name: pptr
      desc: "[out] device visible pointer"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid name"
    - $X_RESULT_ERROR_UNSUPPORTED
--- #--------------------------------------------------------------------------
type: enum
desc: API version of $x_function_desc_t
class: $xFunction
name: $x_function_desc_version_t
etors:
    - name: $X_FUNCTION_DESC_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported function creation flags"
class: $xFunction
name: $x_function_flag_t
etors:
    - name: $X_FUNCTION_FLAG_NONE
      value: "0"
      desc: "default driver behavior"
    - name: $X_FUNCTION_FLAG_FORCE_RESIDENCY
      desc: "force all device allocations to be resident during execution"
--- #--------------------------------------------------------------------------
type: struct
desc: "Function descriptor"
class: $xFunction
name: $x_function_desc_t
members:
    - type: $x_function_desc_version_t
      name: version
      desc: "[in] $X_FUNCTION_DESC_VERSION_CURRENT"
      init: $X_FUNCTION_DESC_VERSION_CURRENT
    - type: "$x_function_flag_t"
      name: flags
      desc: "[in] creation flags"
      init: $X_FUNCTION_FLAG_NONE
    - type: "const char*"
      name: pFunctionName
      desc: "[in] null-terminated name of function in Module"
      init: nullptr
--- #--------------------------------------------------------------------------
type: function
desc: "Create Function object from Module by name"
class: $xFunction
name: Create
decl: static
ordinal: "0"
analogue:
    - "**cuModuleGetFunction**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_module_handle_t"
      name: hModule
      desc: "[in] handle of the module"
    - type: "const $x_function_desc_t*"
      name: desc
      desc: "[in] pointer to function descriptor"
    - type: "$x_function_handle_t*"
      name:  phFunction
      desc: "[out] handle of the Function object"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "nullptr == pDesc->pFunctionName"
        - "invalid value for pDesc->pFunctionName"
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys Function object"
class: $xFunction
name: Destroy
decl: static
ordinal: "0"
details:
    - "All functions must be destroyed before the module is destroyed."
    - "The application is responsible for making sure the device is not currently referencing the function before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this function"
    - "The application may **not** call this function from simultaneous threads with the same function handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in][release] handle of the function object"  
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieve function pointer from Module by name"
class: $xModule
name: GetFunctionPointer
details:
    - "The function pointer is unique for the device on which the module was created."
    - "The function pointer is no longer valid if module is destroyed."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_module_handle_t"
      name: hModule
      desc: "[in] handle of the module"
    - type: "const char*"
      name: pFunctionName
      desc: "[in] Name of function to retrieve function pointer for."
    - type: "void**"
      name:  pfnFunction
      desc: "[out] pointer to function."
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid value pFunctionName. Function name must exist in Module."
--- #--------------------------------------------------------------------------
type: function
desc: "Set group size for Function."
class: $xFunction
name: SetGroupSize
details:
    - "The application may **not** call this function from simultaneous threads with the same function handle."
    - "The implementation of this function should be lock-free."
    - "The implementation will copy the group size information into a command list when the function is appended."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object" 
    - type: "uint32_t"
      name: groupSizeX
      desc: "[in] group size for X dimension to use for this function."
    - type: "uint32_t"
      name: groupSizeY
      desc: "[in] group size for Y dimension to use for this function."
    - type: "uint32_t"
      name: groupSizeZ
      desc: "[in] group size for Z dimension to use for this function."
--- #--------------------------------------------------------------------------
type: function
desc: "Query a suggested group size for function given a global size for each dimension."
class: $xFunction
name: SuggestGroupSize
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "This function ignores the group size that is set using $xFunctionSetGroupSize."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object" 
    - type: "uint32_t"
      name: globalSizeX
      desc: "[in] global width for X dimension."
    - type: "uint32_t"
      name: globalSizeY
      desc: "[in] global width for Y dimension."
    - type: "uint32_t"
      name: globalSizeZ
      desc: "[in] global width for Z dimension."
    - type: "uint32_t*"
      name: groupSizeX
      desc: "[out] recommended size of group for X dimension."
    - type: "uint32_t*"
      name: groupSizeY
      desc: "[out] recommended size of group for Y dimension."
    - type: "uint32_t*"
      name: groupSizeZ
      desc: "[out] recommended size of group for Z dimension."
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid number of threads."
--- #--------------------------------------------------------------------------
type: function
desc: "Set function argument used on function launch."
class: $xFunction
name: SetArgumentValue
details:
    - "This function may **not** be called from simultaneous threads with the same function handle."
    - "The implementation of this function should be lock-free."
    - "The implementation will copy the arguments into a command list when the function is appended."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function args object."
    - type: "uint32_t"
      name: argIndex
      desc: "[in] argument index in range [0, num args - 1]"
    - type: "size_t"
      name: argSize
      desc: "[in] size of argument type"
    - type: "const void*"
      name: pArgValue
      desc: "[in][optional] argument value represented as matching arg type. If null then argument value is considered null."
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid argument index"
        - "invalid size specified"
--- #--------------------------------------------------------------------------
type: enum
desc: "Function attributes"
class: $xFunction
name: $x_function_set_attribute_t
analogue:
    - "**cl_kernel_exec_info**"
etors:
    - name: $X_FUNCTION_SET_ATTR_INDIRECT_HOST_ACCESS
      value: "0"
      desc: "Indicates that the function accesses host allocations indirectly (default: false)"
    - name: $X_FUNCTION_SET_ATTR_INDIRECT_DEVICE_ACCESS
      desc: "Indicates that the function accesses device allocations indirectly (default: false)"
    - name: $X_FUNCTION_SET_ATTR_INDIRECT_SHARED_ACCESS
      desc: "Indicates that the function accesses shared allocations indirectly (default: false)"
--- #--------------------------------------------------------------------------
type: function
desc: "Sets a function attribute"
class: $xFunction
name: SetAttribute
analogue:
    - "**clSetKernelExecInfo**"
details:
    - "This function may **not** be called from simultaneous threads with the same function handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function."
    - type: "$x_function_set_attribute_t"
      name: attr
      desc: "[in] attribute to set"
    - type: "uint32_t"
      name: value
      desc: "[in] attribute value to set"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid value for attr"
        - "invalid value for value"
--- #--------------------------------------------------------------------------
type: enum
desc: "Function attributes"
class: $xFunction
name: $x_function_get_attribute_t
analogue:
    - "**CUfunction_attribute**"
etors:
    - name: $X_FUNCTION_GET_ATTR_MAX_REGS_USED
      value: "0"
      desc: "Maximum device registers used for this function"
    - name: $X_FUNCTION_GET_ATTR_NUM_THREAD_DIMENSIONS
      desc: "Maximum dimensions for group for this function"
    - name: $X_FUNCTION_GET_ATTR_MAX_SHARED_MEM_SIZE
      desc: "Maximum shared memory required for this function"
    - name: $X_FUNCTION_GET_ATTR_HAS_SPILL_FILL
      desc: "Function required spill/fills."
    - name: $X_FUNCTION_GET_ATTR_HAS_BARRIERS
      desc: "Function contains barriers."
    - name: $X_FUNCTION_GET_ATTR_HAS_DPAS
      desc: "Function contains DPAs."
--- #--------------------------------------------------------------------------
type: function
desc: "Query a function attribute."
class: $xFunction
name: GetAttribute
analogue:
    - "**cuFuncGetAttribute**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
    - type: "$x_function_get_attribute_t"
      name: attr
      desc: "[in] attribute to query"
    - type: "uint32_t*"
      name: pValue
      desc: "[out] returned attribute value"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "invalid value for attr"
--- #--------------------------------------------------------------------------
type: struct
desc: "Function thread group dimensions."
class: $xCommandList
name: $x_thread_group_dimensions_t
members:
    - type: "uint32_t"
      name: groupCountX
      desc: "[in] size of thread group in X dimension"
      init: "0"
    - type: "uint32_t"
      name: groupCountY
      desc: "[in] size of thread group in Y dimension"
      init: "0"
    - type: "uint32_t"
      name: groupCountZ
      desc: "[in] size of thread group in Z dimension"
      init: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Launch function over one or more work groups."
class: $xCommandList
name: AppendLaunchFunction
analogue:
    - "**cuLaunchKernel**"
details:
    - "This may **not** be called for a command list created with $X_COMMAND_LIST_FLAG_COPY_ONLY."
    - "This function may **not** be called from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
    - type: "const $x_thread_group_dimensions_t*"
      name: pLaunchFuncArgs
      desc: "[in] launch function arguments."
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
--- #--------------------------------------------------------------------------
type: function
desc: "Launch function over one or more work groups using indirect arguments."
class: $xCommandList
name: AppendLaunchFunctionIndirect
analogue:
    - "**cuLaunchKernel**"
details:
    - "The launch arguments need to be device visible."
    - "The launch arguments buffer may not be reusued until the function has completed on the device."
    - "This may **not** be called for a command list created with $X_COMMAND_LIST_FLAG_COPY_ONLY."
    - "This function may **not** be called from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
    - type: "const $x_thread_group_dimensions_t*"
      name: pLaunchArgumentsBuffer
      desc: "[in] pointer to device buffer that will contain launch arguments"
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
--- #--------------------------------------------------------------------------
type: function
desc: "Launch multiple functions over one or more work groups using an array of indirect arguments."
class: $xCommandList
name: AppendLaunchMultipleFunctionsIndirect
analogue:
    - "**cuLaunchKernel**"
details:
    - "The array of launch arguments need to be device visible."
    - "The array of launch arguments buffer may not be reusued until the function has completed on the device."
    - "This may **not** be called for a command list created with $X_COMMAND_LIST_FLAG_COPY_ONLY."
    - "This function may **not** be called from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: uint32_t
      name: numFunctions
      desc: "[in] maximum number of functions to launch"
    - type: "$x_function_handle_t*"
      name: phFunctions
      desc: "[in][range(0, numFunctions)] handles of the function objects"
    - type: "const uint32_t*"
      name: pNumLaunchArguments
      desc: "[in] pointer to device memory location that will contain the actual number of launch arguments; value must be less-than or equal-to numFunctions"
    - type: "const $x_thread_group_dimensions_t*"
      name: pLaunchArgumentsBuffer
      desc: "[in][range(0, numFunctions)] pointer to device buffer that will contain a contiguous array of launch arguments"
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
--- #--------------------------------------------------------------------------
type: typedef
desc: "type definition for host function pointers used with $xCommandListAppendLaunchHostFunction"
class: $xCommandList
name: $x_host_pfn_t
returns: void
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "void*"
      name: pUserData
      desc: "[in] Pointer to user data to pass to host function."
--- #--------------------------------------------------------------------------
type: function
desc: "Launch host function. All work after this command in the command list will block until host function completes."
class: $xCommandList
name: AppendLaunchHostFunction
analogue:
    - "**cuLaunchHostFunc**"
details:
    - "This may **not** be called for a command list created with $X_COMMAND_LIST_FLAG_COPY_ONLY."
    - "This function may **not** be called from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: "$x_host_pfn_t"
      name: pfnHostFunc
      desc: "[in] pointer to host function."
    - type: "void*"
      name: pUserData
      desc: "[in] pointer to user data to pass to host function."
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for module"
name: $xModule
owner: $xDevice
members:
    - type: $x_module_handle_t
      name: handle
      desc: "[in] handle of module object"
    - type: $xDevice*
      name: pDevice
      desc: "[in] pointer to owner object"
    - type: $x_module_desc_t
      name: desc
      desc: "[in] descriptor of the module object"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for buildlog"
name: $xModuleBuildLog
owner: $xModule
members:
    - type: $x_module_build_log_handle_t
      name: handle
      desc: "[in] handle of the buildlog object"
    - type: $xModule*
      name: pModule
      desc: "[in] pointer to owner object"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for function"
name: $xFunction
owner: $xModule
members:
    - type: $x_function_handle_t
      name: handle
      desc: "[in] handle of function object"
    - type: $xModule*
      name: pModule
      desc: "[in] pointer to owner object"
    - type: $x_function_desc_t
      name: desc
      desc: "[in] descriptor of the function object"