--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Driver APIs for Module"
--- #--------------------------------------------------------------------------
type: macro
desc: API version of $x_module_desc_t
name: $X_MODULE_DESC_VERSION
value: "$X_MAKE_VERSION( 1, 0 )"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported module creation input formats"
name: $x_module_format_t
etors:
    - name: $X_MODULE_IL_SPIRV
      value: "0"
      desc: "Format is SPIRV IL format"
    - name: $X_MODULE_NATIVE
      desc: "Format is device native format"
--- #--------------------------------------------------------------------------
type: struct
desc: "Module descriptor"
name: $x_module_desc_t
members:
    - type: uint32_t
      name: version
      desc: "[in] $X_MODULE_DESC_VERSION"
    - type: "$x_module_format_t"
      name: format
      desc: "[in] Module format passed in with pInputModule"
    - type: "uint32_t"
      name: inputSize
      desc: "[in] size of input IL or ISA from pInputModule."
    - type: "const char*"
      name: pInputModule
      desc: "[in] pointer to IL or ISA"
    - type: "const char*"
      name: pBuildFlags
      desc: "[in] string containing compiler flags. See documentation for build flags."
--- #--------------------------------------------------------------------------
type: function
desc: "Creates module object from an input IL or native binary."
class: Device
name: CreateModule
analogue:
    - "**cuModuleLoad**"
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "This function will create and compile the module object."
    - "A build log can optionally be returned to the caller. Caller is responsible for destroying build log using $xModuleBuildLogDestroy"
    - "Device memory will be allocated for module during creation."
    - "A module can be created directly from native binary format."
    - "A native binary object can be retrieved from a module using $xModuleGetNativeBinary. This can be cached to disk and to create new modules."
    - "The following build options are supported:":
        - "\"-$x-opt-disable\" - Disable optimizations"
        - "\"-$x-opt-greater-than-4GB-buffer-required\" - Use 64-bit offset calculations for buffers."
        - "\"-$x-opt-large-register-file\" - Increase number of registers available to threads."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "const $x_module_desc_t*"
      name: desc
      desc: "[in] pointer to module descriptor"
    - type: "$x_module_handle_t*"
      name: phModule
      desc: "[out] pointer to handle of module object created"
    - type: "$x_module_build_log_handle_t*"
      name: phBuildLog
      desc: "[out][optional] pointer to handle of module's build log."
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "nullptr for desc"
        - "invalid desc->format"
        - "nullptr for desc->pInputModule"
        - "nullptr for desc->phModule"
        - "0 for desc->inputSize"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
    
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys module"
class: Module
name: Destroy
analogue:
    - "**cuModuleUnload**"
details:
    - "The application is responsible for making sure the GPU is not currently referencing the event before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this module"
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_module_handle_t"
      name: hModule
      desc: "[in] handle of the module"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hModule"
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys module build log object"
class: Module
name: BuildLogDestroy
details:
    - "The application is responsible for making sure the GPU is not currently referencing the event before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this object"
    - "The implementation of this function should be lock-free."
    - "This function can be called before or after $xModuleDestroy for the associated module."
params:
    - type: "$x_module_build_log_handle_t"
      name: hBuildLog
      desc: "[in] handle of the module build log object."
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hBuildLog"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves text string for build log."
class: Module
name: BuildLogGetString
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_module_build_log_handle_t
      name: hBuildLog
      desc: "[in] handle of the module build log object."
    - type: "uint32_t*"
      name: pSize
      desc: "[out] size of native binary."
    - type: "char**"
      name: pBuildLog
      desc: "[out] string pointer to log."
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "nullptr for hBuildLog"
        - "nullptr for pSize"
        - "nullptr for pBuildLog"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieve native binary from Module."
class: Module
name: GetNativeBinary
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "The memory for the native binary output is associated with the module. The output pointer should not be accessed after a module has been destroyed."
    - "The native binary output can be cached to disk and new modules can be later constructed from the cached copy."
params:
    - type: $x_module_handle_t
      name: hModule
      desc: "[in] handle of the device"
    - type: "uint32_t*"
      name: pSize
      desc: "[out] size of native binary."
    - type: "char**"
      name: pModuleNativeBinary
      desc: "[out] pointer to native binary"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "invalid format"
        - "nullptr for pInputModule"
        - "nullptr for phModule"
        - "0 for inputSize"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: macro
desc: API version of $x_function_desc_t
name: $X_FUNCTION_DESC_VERSION
value: "$X_MAKE_VERSION( 1, 0 )"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported function creation flags"
name: $x_function_flags_t
etors:
    - name: $X_FUNCTION_FLAG_NONE
      value: "0"
      desc: "default driver behavior"
    - name: $X_FUNCTION_FLAG_FORCE_RESIDENCY
      desc: "force all device allocations to be resident during execution"
--- #--------------------------------------------------------------------------
type: struct
desc: "Function descriptor"
name: $x_function_desc_t
members:
    - type: uint32_t
      name: version
      desc: "[in] $X_FUNCTION_DESC_VERSION"
    - type: "$x_function_flags_t"
      name: flags
      desc: "[in] creation flags"
    - type: "const char*"
      name: pFunctionName
      desc: "[in] null-terminated name of function in Module"
--- #--------------------------------------------------------------------------
type: function
desc: "Create Function object from Module by name"
class: Module
name: CreateFunction
analogue:
    - "**cuModuleGetFunction**"
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "Function objects should be destroyed before the Module is destroyed."
params:
    - type: "$x_module_handle_t"
      name: hModule
      desc: "[in] handle of the module"
    - type: "const $x_function_desc_t*"
      name: desc
      desc: "[in] pointer to function descriptor"
    - type: "$x_function_handle_t*"
      name:  phFunction
      desc: "[out] handle of the Function object"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hModule"
        - "nullptr for desc"
        - "nullptr for desc->pFunctionName"
        - "invalid name for desc->pFunctionName"
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys Function object"
class: Function
name: Destroy
details:
    - "The application is responsible for making sure the GPU is not currently referencing the event before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this function"
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFunction"
--- #--------------------------------------------------------------------------
type: function
desc: "Create Function arguments needed to pass arguments to a function."
class: Function
name: CreateFunctionArgs
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "FunctionArgs objects must be used with the Function object it was created for."
    - "Use $xFunctionArgsSetValue to setup arguments for dispatch."
    - "FunctionArgs can updated and used across multiple dispatches for the same function."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function"
    - type: "$x_function_args_handle_t*"
      name:  phFunctionArgs
      desc: "[out] handle of the Function arguments object"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFunction"
        - "nullptr for phFunctionArgs"
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys Function arguments object"
class: FunctionArgs
name: Destroy
details:
    - "The application is responsible for making sure the GPU is not currently referencing the event before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this function args"
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_function_args_handle_t"
      name: hFunctionArgs
      desc: "[in] handle of the function arguments buffer object"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFunctionArgs"
--- #--------------------------------------------------------------------------
type: function
desc: "Set function arguments within arguments buffer."
class: FunctionArgs
name: SetValue
analogue:
    - "**cuCtxCreate**"
    - "cuCtxGetCurrent"
details:
    - "This function may **not** be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_function_args_handle_t"
      name: hFunctionArgs
      desc: "[in/out] handle of the function args object."
    - type: "uint32_t"
      name: argIndex
      desc: "[in] argument index in range [0, num args - 1]"
    - type: "size_t"
      name: argSize
      desc: "[in] size of argument type"
    - type: "const void*"
      name: pArgValue
      desc: "[in] argument value represented as matching arg type"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFunctionArgs"
        - "invalid argument index"
        - "nullptr for pArgValue"
        - "invalid size specified"
--- #--------------------------------------------------------------------------
type: enum
desc: "Function argument attributes"
analogue:
    - "**cl_kernel_exec_info**"
name: $x_function_argument_attribute_t
etors:
    - name: $X_FUNCTION_ARG_ATTR_INDIRECT_HOST_ACCESS
      value: "0"
      desc: "Indicates that the function accesses host allocations indirectly (default: false)"
    - name: $X_FUNCTION_ARG_ATTR_INDIRECT_DEVICE_ACCESS
      desc: "Indicates that the function accesses device allocations indirectly (default: false)"
    - name: $X_FUNCTION_ARG_ATTR_INDIRECT_SHARED_ACCESS
      desc: "Indicates that the function accesses shared allocations indirectly (default: false)"
--- #--------------------------------------------------------------------------
type: function
desc: "Sets a function argument attribute"
class: FunctionArgs
name: SetAttribute
analogue:
    - "**clSetKernelExecInfo**"
details:
    - "This function may **not** be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_function_args_handle_t"
      name: hFunctionArgs
      desc: "[in/out] handle of the function args object."
    - type: "$x_function_argument_attribute_t"
      name: attr
      desc: "[in] attribute to set"
    - type: "uint32_t"
      name: value
      desc: "[in] attribute value to set"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFunctionArgs"
        - "invalid value for attr"
        - "invalid value for value"
--- #--------------------------------------------------------------------------
type: enum
desc: "Function attributes"
analogue:
    - "**CUfunction_attribute**"
name: $x_function_attribute_t
etors:
    - name: $X_FUNCTION_ATTR_MAX_REGS_USED
      value: "0"
      desc: "Maximum device registers used for this function"
    - name: $X_FUNCTION_ATTR_NUM_THREAD_DIMENSIONS
      desc: "Maximum dimensions for group for this function"
    - name: $X_FUNCTION_ATTR_MAX_SHARED_MEM_SIZE
      desc: "Maximum shared memory required for this function"
    - name: $X_FUNCTION_ATTR_HAS_SPILL_FILL
      desc: "Function required spill/fills."
    - name: $X_FUNCTION_ATTR_HAS_BARRIERS
      desc: "Function contains barriers."
    - name: $X_FUNCTION_ATTR_HAS_DPAS
      desc: "Function contains DPAs."
--- #--------------------------------------------------------------------------
type: function
desc: "Query a function attribute."
class: Function
name: QueryAttribute
analogue:
    - "**cuFuncGetAttribute**"
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
    - type: "$x_function_attribute_t"
      name: attr
      desc: "[in] attribute to query"
    - type: "uint32_t*"
      name: pValue
      desc: "[out] returned attribute value"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFunction"
        - "invalid value for attr"
        - "nullptr for pValue"
--- #--------------------------------------------------------------------------
type: function
desc: "Dispatch command over one or more work groups."
class: CommandList
name: EncodeDispatchFunction
analogue:
    - "**cuLaunchKernel**"
details:
    - "This function may **not** be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
    - type: "$x_function_args_handle_t"
      name: hFunctionArgs
      desc: "[in] handle to function arguments buffer."
    - type: "uint32_t"
      name: groupSizeX
      desc: "[in] group size for X dimension"
    - type: "uint32_t"
      name: groupSizeY
      desc: "[in] group size for Y dimension"
    - type: "uint32_t"
      name: groupSizeZ
      desc: "[in] group size for Z dimension"
    - type: "uint32_t"
      name: groupCountX
      desc: "[in] width of group dispatches in X dimension"
    - type: "uint32_t"
      name: groupCountY
      desc: "[in] width of group dispatches in Y dimension"
    - type: "uint32_t"
      name: groupCountZ
      desc: "[in] width of group dispatches in Z dimension"
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in][optional] handle of the event to signal on completion"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hCommandList"
        - "invalid handle for hFunction"
        - "nullptr for function arguments buffer"
        - "invalid group count range for dispatch"
        - "invalid dispatch count range for dispatch"

--- #--------------------------------------------------------------------------
type: struct
desc: "Indirect function arguments. These arguments are device visible."
name: $x_dispatch_function_arguments_t
members:
    - type: "uint32_t"
      name: groupSizeX
      desc: "[in] group size for X dimension"
    - type: "uint32_t"
      name: groupSizeY
      desc: "[in] group size for Y dimension"
    - type: "uint32_t"
      name: groupSizeZ
      desc: "[in] group size for Z dimension"
    - type: "uint32_t"
      name: groupCountX
      desc: "[in] width of dispatches in X dimension"
    - type: "uint32_t"
      name: groupCountY
      desc: "[in] width of dispatches in Y dimension"
    - type: "uint32_t"
      name: groupCountZ
      desc: "[in] width of dispatches in Z dimension"
--- #--------------------------------------------------------------------------
type: function
desc: "Dispatch command over one or more work groups using indirect dispatch arguments."
class: CommandList
name: EncodeDispatchFunctionIndirect
analogue:
    - "**cuLaunchKernel**"
details:
    - "This function may **not** be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "The dispatch arguments need to be device visible."
    - "The dispatch arguments buffer may not be reusued until dispatch has completed on the device."
params:
    - type: "$x_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
    - type: "$x_function_args_handle_t"
      name: hFunctionArgs
      desc: "[in] handle to function arguments buffer."
    - type: "const $x_dispatch_function_arguments_t*"
      name: pDispatchArgumentsBuffer
      desc: "[in] Pointer to buffer that will contain dispatch arguments."
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in][optional] handle of the event to signal on completion"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hCommandList"
        - "invalid handle for hFunction"
        - "invalid handle for hFunctionArgs."
        - "nullptr for dispatch arguments buffer"
--- #--------------------------------------------------------------------------
type: function
desc: "Query a suggested group size for function. If the function has an embedded group size then this will be returned. Otherwise, one will be suggested."
class: Function
name: SuggestGroupSize
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
    - type: "uint32_t"
      name: globalSizeX
      desc: "[in] global width for X dimension."
    - type: "uint32_t"
      name: globalSizeY
      desc: "[in] global width for Y dimension."
    - type: "uint32_t"
      name: globalSizeZ
      desc: "[in] global width for Z dimension."
    - type: "uint32_t*"
      name: groupSizeX
      desc: "[out] recommended size of group for X dimension."
    - type: "uint32_t*"
      name: groupSizeY
      desc: "[out] recommended size of group for Y dimension."
    - type: "uint32_t*"
      name: groupSizeZ
      desc: "[out] recommended size of group for Z dimension."
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFunction"
        - "invalid number of threads."
--- #--------------------------------------------------------------------------
type: func_ptr
desc: "type definition for host function pointers used with $xCommandListEncodeDispatchHostFunction"
name: $X_PFN_HOST_FUNC
analogue:
    - ""
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "void*"
      name: pUserData
      desc: "[in] Pointer to user data to pass to host function."
returns:
    - VOID:
        - "Void."
--- #--------------------------------------------------------------------------
type: function
desc: "Dispatch host function. All work after this command in the command list will block until host function completes."
name: $xCommandListEncodeDispatchHostFunction
analogue:
    - "**cuLaunchHostFunc**"
details:
    - "This function may **not** be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: "$X_PFN_HOST_FUNC"
      name: pfnHostFunc
      desc: "[in] pointer to host function."
    - type: "void*"
      name: pUserData
      desc: "[in] pointer to user data to pass to host function."
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in][optional] handle of the event to signal on completion. @todo [**Zack**] Is this needed? Host function could signal?"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hCommandList"
        - "null ptr for pfnHostFunc"
        - "null ptr for pUserData."
