--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Driver APIs for Sampler"
--- #--------------------------------------------------------------------------
type: macro
desc: API version of $x_sampler_desc_t
name: $X_SAMPLER_DESC_VERSION
value: "$X_MAKE_VERSION( 1, 0 )"
--- #--------------------------------------------------------------------------
type: enum
desc: "Sampler addressing modes"
class: $xDevice
name: $x_sampler_addressing_mode_t
etors:
    - name: $X_SAMPLER_ADDRESS_NONE
      value: "0"
      desc: "No coordinate modifications for out-of-bounds image access."
    - name: $X_SAMPLER_ADDRESS_REPEAT
      desc: "Out-of-bounds coordinates are wrapped back around."
    - name: $X_SAMPLER_ADDRESS_CLAMP
      desc: "Out-of-bounds coordinates are clamped to edge."
    - name: $X_SAMPLER_ADDRESS_MIRROR
      desc: "Out-of-bounds coordinates are mirrored starting from edge."
--- #--------------------------------------------------------------------------
type: enum
desc: "Sampler filtering modes"
class: $xDevice
name: $x_sampler_filtering_mode_t
etors:
    - name: $X_SAMPLER_FILTER_NEAREST
      value: "0"
      desc: "No coordinate modifications for out of bounds image access."
    - name: $X_SAMPLER_FILTER_LINEAR
      desc: "Out-of-bounds coordinates are wrapped back around."
--- #--------------------------------------------------------------------------
type: struct
desc: "Sampler descriptor"
class: $xDevice
name: $x_sampler_desc_t
members:
    - type: uint32_t
      name: version
      desc: "[in] $X_SAMPLER_DESC_VERSION"
      init: $X_SAMPLER_DESC_VERSION
    - type: "$x_sampler_addressing_mode_t"
      name: addressingMode
      desc: "[in] Sampler addressing mode to determine how out-of-bounds coordinates are handled."
      init: "$X_SAMPLER_ADDRESS_NONE"
    - type: "$x_sampler_filtering_mode_t"
      name: filterMode
      desc: "[in] Sampler filter mode to determine how samples are filtered."
      init: "$X_SAMPLER_FILTER_NEAREST"
    - type: "bool"
      name: isNormalized
      desc: "[in] Are coordinates normalized [0, 1] or not."
      init: "true"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates sampler object."
class: $xDevice
name: CreateSampler
analogue:
    - "**cuTexObjectCreate**"
details:
    - "This function may be called from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "const $x_sampler_desc_t*"
      name: pDesc
      desc: "[in] pointer to sampler descriptor"
    - type: "$x_sampler_handle_t*"
      name: phSampler
      desc: "[out] handle of the sampler"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid pDesc->addressingMode"
        - "invalid pDesc->filterMode"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys sampler object"
class: $xSampler
name: Destroy
analogue:
    - "**cuModuleUnload**"
details:
    - "The application is responsible for making sure the GPU is not currently referencing the event before it is deleted"
    - "The implementation of this function will immediately free all Host and Device allocations associated with this module"
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_sampler_handle_t"
      name: hSampler
      desc: "[in] handle of the sampler"