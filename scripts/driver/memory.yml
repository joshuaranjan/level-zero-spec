--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Driver APIs for Memory"
--- #--------------------------------------------------------------------------
type: macro
desc: "API version of $x_mempool_desc_t"
name: $X_MEMPOOL_DESC_VERSION
value: "$X_MAKE_VERSION( 1, 0 )"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported memory allocation flags"
name: $x_memory_flags_t
etors:
    - name: $X_MEMORY_FLAG_NONE
      value: "0"
      desc: "@todo"
--- #--------------------------------------------------------------------------
type: struct
desc: "Memory pool descriptor."
name: $x_mempool_desc_t
members:
    - type: uint32_t
      name: version
      desc: "[in] $X_MEMPOOL_DESC_VERSION"
    - type: uint32_t
      name: mask
      desc: "@todo some kind of device plus tile affinity mask?"
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates memory that will be automatically managed."
name: $xMemAllocManaged
details:
    - "Managed memory is automatically migrated between the host and memory pool represented by... ?"
    - "@todo Comprehend multi-tile."
    - "@todo Host or cross-device allcations?"
analogue:
    - "**cuMemAllocManaged**"
params:
    - type: "const $x_mempool_desc_t*"
      name: desc
      desc: "[in] pointer to memory pool descriptor"
    - type: $x_memory_flags_t
      name: flags
      desc: "[in] flags specifying allocation and usage information"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: uint32_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "$x_device_ptr_t*"
      name: ptr
      desc: "[out] pointer to managed allocation"
returns:
    - "@todo"
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates memory specific to a device."
name: $xMemAlloc
analogue:
    - "**cuMemAlloc**"
params:
    - type: "const $x_mempool_desc_t*"
      name: desc
      desc: "[in] pointer to memory pool descriptor"
    - type: $x_memory_flags_t
      name: flags
      desc: "[in] flags specifying allocation and usage information"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: uint32_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "$x_device_ptr_t*"
      name: ptr
      desc: "[out] pointer to managed allocation"
returns:
    - "@todo"
--- #--------------------------------------------------------------------------
type: function
desc: "Frees allocated device memory or managed memory."
name: $xMemFree
analogue:
    - "**cuMemFree**"
params:
    - type: xe_device_ptr_t
      name: ptr
      desc: "[in] pointer to memory to free"
returns:
    - "@todo"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported memory advice hints"
name: $x_memory_advice_t
etors:
    - name: $X_MEMORY_ADVICE_NONE
      value: "0"
      desc: "@todo"
--- #--------------------------------------------------------------------------
type: function
desc: "Provides advice about the use of a memory range."
name: $xMemAdvise
details:
    - "@todo likely will snap to page boundaries"
    - "@todo which memory advise hints could/should we support?"
analogue:
    - "**cuMemAdvise**"
params:
    - type: "const $x_mempool_desc_t*"
      name: desc
      desc: "[in] pointer to memory pool descriptor to apply advice to"
    - type: $x_device_ptr_t
      name: ptr
      desc: "[in] Pointer to the start of the memory range"
    - type: size_t
      name: size
      desc: "[in] Size in bytes of the memory range"
    - type: $x_memory_advice_t
      name: advice
      desc: "[in] Memory advice for the memory range"
returns:
    - "@todo"
