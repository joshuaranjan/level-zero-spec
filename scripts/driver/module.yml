--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Driver APIs for Module"
--- #--------------------------------------------------------------------------
type: macro
desc: API version of $x_command_queue_desc_t
name: $X_MODULE_DESC_VERSION
value: "$X_MAKE_VERSION( 1, 0 )"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates module object from ISA"
name: $xCreateModuleFromISA
analogue:
    - "**cuModuleLoad**"
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "const char**"
      name: pISAModule
      desc: "[in] pointer to ISA module buffer"
    - type: "size_t"
      name: isaSize
      desc: "[in] size of ISA module buffer"
    - type: "$x_module_handle_t*"
      name: phModule
      desc: "[out] pointer to handle of module object created"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "nullptr for pISAModule"
        - "nullptr for phModule"
        - "0 for isaSize"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported IR types"
name: $x_module_ir_type_t
etors:
    - name: $X_MODULE_IR_SPIRV_TEXT
      value: "0"
      desc: "IR is spirv text format"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates module object from IR"
name: $xCreateModuleFromIR
analogue:
    - "**cuModuleLoad**"
    - "cuCtxGetCurrent"
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "$x_module_ir_type_t"
      name: irType
      desc: "[in] IR type that is passed in with pIRModule"
    - type: "const char**"
      name: pIRModule
      desc: "[in] pointer to IR module buffer"
    - type: "size_t"
      name: irSize
      desc: "[in] size of IR module buffer"
    - type: "$x_module_handle_t*"
      name: phModule
      desc: "[out] pointer to handle of module object created"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "nullptr for pIRModule"
        - "nullptr for phModule"
        - "0 for irSize"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Creates module ISA object from IR"
name: $xCreateModuleISAFromIR
analogue:
    - ""
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "$x_module_ir_type_t"
      name: irType
      desc: "[in] IR type that is passed in with pIRModule"
    - type: "const char**"
      name: pIRModule
      desc: "[in] pointer to IR module buffer"
    - type: "size_t"
      name: irSize
      desc: "[in] size of IR module buffer"
    - type: "const char**"
      name: pISAModule
      desc: "[out] pointer to module ISA"
    - type: "size_t"
      name: isaSize
      desc: "[out] size of ISA module buffer"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hDevice"
        - "nullptr for pIRModule"
        - "nullptr for pISAModule"
        - "0 for irSize"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Releases module"
name: $xReleaseModule
analogue:
    - "**cuModuleUnload**"
params:
    - type: "$x_module_handle_t"
      name: hModule
      desc: "[in] handle of the module"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hModule"
--- #--------------------------------------------------------------------------
type: function
desc: "Create Function object from Module by name"
name: $xModuleGetGlobal
analogue:
    - "**cuModuleGetGlobal**"
params:
    - type: "$x_module_handle_t"
      name: hModule
      desc: "[in] handle of the module"
    - type: "const char*"
      name: pGlobalName
      desc: "[in] name of function in global"
    - type: "void*"
      name:  pGlobalValue
      desc: "[out] pointer to global value"
    - type: "size_t"
      name:  valueSize
      desc: "[out] size of value type"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hModule"
        - "null ptr for pGlobalName"
        - "invalid name for pGlobalName"
        - "null ptr for pGlobalValue"
--- #--------------------------------------------------------------------------
type: function
desc: "Create Function object from Module by name"
name: $xCreateFunctionFromModule
analogue:
    - "**cuModuleGetFunction**"
params:
    - type: "$x_module_handle_t"
      name: hModule
      desc: "[in] handle of the module"
    - type: "const char*"
      name: pFunctionName
      desc: "[in] name of function in Module"
    - type: "$x_function_handle_t*"
      name:  phFunction
      desc: "[out] handle of the Function object"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hModule"
        - "null ptr for pFunctionName"
        - "invalid name for pFunctionName"
--- #--------------------------------------------------------------------------
type: function
desc: "Releases Function object"
name: $xReleaseFunction
analogue:
    - "**cuModuleUnload**"
    - "cuCtxGetCurrent"
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hModule"
--- #--------------------------------------------------------------------------
type: function
desc: "Get the buffer size needed to store and pass function arguments."
name: $xGetFunctionArgsBufferSize
analogue:
    - "**cuCtxCreate**"
    - "cuCtxGetCurrent"
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
    - type: "uint32_t*"
      name: pSize
      desc: "[out] handle of the function object"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFunction"
        - "null ptr for pSize"
--- #--------------------------------------------------------------------------
type: function
desc: "Set function arguments within arguments buffer."
name: $xSetFunctionArgValue
analogue:
    - "**cuCtxCreate**"
    - "cuCtxGetCurrent"
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
    - type: "uint32_t"
      name: argIndex
      desc: "[in] argument index in range [0, num args - 1]"
    - type: "const void*"
      name: pArgValue
      desc: "[in] argument value represented as matching arg type"
    - type: "size_t"
      name: argSize
      desc: "[in] size of argument type"
    - type: "void*"
      name: pMemBuffer
      desc: "[in/out] pointer to memory buffer supplied by user"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFunction"
        - "invalid argument index"
        - "null ptr for pArgValue"
        - "invalid size specified"
        - "null ptr for pMemBuffer"
--- #--------------------------------------------------------------------------
type: enum
desc: "Function attributes"
analogue:
    - "**CUfunction_attribute**"
name: $x_function_attribute_t
etors:
    - name: $X_FUNCTION_ATTR_MAX_REGS_USED
      value: "0"
      desc: "Maximum device registers used for this function"
    - name: $X_FUNCTION_ATTR_MAX_THREADS_PER_GROUP
      desc: "Maximum threads required for this function"
    - name: $X_FUNCTION_ATTR_MAX_SHARED_MEM_SIZE
      desc: "Maximum shared memory required for this function"
--- #--------------------------------------------------------------------------
type: function
desc: "Query a function attribute."
name: $xQueryFunctionAttribute
analogue:
    - "**cuFuncGetAttribute**"
params:
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
    - type: "$x_function_attribute_t"
      name: attr
      desc: "[in] attribute to query"
    - type: "uint32_t*"
      name: pValue
      desc: "[out] returned attribute value"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hFunction"
        - "invalid value for attr"
        - "null ptr for pValue"
--- #--------------------------------------------------------------------------
type: function
desc: "Dispatch function to queue."
name: $xDispatchFunction
analogue:
    - "**cuLaunchKernel**"
params:
    - type: "$x_command_queue_handle_t"
      name: hCommandQueue
      desc: "[in] handle of the command queue"
    - type: "$x_function_handle_t"
      name: hFunction
      desc: "[in] handle of the function object"
    - type: "void*"
      name: pFunctionArgsBuffer
      desc: "[in] pointer to function arguments buffer."
    - type: "uint32_t"
      name: groupCountX
      desc: "[in] width of dispatches in X dimension"
    - type: "uint32_t"
      name: groupCountY
      desc: "[in] width of dispatches in Y dimension"
    - type: "uint32_t"
      name: groupCountZ
      desc: "[in] width of dispatches in Z dimension"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hCommandQueue"
        - "invalid handle for hFunction"
        - "null ptr for function arguments buffer"
        - "invalid group count range for dispatch"