[
    {
        "header": {
            "desc": "Intel $OneApi Level-Zero Experimental API common types",
            "includes": [],
            "ordinal": "0",
            "type": "header"
        },
        "name": "common",
        "objects": [
            {
                "alias": "$x_command_list_handle_t",
                "class": "$eCommandList",
                "desc": "Handle of command list object",
                "hash": null,
                "name": "$e_command_list_handle_t",
                "type": "handle"
            },
            {
                "class": "$eCommandGraph",
                "desc": "Handle of driver's command graph object",
                "hash": null,
                "name": "$e_command_graph_handle_t",
                "type": "handle"
            }
        ]
    },
    {
        "header": {
            "desc": "Intel $OneApi Level-Zero APIs",
            "includes": [],
            "ordinal": "0",
            "type": "header"
        },
        "name": "driver",
        "objects": [
            {
                "analogue": [
                    "**cuInit**"
                ],
                "class": "$e",
                "decl": "static",
                "desc": "Initialize the $OneApi driver and must be called before any other API function.",
                "details": [
                    "If this function is not called then all other functions will return $X_RESULT_ERROR_UNINITIALIZED.",
                    "Only one instance of a driver per process will be initialized.",
                    "This function is thread-safe for scenarios where multiple libraries may initialize the driver simultaneously."
                ],
                "hash": "a6ba2d4723ac05a1177cf58fa2580279192a55c80b88e824fcfcf182e065ef95",
                "name": "Init",
                "ordinal": "0",
                "params": [
                    {
                        "desc": "[in] initialization flags",
                        "name": "flags",
                        "type": "$x_init_flag_t"
                    }
                ],
                "returns": [
                    {
                        "$X_RESULT_ERROR_INVALID_ARGUMENT": [
                            "invalid value for flags"
                        ]
                    },
                    "$X_RESULT_ERROR_OUT_OF_HOST_MEMORY"
                ],
                "type": "function"
            }
        ]
    },
    {
        "header": {
            "desc": "Intel $OneApi Level-Zero Experimental APIs for Command List",
            "includes": [],
            "ordinal": "1",
            "type": "header"
        },
        "name": "cmdlist",
        "objects": [
            {
                "class": "$eCommandList",
                "desc": "Reserve a section of contiguous command buffer space within the command list.",
                "details": [
                    "The pointer returned is valid for both Host and device access.",
                    "The application may **not** call this function from simultaneous threads with the same command list handle.",
                    "The implementation of this function should be lock-free."
                ],
                "hash": "a9f88588b8b5f0d79e0d42539cd0fe513030130adb6ee97a2c6692034d36dd7f",
                "name": "ReserveSpace",
                "params": [
                    {
                        "desc": "[in] handle of the command list",
                        "name": "hCommandList",
                        "type": "$e_command_list_handle_t"
                    },
                    {
                        "desc": "[in] size (in bytes) to reserve",
                        "name": "size",
                        "type": "size_t"
                    },
                    {
                        "desc": "[out] pointer to command buffer space reserved",
                        "name": "ptr",
                        "type": "void**"
                    }
                ],
                "returns": [
                    {
                        "$X_RESULT_ERROR_INVALID_ARGUMENT": [
                            "0 for size"
                        ]
                    }
                ],
                "type": "function"
            },
            {
                "base": "$xCommandList",
                "desc": "C++ wrapper for command list",
                "hash": null,
                "name": "$eCommandList",
                "type": "class"
            }
        ]
    },
    {
        "header": {
            "desc": "Intel $OneApi Level-Zero Experimental APIs for CommandGraph",
            "includes": [],
            "ordinal": "9999",
            "type": "header"
        },
        "name": "cmdgraph",
        "objects": [
            {
                "class": "$eCommandGraph",
                "desc": "API version of $e_command_graph_desc_t",
                "etors": [
                    {
                        "desc": "version 1.0",
                        "name": "$E_COMMAND_GRAPH_DESC_VERSION_CURRENT",
                        "value": "$X_MAKE_VERSION( 1, 0 )"
                    }
                ],
                "hash": null,
                "name": "$e_command_graph_desc_version_t",
                "type": "enum"
            },
            {
                "class": "$eCommandGraph",
                "desc": "Supported command graph creation flags",
                "etors": [
                    {
                        "desc": "default behavior",
                        "name": "$E_COMMAND_GRAPH_FLAG_NONE",
                        "value": "0"
                    }
                ],
                "hash": null,
                "name": "$e_command_graph_flag_t",
                "type": "enum"
            },
            {
                "class": "$eCommandGraph",
                "desc": "CommandGraph descriptor",
                "hash": null,
                "members": [
                    {
                        "desc": "[in] $E_COMMAND_GRAPH_DESC_VERSION_CURRENT",
                        "init": "$E_COMMAND_GRAPH_DESC_VERSION_CURRENT",
                        "name": "version",
                        "type": "$e_command_graph_desc_version_t"
                    },
                    {
                        "desc": "[in] creation flags",
                        "init": "$E_COMMAND_GRAPH_FLAG_NONE",
                        "name": "flags",
                        "type": "$e_command_graph_flag_t"
                    }
                ],
                "name": "$e_command_graph_desc_t",
                "type": "struct"
            },
            {
                "class": "$eCommandGraph",
                "decl": "static",
                "desc": "Creates a command graph on the device for submitting commands to any command queue.",
                "details": [
                    "The application may call this function from simultaneous threads.",
                    "The implementation of this function should be lock-free."
                ],
                "hash": "55706cef8dab1ae47486f5a73f2ab1a51608fda918802e59405b72947ead78d1",
                "name": "Create",
                "params": [
                    {
                        "desc": "[in] handle of the device object",
                        "name": "hDevice",
                        "type": "$x_device_handle_t"
                    },
                    {
                        "desc": "[in] pointer to command graph descriptor",
                        "name": "desc",
                        "type": "const $e_command_graph_desc_t*"
                    },
                    {
                        "desc": "[out] pointer to handle of command graph object created",
                        "name": "phCommandGraph",
                        "type": "$e_command_graph_handle_t*"
                    }
                ],
                "returns": [
                    "$X_RESULT_ERROR_OUT_OF_HOST_MEMORY",
                    "$X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY"
                ],
                "type": "function"
            },
            {
                "class": "$eCommandGraph",
                "decl": "static",
                "desc": "Destroys a command graph.",
                "details": [
                    "The implementation of this function will immediately free all Host allocations associated with this command graph.",
                    "The application may **not** call this function from simultaneous threads with the same command graph handle.",
                    "The implementation of this function should be lock-free."
                ],
                "hash": "e0bea645a696833b7bd0c6309bc22c61924679e43b7c9fcb735ea933017a7e63",
                "name": "Destroy",
                "params": [
                    {
                        "desc": "[in][release] handle of command graph object to destroy",
                        "name": "hCommandGraph",
                        "type": "$e_command_graph_handle_t"
                    }
                ],
                "type": "function"
            },
            {
                "class": "$eCommandGraph",
                "desc": "Closes a command graph; ready to be executed by a command queue.",
                "details": [
                    "The command graph will optimize the execution order of the command lists.",
                    "A command list may **not** be reset after the command graph is closed.",
                    "The application may **not** call this function from simultaneous threads with the same command graph handle.",
                    "The implementation of this function should be lock-free."
                ],
                "hash": "47dc8a80e55a6913d464b296d07a2776ef5511a63b1e29bd9532022febe693fe",
                "name": "Close",
                "params": [
                    {
                        "desc": "[in] handle of command graph object to close",
                        "name": "hCommandGraph",
                        "type": "$e_command_graph_handle_t"
                    }
                ],
                "type": "function"
            },
            {
                "desc": "C++ wrapper for command graph",
                "hash": null,
                "members": [
                    {
                        "desc": "handle of command graph object",
                        "init": "nullptr",
                        "name": "handle",
                        "type": "$e_command_graph_handle_t"
                    },
                    {
                        "desc": "[in] pointer to owner object",
                        "name": "pDevice",
                        "type": "$xDevice*"
                    },
                    {
                        "desc": "[in] descriptor of the command graph object",
                        "name": "desc",
                        "type": "$e_command_graph_desc_t"
                    }
                ],
                "name": "$eCommandGraph",
                "owner": "$xDevice",
                "type": "class"
            }
        ]
    }
]