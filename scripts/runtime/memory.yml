--- #--------------------------------------------------------------------------
type: header
desc: "Intel $Xx Runtime APIs for Memory"
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates memory that is shared between the host and one or more devices"
name: $xSharedMemAlloc
details:
    - "Shared allocations share ownership between the host and one or more devices.
      @todo Comprehend multi-tile."
analogue:
    - "**cudaMallocManaged**"
params:
    - type: "const $x_context_handle_t"
      name: hContext
      desc: "[in] handle of the context"
    - type: "const $x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: uint32_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "void**"
      name: ptr
      desc: "[out] pointer to shared allocation"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hContext"
        - "invalid handle for hDevice"
        - "unsupported allocation size"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates memory specific to a device"
name: $xMemAlloc
details:
    - "A device allocation is owned by a specific device.
      In general, a device allocation may only be accessed by the device that owns it."
analogue:
    - "**cudaMalloc**"
params:
    - type: "const $x_context_handle_t"
      name: hContext
      desc: "[in] handle of the context"
    - type: "const $x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: uint32_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "void**"
      name: ptr
      desc: "[out] pointer to device allocation"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hContext"
        - "invalid handle for hDevice"
        - "unsupported allocation size"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported host allocation flags"
name: $x_host_mem_alloc_flags_t
etors:
    - name: $X_HOST_MEM_ALLOC_DEFAULT
      value: "0"
      desc: "implicit default behavior; uses driver-based heuristics"
    - name: $X_HOST_MEM_ALLOC_WRITE_COMBINED
      value: "$X_BIT( 0 )"
      desc: "allocate the host memory as write-combined (WC)"
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates host memory"
name: $xHostMemAlloc
details:
    - "A host allocation is owned by the host process.
      Host allocations are accessible by the host and all devices.
      Host allocations are frequently used a staging areas to transfer data to or from devices."
analogue:
    - "**cudaHostAlloc**"
params:
    - type: "const $x_context_handle_t"
      name: hContext
      desc: "[in] handle of the context"
    - type: "$x_host_mem_alloc_flags_t"
      name: flags
      desc: "[in] flags controlling specifying additional allocation controls"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate"
    - type: uint32_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation"
    - type: "void**"
      name: ptr
      desc: "[out] pointer to host allocation"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hContext"
        - "invalid handle for hDevice"
        - "unsupported allocation size"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Frees allocated host memory, device memory, or shared memory"
name: $xMemFree
details:
    - "@todo Should the pointer passed to the $xMemFree function be const or non-const?"
analogue:
    - "**cudaFree**"
    - "**cudaFreeHost**"
params:
    - type: "const $x_context_handle_t"
      name: hContext
      desc: "[in] handle of the context"
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to memory to free"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hContext"
        - "invalid pointer"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported memory advice hints"
name: $x_memory_advice_t
etors:
    - name: $X_MEMORY_ADVICE_NONE
      value: "0"
      desc: "@todo"
--- #--------------------------------------------------------------------------
type: function
desc: "Provides advice about the use of a shared memory range"
name: $xMemAdvise
details:
    - "Memory advice can be used to override driver heuristics to explicitly control shared memory behavior.
      @todo likely will snap to page boundaries
      @todo which memory advise hints could/should we support?"
analogue:
    - "**cudaMemAdvise**"
params:
    - type: "const $x_context_handle_t"
      name: hContext
      desc: "[in] handle of the context"
    - type: "const $x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device to apply the advice to"
    - type: "const void*"
      name: ptr
      desc: "[in] Pointer to the start of the memory range"
    - type: size_t
      name: size
      desc: "[in] Size in bytes of the memory range"
    - type: $x_memory_advice_t
      name: advice
      desc: "[in] Memory advice for the memory range"
returns:
    - $X_RESULT_ERROR_INVALID_PARAMETER:
        - "invalid handle for hContext"
        - "invalid handle for hDevice"
        - "invalid pointer"
        - "invalid advice"
