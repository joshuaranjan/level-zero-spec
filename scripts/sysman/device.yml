#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Tool APIs for System Resource Management (Sysman) - Device management"
ordinal: "2"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of Sysman"
class: $sDevice
name: $s_version_t
etors:
    - name: $S_VERSION_1_0
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum number of characters in string properties."
name: $S_STRING_PROPERTY_SIZE
value: "64"
--- #--------------------------------------------------------------------------
type: enum
desc: "Types of accelerator engines"
class: $sDevice
name: $s_engine_type_t
etors:
    - name: $S_ENGINE_TYPE_OTHER
      value: "0"
      desc: "Undefined types of accelerators."
    - name: $S_ENGINE_TYPE_COMPUTE
      desc: "Engines that process compute kernels."
    - name: $S_ENGINE_TYPE_3D
      desc: "Engines that process 3D content"
    - name: $S_ENGINE_TYPE_MEDIA
      desc: "Engines that process media workloads"
    - name: $S_ENGINE_TYPE_DMA
      desc: "Engines that copy blocks of data"
--- #--------------------------------------------------------------------------
type: enum
desc: "Device repair status"
class: $sDevice
name: $s_repair_status_t
etors:
    - name: $S_REPAIR_STATUS_UNSUPPORTED
      value: "0"
      desc: "The device does not support in-field repairs."
    - name: $S_REPAIR_STATUS_NOT_PERFORMED
      desc: "The device has never been repaired."
    - name: $S_REPAIR_STATUS_PERFORMED
      desc: "The device has been repaired."
--- #--------------------------------------------------------------------------
type: enum
desc: "Device reset reasons"
class: $sDevice
name: $s_reset_reasons_t
etors:
    - name: $S_RESET_REASONS_NONE
      value: "0"
      desc: "The device does not need to be reset"
    - name: $S_RESET_REASONS_WEDGED
      value: "$X_BIT( 0 )"
      desc: "The device needs to be reset because one or more parts of the hardware is wedged"
    - name: $S_RESET_REASONS_REPAIR
      value: "$X_BIT( 1 )"
      desc: "The device needs to be reset in order to complete in-field repairs"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device state"
class: $sDevice
name: $s_device_state_t
members:
    - type: uint32_t
      name: reset
      desc: "[out] Indicates if the device needs to be reset and for what reasons (bitfield of $s_reset_reasons_t)"
    - type: $s_repair_status_t
      name: repaired
      desc: "[out] Indicates if the device has been repaired"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device properties"
class: $sDevice
name: $s_device_properties_t
members:
    - type: $x_device_properties_t
      name: core
      desc: "[out] Core device properties"
    - type: uint32_t
      name: "numSubdevices"
      desc: "[out] Number of sub-devices"
    - type: int8_t
      name: "serialNumber[$S_STRING_PROPERTY_SIZE]"
      desc: "[out] Manufacturing serial number (NULL terminated string value)"
    - type: int8_t
      name: "boardNumber[$S_STRING_PROPERTY_SIZE]"
      desc: "[out] Manufacturing board number (NULL terminated string value)"
    - type: int8_t
      name: "brandName[$S_STRING_PROPERTY_SIZE]"
      desc: "[out] Brand name of the device (NULL terminated string value)"
    - type: int8_t
      name: "modelName[$S_STRING_PROPERTY_SIZE]"
      desc: "[out] Model name of the device (NULL terminated string value)"
    - type: int8_t
      name: "vendorName[$S_STRING_PROPERTY_SIZE]"
      desc: "[out] Vendor name of the device (NULL terminated string value)"
    - type: int8_t
      name: "driverVersion[$S_STRING_PROPERTY_SIZE]"
      desc: "[out] Installed driver version (NULL terminated string value)"
--- #--------------------------------------------------------------------------
type: function
desc: "Get properties about the device"
class: $sDevice
name: GetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: $s_device_properties_t*
      name: pProperties
      desc: "[in,out] Structure that will contain information about the device."
--- #--------------------------------------------------------------------------
type: function
desc: "Get information about the state of the device - if a reset is required, reasons for the reset and if the device has been repaired"
class: $sDevice
name: GetState
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: $s_device_state_t*
      name: pState
      desc: "[in,out] Structure that will contain information about the device."
--- #--------------------------------------------------------------------------
type: function
desc: "Reset device"
class: $sDevice
name: Reset
details:
    - "Performs a PCI bus reset of the device. This will result in all current device state being lost."
    - "All applications using the device should be stopped before calling this function."
    - "If the force argument is specified, all applications using the device will be forcibly killed."
    - "The function will block until the device has restarted or a timeout occurred waiting for the reset to complete."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle for the device"
    - type: $x_bool_t
      name: force
      desc: "[in] If set to true, all applications that are currently using the device will be forcibly killed."
returns:
    - $X_RESULT_ERROR_INSUFFICIENT_PERMISSIONS:
        - "User does not have permissions to perform this operation."
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
        - "Reset cannot be performed because applications are using this device."
    - $X_RESULT_ERROR_UNKNOWN
        - "There were problems unloading the device driver, performing a bus reset or reloading the device driver."

--- #--------------------------------------------------------------------------
type: struct
desc: "Contains information about a process that has an open connection with this device"
class: $sDevice
name: $s_process_state_t
details:
    - "The application can use the process ID to query the OS for the owner and the path to the executable."
members:
    - type: uint32_t
      name: "processId"
      desc: "[out] Host OS process ID."
    - type: int64_t
      name: "memSize"
      desc: "[out] Device memory size in bytes allocated by this process (may not necessarily be resident on the device at the time of reading)."
    - type: uint64_t
      name: "engines"
      desc: "[out] Bitfield of accelerator engines being used by this process (or 1<<$s_engine_type_t together)."
--- #--------------------------------------------------------------------------
type: function
desc: "Get information about host processes using the device"
class: $sDevice
name: ProcessesGetState
details:
    - "The number of processes connected to the device is dynamic. This means that between a call to determine the correct value of pCount and the subsequent call, the number of processes may have increased. It is recommended that a large array be passed in so as to avoid receiving the error $X_RESULT_ERROR_INVALID_SIZE."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle for the device"
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] pointer to the number of processes.
            if count is zero, then the driver will update the value with the total number of processes currently using the device.
            if count is non-zero but less than the number of processes, the driver will set to the number of processes currently using the device and return the error $X_RESULT_ERROR_INVALID_SIZE.
            if count is larger than the number of processes, then the driver will update the value with the correct number of processes that are returned.
    - type: "$s_process_state_t*"
      name: pProcesses
      desc: "[in,out][optional][range(0, *pCount)] array of process information, one for each process currently using the device"
returns:
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "The provided value of pCount is not big enough to store information about all the processes currently attached to the device."

--- #--------------------------------------------------------------------------
type: struct
desc: "PCI address"
class: $sDevice
name: $s_pci_address_t
members:
    - type: uint32_t
      name: "domain"
      desc: "[out] BDF domain"
    - type: uint32_t
      name: "bus"
      desc: "[out] BDF bus"
    - type: uint32_t
      name: "device"
      desc: "[out] BDF device"
    - type: uint32_t
      name: "function"
      desc: "[out] BDF function"
--- #--------------------------------------------------------------------------
type: struct
desc: "PCI speed"
class: $sDevice
name: $s_pci_speed_t
members:
    - type: uint32_t
      name: "gen"
      desc: "[out] The link generation"
    - type: uint32_t
      name: "width"
      desc: "[out] The number of lanes"
    - type: uint64_t
      name: "maxBandwidth"
      desc: "[out] The maximum bandwidth in bytes/sec"
--- #--------------------------------------------------------------------------
type: struct
desc: "Static PCI properties"
class: $sDevice
name: $s_pci_properties_t
members:
    - type: $s_pci_address_t
      name: "address"
      desc: "[out] The BDF address"
    - type: $s_pci_speed_t
      name: "maxSpeed"
      desc: "[out] Fastest port configuration supported by the device."
--- #--------------------------------------------------------------------------
type: enum
desc: "PCI link status"
class: $sDevice
name: $s_pci_link_status_t
etors:
    - name: $S_PCI_LINK_STATUS_GREEN
      value: "0"
      desc: "The link is up and operating as expected"
    - name: $S_PCI_LINK_STATUS_YELLOW
      desc: "The link is up but has quality and/or bandwidth degradation"
    - name: $S_PCI_LINK_STATUS_RED
      desc: "The link has stability issues and preventing workloads making forward progress"
--- #--------------------------------------------------------------------------
type: enum
desc: "PCI link quality degradation reasons"
class: $sDevice
name: $s_pci_link_qual_issues_t
etors:
    - name: $S_PCI_LINK_QUAL_ISSUES_NONE
      value: "0"
      desc: "There are no quality issues with the link at this time"
    - name: $S_PCI_LINK_QUAL_ISSUES_REPLAYS
      value: "$X_BIT( 0 )"
      desc: "An significant number of replays are occurring"
    - name: $S_PCI_LINK_QUAL_ISSUES_SPEED
      value: "$X_BIT( 1 )"
      desc: "There is a degradation in the maximum bandwidth of the link"
--- #--------------------------------------------------------------------------
type: enum
desc: "PCI link stability issues"
class: $sDevice
name: $s_pci_link_stab_issues_t
etors:
    - name: $S_PCI_LINK_STAB_ISSUES_NONE
      value: "0"
      desc: "There are no connection stability issues at this time"
    - name: $S_PCI_LINK_STAB_ISSUES_RETRAINING
      value: "$X_BIT( 0 )"
      desc: "Link retraining has occurred to deal with quality issues"
--- #--------------------------------------------------------------------------
type: struct
desc: "Dynamic PCI state"
class: $sDevice
name: $s_pci_state_t
members:
    - type: $s_pci_link_status_t
      name: "status"
      desc: "[out] The current status of the port"
    - type: $s_pci_link_qual_issues_t
      name: "qualityIssues"
      desc: "[out] If status is $S_PCI_LINK_STATUS_YELLOW, this gives a bitfield of quality issues that have been detected"
    - type: $s_pci_link_stab_issues_t
      name: "stabilityIssues"
      desc: "[out] If status is $S_PCI_LINK_STATUS_RED, this gives a bitfield of reasons for the connection instability"
    - type: $s_pci_speed_t
      name: "speed"
      desc: "[out] The current port configure speed"
--- #--------------------------------------------------------------------------
type: enum
desc: "PCI bar types"
class: $sDevice
name: $s_pci_bar_type_t
etors:
    - name: $S_PCI_BAR_TYPE_MMIO
      value: "0"
      desc: "MMIO registers"
    - name: $S_PCI_BAR_TYPE_ROM
      desc: "ROM aperture"
    - name: $S_PCI_BAR_TYPE_MEM
      desc: "Device memory"
--- #--------------------------------------------------------------------------
type: struct
desc: "Properties of a pci bar"
class: $sDevice
name: $s_pci_bar_properties_t
members:
    - type: $s_pci_bar_type_t
      name: "type"
      desc: "[out] The type of bar"
    - type: uint32_t
      name: "index"
      desc: "[out] The index of the bar"
    - type: uint64_t
      name: "base"
      desc: "[out] Base address of the bar."
    - type: uint64_t
      name: "size"
      desc: "[out] Size of the bar."
--- #--------------------------------------------------------------------------
type: struct
desc: "PCI stats counters"
class: $sDevice
name: $s_pci_stats_t
details:
    - "Percent throughput is calculated by taking two snapshots (s1, s2) and using the equation: %bw = 10^6 * ((s2.rxCounter - s1.rxCounter) + (s2.txCounter - s1.txCounter)) / (s2.maxBandwidth * (s2.timestamp - s1.timestamp))"
    - "Percent replays is calculated by taking two snapshots (s1, s2) and using the equation: %replay = 10^6 * (s2.replayCounter - s1.replayCounter) / (s2.maxBandwidth * (s2.timestamp - s1.timestamp))"
members:
    - type: uint64_t
      name: "timestamp"
      desc: |
            [out] Monotonic timestamp counter in microseconds when the measurement was made.
            No assumption should be made about the absolute value of the timestamp.
            It should only be used to calculate delta time between two snapshots of the same structure.
            Never take the delta of this timestamp with the timestamp from a different structure.
    - type: uint64_t
      name: "replayCounter"
      desc: "[out] Monotonic counter for the number of replay packets"
    - type: uint64_t
      name: "packetCounter"
      desc: "[out] Monotonic counter for the number of packets"
    - type: uint64_t
      name: "rxCounter"
      desc: "[out] Monotonic counter for the number of bytes received"
    - type: uint64_t
      name: "txCounter"
      desc: "[out] Monotonic counter for the number of bytes transmitted (including replays)"
    - type: $s_pci_speed_t
      name: "speed"
      desc: "[out] The current speed of the link"
--- #--------------------------------------------------------------------------
type: function
desc: "Get PCI properties - address, max speed"
class: $sDevice
name: PciGetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: $s_pci_properties_t*
      name: pProperties
      desc: "[in,out] Will contain the PCI properties."
--- #--------------------------------------------------------------------------
type: function
desc: "Get current PCI state - current speed"
class: $sDevice
name: PciGetState
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: $s_pci_state_t*
      name: pState
      desc: "[in,out] Will contain the PCI properties."
--- #--------------------------------------------------------------------------
type: function
desc: "Get information about each configured bar"
class: $sDevice
name: PciGetBars
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] pointer to the number of PCI bars.
            if count is zero, then the driver will update the value with the total number of bars.
            if count is non-zero, then driver will only retrieve that number of bars.
            if count is larger than the number of bar, then the driver will update the value with the correct number of bars that are returned.
    - type: "$s_pci_bar_properties_t*"
      name: pProperties
      desc: "[in,out][optional][range(0, *pCount)] array of bar properties"
--- #--------------------------------------------------------------------------
type: function
desc: "Get PCI stats - bandwidth, number of packets, number of replays"
class: $sDevice
name: PciGetStats
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: $s_pci_stats_t*
      name: pStats
      desc: "[in,out] Will contain a snapshot of the latest stats."
returns:
    - $X_RESULT_ERROR_INSUFFICIENT_PERMISSIONS:
        - "User does not have permissions to query this telemetry."

--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for driver instance"
name: $sDriver
base: $xDriver
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for device"
name: $sDevice
base: $xDevice
