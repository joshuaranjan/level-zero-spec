#
# Copyright (C) 2024 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Sysman Extension APIs for Virtual Function Management Properties"
version: "1.9"
--- #--------------------------------------------------------------------------
type: macro
desc: "Virtual Function Management Extension Name"
version: "1.9"
name: $S_VIRTUAL_FUNCTION_MANAGEMENT_EXP_NAME
value: '"$XS_experimental_virtual_function_management"'
--- #--------------------------------------------------------------------------
type: enum
desc: "Virtual Function Management Extension Version(s)"
version: "1.9"
name: $s_vf_management_exp_version_t
etors:
    - name: "1_0"
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0 (deprecated)"
    - name: "1_1"
      value: "$X_MAKE_VERSION( 1, 1 )"
      desc: "version 1.1"
--- #--------------------------------------------------------------------------
type: struct
desc: "Virtual function management capabilities"
version: "1.10"
class: $sVFManagement
name: $s_vf_exp_capabilities_t
base: $s_base_properties_t
members:
    - type: $s_pci_address_t
      name: "address"
      desc: "[out] Virtual function BDF address"
    - type: uint32_t
      name: "vfDeviceMemSize"
      desc: "[out] Virtual function memory size in bytes"
    - type: uint32_t
      name: "vfID"
      desc: "[out] Virtual Function ID"
--- #--------------------------------------------------------------------------
type: struct
desc: "Provides memory utilization values for a virtual function"
version: "1.10"
class: $sVFManagement
name: $s_vf_util_mem_exp_t
base: $s_base_state_t
members:
    - type: $s_mem_loc_t
      name: "vfMemLocation"
      desc: "[out] Location of this memory (system, device)"
    - type: uint64_t
      name: "vfMemUtilized"
      desc: "[out] Free memory size in bytes."
--- #--------------------------------------------------------------------------
type: struct
desc: "Provides engine utilization values for a virtual function"
details:
    - "Percent utilization is calculated by taking two snapshots (s1, s2) and using the equation: %util = (s2.activeCounterValue - s1.activeCounterValue) / (s2.samplingCounterValue - s1.samplingCounterValue)"
version: "1.9"
class: $sVFManagement
name: $s_vf_util_engine_exp_t
base: $s_base_state_t
members:
    - type: $s_engine_group_t
      name: "vfEngineType"
      desc: "[out] The engine group."
    - type: uint64_t
      name: "activeCounterValue"
      desc: "[out] Represents active counter."
    - type: uint64_t
      name: "samplingCounterValue"
      desc: "[out] Represents counter value when activeCounterValue was sampled. Refer to the formulae above for calculating the utilization percent"
--- #--------------------------------------------------------------------------
type: function
desc: "Get handle of virtual function modules"
version: "1.9"
class: $sDevice
name: EnumEnabledVFExp
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] pointer to the number of components of this type.
            if count is zero, then the driver shall update the value with the total number of components of this type that are available.
            if count is greater than the number of components of this type that are available, then the driver shall update the value with the correct number of components.
    - type: "$s_vf_handle_t*"
      name: phVFhandle
      desc: |
            [in,out][optional][range(0, *pCount)] array of handle of components of this type.
            if count is less than the number of components of this type that are available, then the driver shall only retrieve that number of component handles.
--- #--------------------------------------------------------------------------
type: function
desc: "Get virtual function management capabilities"
version: "1.10"
class: $sVFManagement
name: GetVFCapabilitiesExp
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_vf_handle_t
      name: hVFhandle
      desc: "[in] Sysman handle for the VF component."
    - type: $s_vf_exp_capabilities_t*
      name: pCapability
      desc: "[in,out] Will contain VF capability."
--- #--------------------------------------------------------------------------
type: function
desc: "Get memory activity stats for each available memory types associated with Virtual Function (VF)"
version: "1.9"
class: $sVFManagement
name: GetVFMemoryUtilizationExp
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "If VF is disable/pause/not active, utilization will give zero value."
params:
    - type: $s_vf_handle_t
      name: hVFhandle
      desc: "[in] Sysman handle for the component."
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] Pointer to the number of VF memory stats descriptors.
              - if count is zero, the driver shall update the value with the total number of memory stats available.
              - if count is greater than the total number of memory stats available, the driver shall update the value with the correct number of memory stats available.
    - type: $s_vf_util_mem_exp_t*
      name: pMemUtil
      desc: |
            [in,out][optional][range(0, *pCount)] array of memory group activity counters.
              - if count is less than the total number of memory stats available, then driver shall only retrieve that number of stats.
              - the implementation shall populate the vector pCount-1 number of VF memory stats.
--- #--------------------------------------------------------------------------
type: function
desc: "Get engine activity stats for each available engine group associated with Virtual Function (VF)"
version: "1.9"
class: $sVFManagement
name: GetVFEngineUtilizationExp
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
    - "If VF is disable/pause/not active, utilization will give zero value."
params:
    - type: $s_vf_handle_t
      name: hVFhandle
      desc: "[in] Sysman handle for the component."
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] Pointer to the number of VF engine stats descriptors.
              - if count is zero, the driver shall update the value with the total number of engine stats available.
              - if count is greater than the total number of engine stats available, the driver shall update the value with the correct number of engine stats available.
    - type: $s_vf_util_engine_exp_t*
      name: pEngineUtil
      desc: |
            [in,out][optional][range(0, *pCount)] array of engine group activity counters.
              - if count is less than the total number of engine stats available, then driver shall only retrieve that number of stats.
              - the implementation shall populate the vector pCount-1 number of VF engine stats.
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for a Sysman virtual function management  group"
version: "1.9"
name: $sVFManagement
owner: $sDevice
members:
    - type: $s_vf_handle_t
      name: handle
      desc: "[in] handle of Sysman virtual function object"
      init: nullptr
    - type: $sDevice*
      name: pDevice
      desc: "[in] pointer to owner object"