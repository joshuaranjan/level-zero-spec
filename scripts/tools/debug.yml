#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Tool APIs for Program Debug"
ordinal: "5"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device debug properties."
class: $tDevice
name: $t_device_debug_properties_t
base: $x_base_properties_t
members:
    - type: "bool"
      name: supports_attach
      desc: "[out] the device node supports attaching"
--- #--------------------------------------------------------------------------
type: function
desc: "Get device debug properties."
class: $tDevice
name: GetDebugProperties
params:
    - type: $t_device_handle_t
      name: hDevice
      desc: "[in] device handle"
    - type: $t_device_debug_properties_t
      name: properties
      desc: "[out] the debug properties of this device"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "an invalid device handle has been supplied"
--- #--------------------------------------------------------------------------
type: struct
desc: "Debug configuration"
class: $tDebug
name: $t_debug_config_t
members:
    - type: "uint32_t"
      name: pid
      desc: "[in] the host process identifier"
--- #--------------------------------------------------------------------------
type: function
desc: "Attach to a device."
class: $tDebug
name: Attach
decl: static
params:
    - type: $t_device_handle_t
      name: hDevice
      desc: "[in] device handle"
    - type: "const $t_debug_config_t*"
      name: config
      desc: "[in] the debug configuration"
    - type: "$t_debug_session_handle_t*"
      name: hDebug
      desc: "[out] debug session handle"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "an invalid device handle has been supplied"
        - "an invalid configuration has been supplied"
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "attaching to this device is not supported"
    - $X_RESULT_ERROR_INSUFFICIENT_PERMISSIONS:
        - "caller does not have sufficient permissions"
    - $X_RESULT_ERROR_NOT_AVAILABLE:
        - "a debugger is already attached"
--- #--------------------------------------------------------------------------
type: function
desc: "Close a debug session."
class: $tDebug
name: Detach
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in][release] debug session handle"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "an invalid debug handle has been supplied"
--- #--------------------------------------------------------------------------
type: enum
desc: "Debug event flags."
class: $tDebug
name: $t_debug_event_flags_t
etors:
    - name: NEED_ACK
      desc: "The event needs to be acknowledged by calling $tDebugAcknowledgeEvent()."
--- #--------------------------------------------------------------------------
type: enum
desc: "Debug event types."
class: $tDebug
name: $t_debug_event_type_t
etors:
    - name: INVALID
      desc: "The event is invalid"
      value: "0"
    - name: DETACHED
      desc: "The tool was detached"
    - name: PROCESS_ENTRY
      desc: "The debuggee process created command queues on the device"
    - name: PROCESS_EXIT
      desc: "The debuggee process destroyed all command queues on the device"
    - name: MODULE_LOAD
      desc: "An in-memory module was loaded onto the device"
    - name: MODULE_UNLOAD
      desc: "An in-memory module is about to get unloaded from the device"
    - name: THREAD_STOPPED
      desc: "The thread stopped due to a device exception"
    - name: THREAD_UNAVAILABLE
      desc: "The thread is not available to be stopped"
--- #--------------------------------------------------------------------------
type: enum
desc: "Debug detach reason."
class: $tDebug
name: $t_debug_detach_reason_t
etors:
    - name: INVALID
      desc: "The detach reason is not valid"
      value: "0"
    - name: HOST_EXIT
      desc: "The host process exited"
--- #--------------------------------------------------------------------------
type: struct
desc: "Event information for $T_DEBUG_EVENT_DETACHED"
class: $tDebug
name: $t_debug_event_info_detached_t
members:
    - type: "uint8_t"
      name: reason
      desc: "[out] the detach reason"
--- #--------------------------------------------------------------------------
type: struct
desc: "Event information for $T_DEBUG_EVENT_MODULE_LOAD/UNLOAD"
class: $tDebug
name: $t_debug_event_info_module_t
members:
    - type: $t_module_debug_info_format_t
      name: format
      desc: "[out] the module format"
    - type: "uint64_t"
      name: moduleBegin
      desc: "[out] the begin address of the in-memory module"
    - type: "uint64_t"
      name: moduleEnd
      desc: "[out] the end address of the in-memory module"
    - type: "uint64_t"
      name: load
      desc: "[out] the load address of the module on the device"
--- #--------------------------------------------------------------------------
type: struct
desc: "Event information for $T_DEBUG_EVENT_THREAD_STOPPED/UNAVAILABLE"
class: $tDebug
name: $t_debug_event_info_thread_stopped_t
members:
    - type: $x_device_thread_t
      name: thread
      desc: "[out] the stopped/unavailable thread"
--- #--------------------------------------------------------------------------
type: union
desc: "Event type specific information"
class: $tDebug
name: $t_debug_event_info_t
members:
    - type: $t_debug_event_info_detached_t
      name: detached
      desc: "[out] type == $T_DEBUG_EVENT_DETACHED"
    - type: $t_debug_event_info_module_t
      name: module
      desc: "[out] type == $T_DEBUG_EVENT_MODULE_LOAD/UNLOAD"
    - type: $t_debug_event_info_thread_stopped_t
      name: thread
      desc: "[out] type == $T_DEBUG_EVENT_THREAD_STOPPED/UNAVAILABLE"
--- #--------------------------------------------------------------------------
type: struct
desc: "A debug event on the device."
class: $tDebug
name: $t_debug_event_t
members:
    - type: "uint8_t"
      name: type
      desc: "[out] the event type"
    - type: $t_debug_event_flags_t
      name: flags
      desc: "[out] returns 0 (none) or a combination of $t_debug_event_flag_t"
    - type: $t_debug_event_info_t
      name: info
      desc: "[out] event type specific information"
--- #--------------------------------------------------------------------------
type: function
desc: "Read the topmost debug event."
class: $tDebug
name: ReadEvent
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: "uint64_t"
      name: timeout
      desc: "[in] timeout in milliseconds (or UINT64_MAX for infinite)"
    - type: "$t_debug_event_t*"
      name: event
      desc: "[in,out] a pointer to a $t_debug_event_t."
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "an invalid debug handle or a NULL event pointer has been supplied"
    - $X_RESULT_NOT_READY:
        - "the timeout expired"
--- #--------------------------------------------------------------------------
type: function
desc: "Acknowledge a debug event."
class: $tDebug
name: AcknowledgeEvent
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: "$t_debug_event_t*"
      name: event
      desc: "[in] a pointer to a $t_debug_event_t."
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "an invalid debug handle or a NULL event pointer has been supplied"
--- #--------------------------------------------------------------------------
type: function
desc: "Interrupt device threads."
class: $tDebug
name: Interrupt
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: $x_device_thread_t
      name: thread
      desc: "[in] the thread to inerrupt"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "an invalid debug handle or thread identifier has been supplied"
        - "the thread is already stopped or unavailable"
--- #--------------------------------------------------------------------------
type: function
desc: "Resume device threads."
class: $tDebug
name: Resume
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: $x_device_thread_t
      name: thread
      desc: "[in] the thread to resume"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "an invalid debug handle or thread identifier has been supplied"
        - "the thread is already running or unavailable"
--- #--------------------------------------------------------------------------
type: enum
desc: "Memory spaces for Intel Graphics devices."
class: $tDebug
name: $t_debug_memory_space_igfx_t
etors:
    - name: DEFAULT
      desc: "default memory space (attribute may be omitted)"
      value: "0"
    - name: SLM
      desc: "shared local memory space"
--- #--------------------------------------------------------------------------
type: function
desc: "Read memory."
class: $tDebug
name: ReadMemory
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: $x_device_thread_t
      name: thread
      desc: "[in] the thread context.  The special thread 'all' can be used for accessing the default memory space, e.g. for setting breakpoints."
    - type: "int"
      name: memSpace
      desc: "[in] the (device-specific) memory space"
    - type: "uint64_t"
      name: address
      desc: "[in] the virtual address of the memory to read from"
    - type: "size_t"
      name: size
      desc: "[in] the number of bytes to read"
    - type: "void*"
      name: buffer
      desc: "[in,out] a buffer to hold a copy of the memory"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "an invalid debug handle or thread identifier has been supplied"
        - "the thread is running or unavailable"
        - "an invalid address has been supplied"
    - $X_RESULT_ERROR_NOT_AVAILABLE:
        - "the memory cannot be accessed from the supplied thread"
--- #--------------------------------------------------------------------------
type: function
desc: "Write memory."
class: $tDebug
name: WriteMemory
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: $x_device_thread_t
      name: thread
      desc: "[in] the thread context.  The special thread 'all' can be used for accessing the default memory space, e.g. for setting breakpoints."
    - type: "int"
      name: memSpace
      desc: "[in] the (device-specific) memory space"
    - type: "uint64_t"
      name: address
      desc: "[in] the virtual address of the memory to write to"
    - type: "size_t"
      name: size
      desc: "[in] the number of bytes to write"
    - type: "const void*"
      name: buffer
      desc: "[in] a buffer holding the pattern to write"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "an invalid debug handle or thread identifier has been supplied"
        - "the thread is running or unavailable"
        - "an invalid address has been supplied"
    - $X_RESULT_ERROR_NOT_AVAILABLE:
        - "the memory cannot be accessed from the supplied thread"
--- #--------------------------------------------------------------------------
type: enum
desc: "Register set types for Intel Graphics devices."
class: $tDebug
name: $t_debug_regset_igfx_t
etors:
    - name: INVALID
      desc: "An invalid register set"
      value: "0"
    - name: GRF
      desc: "The general register set"
    - name: ACC
      desc: "The accumulator register set"
    - name: ADDR
      desc: "The address register set"
    - name: FLAG
      desc: "The flags register set"
--- #--------------------------------------------------------------------------
type: struct
desc: "A register set descriptor."
class: $tDebug
name: $t_debug_regset_desc_t
base: $t_base_desc_t
members:
    - type: "uint16_t"
      name: type
      desc: "[out] the register set type type"
    - type: "uint16_t"
      name: version
      desc: "[out] the register set version"
    - type: "uint32_t"
      name: size
      desc: "[out] the size of the register set in bytes"
    - type: "uint64_t"
      name: offset
      desc: "[out] the offset into the register state area"
--- #--------------------------------------------------------------------------
type: struct
desc: "A register state descriptor."
class: $tDebug
name: $t_debug_regstate_t
members:
    - type: "uint32_t"
      name: size
      desc: "[out] the size of the register state object in bytes"
    - type: "uint8_t"
      name: headerSize
      desc: "[out] the size of the register state descriptor in bytes"
    - type: "uint8_t"
      name: secSize
      desc: "[out] the size of register set descriptors in bytes"
    - type: "uint16_t"
      name: numSec
      desc: "[out] the number of register set descriptors"
--- #--------------------------------------------------------------------------
type: function
desc: "Read register state."
class: $tDebug
name: ReadRegisters
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: $x_device_thread_t
      name: thread
      desc: "[in] the thread context"
    - type: "uint64_t"
      name: offset
      desc: "[in] the offset into the register state area"
    - type: "size_t"
      name: size
      desc: "[in] the number of bytes to read"
    - type: "void*"
      name: buffer
      desc: "[in,out] a buffer to hold a copy of the register state"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "an invalid debug handle or thread identifier has been supplied"
        - "the thread is running or unavailable"
        - "an invalid offset or size has been supplied"
--- #--------------------------------------------------------------------------
type: function
desc: "Write register state."
class: $tDebug
name: WriteRegisters
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: $x_device_thread_t
      name: thread
      desc: "[in] the thread context"
    - type: "uint64_t"
      name: offset
      desc: "[in] the offset into the register state area"
    - type: "size_t"
      name: size
      desc: "[in] the number of bytes to write"
    - type: "const void*"
      name: buffer
      desc: "[in] a buffer holding the pattern to write"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "an invalid debug handle or thread identifier has been supplied"
        - "the thread is running or unavailable"
        - "an invalid offset or size has been supplied"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for Debug API"
name: $tDebug
members:
    - type: "$t_debug_session_handle_t"
      name: handle
      desc: "[in] debug session handle"
