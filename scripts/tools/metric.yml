#
# Copyright (C) 2019 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Tool APIs for Metric"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves metric group for a device."
class: $tMetricGroup
name: Get
decl: static
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: "$t_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: uint32_t*
      name: pCount
      desc: |
            [in,out] pointer to the number of metric groups.
            if count is zero, then the driver will update the value with the total number of metric groups available.
            if count is non-zero, then driver will only retrieve that number of metric groups.
            if count is larger than the number of metric groups available, then the driver will update the value with the correct number of metric groups available.
    - type: "$t_metric_group_handle_t*"
      name: phMetricGroups
      desc: "[in,out][optional][range(0, *pCount)] array of handle of metric groups"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum metric group name string size"
name: $T_MAX_METRIC_GROUP_NAME
value: "256"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum metric group description string size"
name: $T_MAX_METRIC_GROUP_DESCRIPTION
value: "256"
--- #--------------------------------------------------------------------------
type: enum
desc: "Metric group sampling type"
class: $tMetricGroup
name: $t_metric_group_sampling_type_flags_t
etors:
    - name: EVENT_BASED
      desc: "Event based sampling"
    - name: TIME_BASED
      desc: "Time based sampling"
--- #--------------------------------------------------------------------------
type: struct
desc: "Metric group properties queried using $tMetricGroupGetProperties"
class: $tMetricGroup
name: $t_metric_group_properties_t
base: $t_base_properties_t
members:
    - type: char
      name: "name[$T_MAX_METRIC_GROUP_NAME]"
      desc: "[out] metric group name"
    - type: char
      name: "description[$T_MAX_METRIC_GROUP_DESCRIPTION]"
      desc: "[out] metric group description"
    - type: "$t_metric_group_sampling_type_flags_t"
      name: "samplingType"
      desc: |
            [out] metric group sampling type.
            returns a combination of $t_metric_group_sampling_type_flag_bits_t.
    - type: uint32_t
      name: "domain"
      desc: "[out] metric group domain number. Cannot use simultaneous metric groups from different domains."
    - type: uint32_t
      name: "maxCommandQueueGroupOrdinal"
      desc: |
            [out] streamers and queries of this metric group cannot be submitted to a command queue group with a larger ordinal value.
            See $x_command_queue_desc_t for more information on how to specify the command queue's group ordinal.
    - type: uint32_t
      name: "metricCount"
      desc: "[out] metric count belonging to this group"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves attributes of a metric group."
class: $tMetricGroup
name: GetProperties
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: "$t_metric_group_handle_t"
      name: hMetricGroup
      desc: "[in] handle of the metric group"
    - type: "$t_metric_group_properties_t*"
      name: pProperties
      desc: "[in,out] metric group properties"
--- #--------------------------------------------------------------------------
type: enum
desc: "Metric types"
class: $tMetric
name: $t_metric_type_t
etors:
    - name: DURATION
      desc: "Metric type: duration"
    - name: EVENT
      desc: "Metric type: event"
    - name: EVENT_WITH_RANGE
      desc: "Metric type: event with range"
    - name: THROUGHPUT
      desc: "Metric type: throughput"
    - name: TIMESTAMP
      desc: "Metric type: timestamp"
    - name: FLAG
      desc: "Metric type: flag"
    - name: RATIO
      desc: "Metric type: ratio"
    - name: RAW
      desc: "Metric type: raw"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported value types"
class: $t
name: $t_value_type_t
etors:
    - name: UINT32
      desc: "32-bit unsigned-integer"
    - name: UINT64
      desc: "64-bit unsigned-integer"
    - name: FLOAT32
      desc: "32-bit floating-point"
    - name: FLOAT64
      desc: "64-bit floating-point"
    - name: BOOL8
      desc: "8-bit boolean"
--- #--------------------------------------------------------------------------
type: union
desc: "Union of values"
class: $t
name: $t_value_t
members:
    - type: uint32_t
      name: "ui32"
      desc: "[out] 32-bit unsigned-integer"
    - type: uint64_t
      name: "ui64"
      desc: "[out] 32-bit unsigned-integer"
    - type: float
      name: "fp32"
      desc: "[out] 32-bit floating-point"
    - type: double
      name: "fp64"
      desc: "[out] 64-bit floating-point"
    - type: $x_bool_t
      name: "b8"
      desc: "[out] 8-bit boolean"
--- #--------------------------------------------------------------------------
type: struct
desc: "Typed value"
class: $t
name: $t_typed_value_t
members:
    - type: $t_value_type_t
      name: "type"
      desc: "[out] type of value"
    - type: $t_value_t
      name: "value"
      desc: "[out] value"
--- #--------------------------------------------------------------------------
type: function
desc: "Calculates metric values from raw data."
class: $tMetricGroup
name: CalculateMetricValues
decl: static
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: "$t_metric_group_handle_t"
      name: hMetricGroup
      desc: "[in] handle of the metric group"
    - type: size_t
      name: rawDataSize
      desc: "[in] size in bytes of raw data buffer"
    - type: "const uint8_t*"
      name: pRawData
      desc: "[in][range(0, rawDataSize)] buffer of raw data to calculate"
    - type: uint32_t*
      name: pMetricValueCount
      desc: |
            [in,out] pointer to number of metric values calculated.
            if count is zero, then the driver will update the value with the total number of metric values to be calculated.
            if count is non-zero, then driver will only calculate that number of metric values.
            if count is larger than the number available in the raw data buffer, then the driver will update the value with the actual number of metric values to be calculated.
    - type: "$t_typed_value_t*"
      name: pMetricValues
      desc: "[in,out][optional][range(0, *pMetricValueCount)] buffer of calculated metrics"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves metric from a metric group."
class: $tMetric
name: Get
decl: static
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: "$t_metric_group_handle_t"
      name: hMetricGroup
      desc: "[in] handle of the metric group"
    - type: uint32_t*
      name: pCount
      desc: |
            [in,out] pointer to the number of metrics.
            if count is zero, then the driver will update the value with the total number of metrics available.
            if count is non-zero, then driver will only retrieve that number of metrics.
            if count is larger than the number of metrics available, then the driver will update the value with the correct number of metrics available.
    - type: "$t_metric_handle_t*"
      name: phMetrics
      desc: "[in,out][optional][range(0, *pCount)] array of handle of metrics"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum metric name string size"
name: $T_MAX_METRIC_NAME
value: "256"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum metric description string size"
name: $T_MAX_METRIC_DESCRIPTION
value: "256"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum metric component string size"
name: $T_MAX_METRIC_COMPONENT
value: "256"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum metric result units string size"
name: $T_MAX_METRIC_RESULT_UNITS
value: "256"
--- #--------------------------------------------------------------------------
type: struct
desc: "Metric properties queried using $tMetricGetProperties"
class: $tMetric
name: $t_metric_properties_t
base: $t_base_properties_t
members:
    - type: char
      name: "name[$T_MAX_METRIC_NAME]"
      desc: "[out] metric name"
    - type: char
      name: "description[$T_MAX_METRIC_DESCRIPTION]"
      desc: "[out] metric description"
    - type: char
      name: "component[$T_MAX_METRIC_COMPONENT]"
      desc: "[out] metric component"
    - type: uint32_t
      name: "tierNumber"
      desc: "[out] number of tier"
    - type: $t_metric_type_t
      name: "metricType"
      desc: "[out] metric type"
    - type: $t_value_type_t
      name: "resultType"
      desc: "[out] metric result type"
    - type: char
      name: "resultUnits[$T_MAX_METRIC_RESULT_UNITS]"
      desc: "[out] metric result units"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves attributes of a metric."
class: $tMetric
name: GetProperties
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: "$t_metric_handle_t"
      name: hMetric
      desc: "[in] handle of the metric"
    - type: "$t_metric_properties_t*"
      name: pProperties
      desc: "[in,out] metric properties"
--- #--------------------------------------------------------------------------
type: function
desc: "Activates metric groups."
class: $tDevice
name: ActivateMetricGroups
details:
    - "Immediately reconfigures the device to activate only those metric groups provided."
    - "Any metric groups previously activated but not provided will be deactivated."
    - "Deactivating metric groups that are still in-use will result in undefined behavior."
    - "All metric groups must have different domains, see $t_metric_group_properties_t."
    - "The application must **not** call this function from simultaneous threads with the same device handle."
params:
    - type: "$t_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: uint32_t
      name: count
      desc: "[in] metric group count to activate; must be 0 if `nullptr == phMetricGroups`"
    - type: "$t_metric_group_handle_t*"
      name: phMetricGroups
      desc: "[in][optional][range(0, count)] handles of the metric groups to activate. nullptr to deactivate all."
returns:
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`(nullptr == phMetricGroups) && (0 < count)`"
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "Multiple metric groups share the same domain"
--- #--------------------------------------------------------------------------
type: struct
desc: "Metric streamer descriptor"
class: $tMetricStreamer
name: $t_metric_streamer_desc_t
base: $t_base_desc_t
members:
    - type: uint32_t
      name: "notifyEveryNReports"
      desc: "[in,out] number of collected reports after which notification event will be signalled"
    - type: uint32_t
      name: "samplingPeriod"
      desc: "[in,out] streamer sampling period in nanoseconds"
--- #--------------------------------------------------------------------------
type: function
desc: "Opens metric streamer for a device."
class: $tMetricStreamer
name: Open
decl: static
details:
    - "The notification event must have been created from an event pool that was created using $X_EVENT_POOL_FLAG_HOST_VISIBLE flag."
    - "The notification event must **not** have been created from an event pool that was created using $X_EVENT_POOL_FLAG_KERNEL_TIMESTAMP flag."
    - "The application must **not** call this function from simultaneous threads with the same device handle."
params:
    - type: "$t_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: "$t_metric_group_handle_t"
      name: "hMetricGroup"
      desc: "[in] handle of the metric group"
    - type: "$t_metric_streamer_desc_t*"
      name: desc
      desc: "[in,out] metric streamer descriptor"
    - type: "$x_event_handle_t"
      name: hNotificationEvent
      desc: "[in][optional] event used for report availability notification"
    - type: "$t_metric_streamer_handle_t*"
      name: phMetricStreamer
      desc: "[out] handle of metric streamer"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
--- #--------------------------------------------------------------------------
type: function
desc: "Append metric streamer marker into a command list."
class: $tCommandList
name: AppendMetricStreamerMarker
details:
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
params:
    - type: "$t_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: "$t_metric_streamer_handle_t"
      name: hMetricStreamer
      desc: "[in] handle of the metric streamer"
    - type: "uint32_t"
      name: value
      desc: "[in] streamer marker value"
--- #--------------------------------------------------------------------------
type: function
desc: "Closes metric streamer."
class: $tMetricStreamer
name: Close
details:
    - "The application must **not** call this function from simultaneous threads with the same metric streamer handle."
params:
    - type: "$t_metric_streamer_handle_t"
      name: hMetricStreamer
      desc: "[in][release] handle of the metric streamer"
--- #--------------------------------------------------------------------------
type: function
desc: "Reads data from metric streamer."
class: $tMetricStreamer
name: ReadData
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: "$t_metric_streamer_handle_t"
      name: hMetricStreamer
      desc: "[in] handle of the metric streamer"
    - type: uint32_t
      name: maxReportCount
      desc: |
            [in] the maximum number of reports the application wants to receive.
            if UINT32_MAX, then function will retrieve all reports available
    - type: size_t*
      name: pRawDataSize
      desc: |
            [in,out] pointer to size in bytes of raw data requested to read.
            if size is zero, then the driver will update the value with the total size in bytes needed for all reports available.
            if size is non-zero, then driver will only retrieve the number of reports that fit into the buffer.
            if size is larger than size needed for all reports, then driver will update the value with the actual size needed.
    - type: uint8_t*
      name: pRawData
      desc: "[in,out][optional][range(0, *pRawDataSize)] buffer containing streamer reports in raw format"
--- #--------------------------------------------------------------------------
type: enum
desc: "Metric query pool types"
class: $tMetricQueryPool
name: $t_metric_query_pool_type_t
etors:
    - name: PERFORMANCE
      desc: "Performance metric query pool."
    - name: EXECUTION
      desc: "Skips workload execution between begin/end calls."
--- #--------------------------------------------------------------------------
type: struct
desc: "Metric query pool description"
class: $tMetricQueryPool
name: $t_metric_query_pool_desc_t
base: $t_base_desc_t
members:
    - type: $t_metric_query_pool_type_t
      name: type
      desc: "[in] Query pool type."
      init: $T_METRIC_QUERY_POOL_TYPE_PERFORMANCE
    - type: uint32_t
      name: "count"
      desc: "[in] Internal slots count within query pool object."
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a pool of metric queries."
class: $tMetricQueryPool
name: Create
decl: static
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: "$t_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: $t_metric_group_handle_t
      name: "hMetricGroup"
      desc: "[in] metric group associated with the query object."
    - type: "const $t_metric_query_pool_desc_t*"
      name: desc
      desc: "[in] metric query pool descriptor"
    - type: "$t_metric_query_pool_handle_t*"
      name: phMetricQueryPool
      desc: "[out] handle of metric query pool"
--- #--------------------------------------------------------------------------
type: function
desc: "Deletes a query pool object."
class: $tMetricQueryPool
name: Destroy
decl: static
details:
    - "The application must destroy all query handles created from the pool before destroying the pool itself"
    - "The application must ensure the device is not currently referencing the any query within the pool before it is deleted"
    - "The application must **not** call this function from simultaneous threads with the same query pool handle."
params:
    - type: "$t_metric_query_pool_handle_t"
      name: hMetricQueryPool
      desc: "[in][release] handle of the metric query pool"
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: function
desc: "Creates metric query object."
class: $tMetricQuery
name: Create
decl: static
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: "$t_metric_query_pool_handle_t"
      name: hMetricQueryPool
      desc: "[in] handle of the metric query pool"
    - type: uint32_t
      name: index
      desc: "[in] index of the query within the pool"
    - type: "$t_metric_query_handle_t*"
      name: phMetricQuery
      desc: "[out] handle of metric query"
--- #--------------------------------------------------------------------------
type: function
desc: "Deletes a metric query object."
class: $tMetricQuery
name: Destroy
decl: static
details:
    - "The application must ensure the device is not currently referencing the query before it is deleted"
    - "The application must **not** call this function from simultaneous threads with the same query handle."
params:
    - type: "$t_metric_query_handle_t"
      name: hMetricQuery
      desc: "[in][release] handle of metric query"
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: function
desc: "Resets a metric query object back to inital state."
class: $tMetricQuery
name: Reset
details:
    - "The application must ensure the device is not currently referencing the query before it is reset"
    - "The application must **not** call this function from simultaneous threads with the same query handle."
params:
    - type: "$t_metric_query_handle_t"
      name: hMetricQuery
      desc: "[in] handle of metric query"
--- #--------------------------------------------------------------------------
type: function
desc: "Appends metric query begin into a command list."
class: $tCommandList
name: AppendMetricQueryBegin
details:
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
params:
    - type: "$t_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: "$t_metric_query_handle_t"
      name: hMetricQuery
      desc: "[in] handle of the metric query"
--- #--------------------------------------------------------------------------
type: function
desc: "Appends metric query end into a command list."
class: $tCommandList
name: AppendMetricQueryEnd
details:
    - "The signal event must **not** have been created from an event pool that was created using $X_EVENT_POOL_FLAG_KERNEL_TIMESTAMP flag."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
params:
    - type: "$t_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: "$t_metric_query_handle_t"
      name: hMetricQuery
      desc: "[in] handle of the metric query"
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching; must be 0 if `nullptr == phWaitEvents`"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`(nullptr == phWaitEvents) && (0 < numWaitEvents)`"
--- #--------------------------------------------------------------------------
type: function
desc: "Appends metric query commands to flush all caches."
class: $tCommandList
name: AppendMetricMemoryBarrier
details:
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
params:
    - type: "$t_command_list_handle_t"
      name: hCommandList
      desc: "[in] handle of the command list"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves raw data for a given metric query."
class: $tMetricQuery
name: GetData
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: "$t_metric_query_handle_t"
      name: hMetricQuery
      desc: "[in] handle of the metric query"
    - type: size_t*
      name: pRawDataSize
      desc: |
            [in,out] pointer to size in bytes of raw data requested to read.
            if size is zero, then the driver will update the value with the total size in bytes needed for all reports available.
            if size is non-zero, then driver will only retrieve the number of reports that fit into the buffer.
            if size is larger than size needed for all reports, then driver will update the value with the actual size needed.
    - type: uint8_t*
      name: pRawData
      desc: "[in,out][optional][range(0, *pRawDataSize)] buffer containing query reports in raw format"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for metric group"
name: $tMetricGroup
attribute: singleton
owner: $tDevice
members:
    - type: $t_metric_group_handle_t
      name: handle
      desc: "[in] handle of metric group object" 
      init: nullptr
    - type: $tDevice*
      name: pDevice
      desc: "[in] pointer to owner object"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for metric"
name: $tMetric
attribute: singleton
owner: $tMetricGroup
members:
    - type: $t_metric_handle_t
      name: handle
      desc: "[in] handle of metric object" 
    - type: $tMetricGroup*
      name: pMetricGroup
      desc: "[in] pointer to owner object"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for metric streamer"
name: $tMetricStreamer
owner: $tDevice
members:
    - type: $t_metric_streamer_handle_t
      name: handle
      desc: "[in] handle of metric streamer object" 
    - type: $tDevice*
      name: pDevice
      desc: "[in] pointer to owner object"
    - type: $t_metric_streamer_desc_t
      name: desc
      desc: "[in] descriptor of the metric streamer"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for metric query pool"
name: $tMetricQueryPool
owner: $tDevice
members:
    - type: $t_metric_query_pool_handle_t
      name: handle
      desc: "[in] handle of metric query pool object" 
    - type: $tDevice*
      name: pDevice
      desc: "[in] pointer to owner object"
    - type: $t_metric_query_pool_desc_t
      name: desc
      desc: "[in] descriptor of the metric query pool"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for metric query"
name: $tMetricQuery
owner: $tDevice
members:
    - type: $t_metric_query_handle_t
      name: handle
      desc: "[in] handle of metric query object" 
    - type: $tDevice*
      name: pDevice
      desc: "[in] pointer to owner object"
