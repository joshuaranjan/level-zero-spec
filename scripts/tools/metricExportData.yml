#
# Copyright (C) 2023 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Tool Experimental Extension for Exporting Metrics Data"
version: "1.6"
--- #--------------------------------------------------------------------------
type: macro
desc: "Exporting Metrics Data Experimental Extension Name"
version: "1.6"
name: $T_EXPORT_METRICS_DATA_EXP_NAME
value: '"$XT_experimental_metric_export_data"'
--- #--------------------------------------------------------------------------
type: enum
desc: "Exporting Metrics Data Experimental Extension Version(s)"
version: "1.6"
name: $t_export_metric_data_exp_version_t
etors:
    - name: "1_0"
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum count of characters in export data element name"
version: "1.6"
name: $T_MAX_METRIC_EXPORT_DATA_ELEMENT_NAME_EXP
value: "256"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum export data element description string size"
version: "1.6"
name: $T_MAX_METRIC_EXPORT_DATA_ELEMENT_DESCRIPTION_EXP
value: "256"
--- #--------------------------------------------------------------------------
type: struct
desc: "Metrics calculation descriptor"
version: "1.6"
class: $tMetric
name: $t_metric_calculate_exp_desc_t
base: $t_base_desc_t
members:
    - type: uint32_t
      name: "rawReportSkipCount"
      desc: "[in] number of reports to skip during calculation"
--- #--------------------------------------------------------------------------
type: function
desc: "Export Metrics Data for system independent calculation."
version: "1.6"
class: $tMetricGroup
name: GetExportDataExp
decl: static
details:
    - "This function exports raw data and necessary information to perform metrics calculation of collected data in a different system than where data was collected, which may or may not have accelerators."
    - "Implementations can choose to describe the data arrangement of the exported data, using any mechanism which allows users to read and process them."
    - "The application may call this function from simultaneous threads."
params:
    - type: "$t_metric_group_handle_t"
      name: hMetricGroup
      desc: "[in] handle of the metric group"
    - type: "const uint8_t*"
      name: pRawData
      desc: "[in] buffer of raw data"
    - type: size_t
      name: rawDataSize
      desc: "[in] size in bytes of raw data buffer"
    - type: "size_t*"
      name: pExportDataSize
      desc: |
            [in,out] size in bytes of export data buffer
            if size is zero, then the driver shall update the value with the number of bytes necessary to store the exported data.
            if size is greater than required, then the driver shall update the value with the actual number of bytes necessary to store the exported data.
    - type: "uint8_t *"
      name: pExportData
      desc: |
            [in,out][optional][range(0, *pExportDataSize)] buffer of exported data.
--- #--------------------------------------------------------------------------
type: function
desc: "Calculate one or more sets of metric values from exported raw data."
version: "1.6"
class: $tMetricGroup
name: CalculateMetricExportDataExp
decl: static
details:
    - "Calculate metrics values using exported data returned by $tMetricGroupGetExportDataExp."
    - "This function is similar to $tMetricGroupCalculateMultipleMetricValuesExp except it would calculate from exported metric data."
    - "This function could be used to calculate metrics on a system different from where the metric raw data was collected."
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "$t_metric_group_calculation_type_t"
      name: type
      desc: "[in] calculation type to be applied on raw data"
    - type: size_t
      name: exportDataSize
      desc: "[in] size in bytes of exported data buffer"
    - type: "const uint8_t*"
      name: pExportData
      desc: "[in][range(0, exportDataSize)] buffer of exported data to calculate"
    - type: "$t_metric_calculate_exp_desc_t*"
      name: pCalculateDescriptor
      desc: "[in] descriptor specifying calculation specific parameters"
    - type: uint32_t*
      name: pSetCount
      desc: |
            [in,out] pointer to number of metric sets.
            if count is zero, then the driver shall update the value with the total number of metric sets to be calculated.
            if count is greater than the number available in the raw data buffer, then the driver shall update the value with the actual number of metric sets to be calculated.
    - type: uint32_t*
      name: pTotalMetricValueCount
      desc: |
            [in,out] pointer to number of the total number of metric values calculated, for all metric sets.
            if count is zero, then the driver shall update the value with the total number of metric values to be calculated.
            if count is greater than the number available in the raw data buffer, then the driver shall update the value with the actual number of metric values to be calculated.
    - type: uint32_t*
      name: pMetricCounts
      desc: |
            [in,out][optional][range(0, *pSetCount)] buffer of metric counts per metric set.
    - type: "$t_typed_value_t*"
      name: pMetricValues
      desc: |
            [in,out][optional][range(0, *pTotalMetricValueCount)] buffer of calculated metrics.
            if count is less than the number available in the raw data buffer, then driver shall only calculate that number of metric values.
