--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Tool APIs for Power"
--- #--------------------------------------------------------------------------
type: enum
desc: "Power initialization flags (bitfield)"
class: $tDevice
name: $t_power_init_flags_t
etors:
    - name: $T_POWER_INIT_FLAGS_NONE
      value: "0"
      desc: "default initialization"
    - name: $T_POWER_INIT_FLAGS_WRITE
      value: "$X_BIT( 0 )"
      desc: "request access to power controls"
--- #--------------------------------------------------------------------------
type: handle
desc: "Handle of driver's power object"
class: $tDevice
name: "$t_power_handle_t"
--- #--------------------------------------------------------------------------
type: function
desc: "Initialize power management features"
class: $tDevice
name: PowerInit
analogue:
    - "**nvmlInit**"
    - "**rsmi_init**"
details:
    - "Initializes internal structures to support power management features."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "uint32_t"
      name: flags
      desc: "[in] bitfield of $t_power_init_flags_t"
    - type: "$t_power_handle_t*"
      name: pPowerHandle
      desc: "[out] handle for accessing power features of the device"
--- #--------------------------------------------------------------------------
type: function
desc: "Removes access to power management features"
class: $tDevice
name: PowerShutdown
analogue:
    - "**nvmlShutdown**"
    - "**rsmi_shut_down**"
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"



--- #--------------------------------------------------------------------------
type: struct
desc: "Average power limit"
class: $tDevice
name: $t_power_average_limit_t
details:
    - "The power controller (Punit) will throttle the operating frequency of the device if the power averaged over a window (typically seconds) exceeds a limit known as PL1."
members:
    - type: $x_bool_t
      name: enabled
      desc: "[in/out] indicates if the limit is enabled (true) or ignored (false)"
    - type: uint32_t
      name: powerMilliwatts
      desc: "[in/out] power limit in milliwatts"
    - type: uint32_t
      name: intervalMilliseconds
      desc: "[in/out] power averaging window (Tau) in milliseconds"
--- #--------------------------------------------------------------------------
type: struct
desc: "Burst power limit"
class: $tDevice
name: $t_power_burst_limit_t
details:
    - "The power controller (Punit) will throttle the operating frequency of the device if the power averaged over a few milliseconds exceeds a limit known as PL2. Typically PL2 > PL1 so that it permits the frequency to burst higher for short periods than would be otherwise permitted by PL1."
members:
    - type: $x_bool_t
      name: enabled
      desc: "[in/out] indicates if the limit is enabled (true) or ignored (false)"
    - type: uint32_t
      name: powerMilliwatts
      desc: "[in/out] power limit in milliwatts"
--- #--------------------------------------------------------------------------
type: struct
desc: "Peak power limit"
class: $tDevice
name: $t_power_peak_limit_t
details:
    - "The power controller (Punit) will preemptively throttle the operating frequency of the device when the instantaneous power exceeds this limit. The limit is known as PL4. It expresses the maximum power that can be drawn from the power supply."
    - "If this power limit is removed or set too high, the power supply will generate an interrupt when it detects an overcurrent condition and the power controller will throttle the device frequencies down to min. It is thus better to tune the PL4 value in order to avoid such excursions."
members:
    - type: uint32_t
      name: powerMilliwatts
      desc: "[in/out] power limit in milliwatts"
--- #--------------------------------------------------------------------------
type: struct
desc: "All power limits"
class: $tDevice
name: $t_power_limits_t
members:
    - type: $t_power_average_limit_t
      name: averagePowerLimit
      desc: "[in/out] average power limit information"
    - type: $t_power_burst_limit_t
      name: burstPowerLimit
      desc: "[in/out] burst power limit information"
    - type: $t_power_peak_limit_t
      name: peakPowerLimit
      desc: "[in/out] peak power limit information"
--- #--------------------------------------------------------------------------
type: function
desc: "Get current average power limit information for a device"
class: $tDevice
name: PowerGetAveragePowerLimit
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: $t_power_average_limit_t*
      name: pLimit
      desc: "[out] information about the average power limit"
--- #--------------------------------------------------------------------------
type: function
desc: "Get current burst power limit information for a device"
class: $tDevice
name: PowerGetBurstPowerLimit
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: $t_power_burst_limit_t*
      name: pLimit
      desc: "[out] information about the burst power limit"
--- #--------------------------------------------------------------------------
type: function
desc: "Get current peak power limit information for a device"
class: $tDevice
name: PowerGetPeakPowerLimit
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: $t_power_peak_limit_t*
      name: pLimit
      desc: "[out] information about the peak power limit"
--- #--------------------------------------------------------------------------
type: function
desc: "Get all current power limits for a device"
class: $tDevice
name: PowerGetAllPowerLimits
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: $t_power_limits_t*
      name: pLimits
      desc: "[out] information about the average/burst/peak power limits"
--- #--------------------------------------------------------------------------
type: function
desc: "Get default power limits for a device"
class: $tDevice
name: PowerGetDefaultPowerLimits
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: $t_power_limits_t*
      name: pLimits
      desc: "[out] information about the default average/burst/peak power limits"
--- #--------------------------------------------------------------------------
type: function
desc: "Set the average power limit for a device"
class: $tDevice
name: PowerSetAveragePowerLimit
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: $t_power_average_limit_t*
      name: pLimit
      desc: "[in] information about the average power limit"
--- #--------------------------------------------------------------------------
type: function
desc: "Set the burst power limit for a device"
class: $tDevice
name: PowerSetBurstPowerLimit
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: $t_power_burst_limit_t*
      name: pLimit
      desc: "[in] information about the burst power limit"
--- #--------------------------------------------------------------------------
type: function
desc: "Set the peak power limit for a device"
class: $tDevice
name: PowerSetPeakPowerLimit
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: $t_power_peak_limit_t*
      name: pLimit
      desc: "[in] information about the peak power limit"
--- #--------------------------------------------------------------------------
type: function
desc: "Set the average/burst/peak power limits for a device"
class: $tDevice
name: PowerSetPowerLimits
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: $t_power_limits_t*
      name: pLimits
      desc: "[in] information about the average/burst/peak power limits"
--- #--------------------------------------------------------------------------
type: function
desc: "Get energy counter"
class: $tDevice
name: PowerGetEnergyCounter
details:
    - "Average power = delta(energyMillijoules) / delta(timeMilliseconds)"
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint64_t*
      name: pEnergyMillijoules
      desc: "[out] the energy counter in millijoules"



--- #--------------------------------------------------------------------------
type: enum
desc: "Turbo (dynamic hardware frequency management) modes"
class: $tDevice
name: $t_turbo_mode_t
etors:
    - name: $T_TURBO_DISABLED
      value: "0"
      desc: "DVFS is currently disabled - frequency is fixed"
    - name: $T_TURBO_DEFAULT
      desc: "hardware default DVFS (typically EFFICIENT)"
    - name: $T_TURBO_MIN_PERFORMANCE
      desc: "min efficient frequency unless specific applications require otherwise"
    - name: $T_TURBO_EFFICIENT_PERFORMANCE
      desc: "balanced power and performance"
    - name: $T_TURBO_AGGRESSIVE_PERFORMANCE
      desc: "aggressively favor performance over power"
    - name: $T_TURBO_MAX_PERFORMANCE
      desc: "fixed max frequency unless limited by thermals/power"
--- #--------------------------------------------------------------------------
type: function
desc: "Get the current Turbo mode for a device"
class: $tDevice
name: PowerGetTurboMode
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: $t_turbo_mode_t*
      name: pTurboMode
      desc: "[out] turbo mode currently in effect"
--- #--------------------------------------------------------------------------
type: function
desc: "Set the current Turbo mode for a device"
class: $tDevice
name: PowerSetTurboMode
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: $t_turbo_mode_t
      name: pTurboMode
      desc: "[in] new turbo mode"
--- #--------------------------------------------------------------------------
type: enum
desc: "GPU domains"
class: $tDevice
name: $t_gpu_domain_t
etors:
    - name: $T_GPU_DOMAIN_BASE
      value: "$X_BIT( 0 )"
      desc: "base die"
    - name: $T_GPU_DOMAIN_VIDEO_DECODE
      value: "$X_BIT( 1 )"
      desc: "video decode engines"
    - name: $T_GPU_DOMAIN_VIDEO_ENCODE
      value: "$X_BIT( 2 )"
      desc: "video encode engines"
    - name: $T_GPU_DOMAIN_VIDEO_PROCESSING
      value: "$X_BIT( 3 )"
      desc: "video processing engines"
    - name: $T_GPU_DOMAIN_3D_FIXED_FUNCTION
      value: "$X_BIT( 4 )"
      desc: "3D fixed-function"
    - name: $T_GPU_DOMAIN_3D_RENDER
      value: "$X_BIT( 5 )"
      desc: "3D programmable engines"
    - name: $T_GPU_DOMAIN_COMPUTE
      value: "$X_BIT( 6 )"
      desc: "compute engines"
    - name: $T_GPU_DOMAIN_SYSTOLIC_ARRAY
      value: "$X_BIT( 7 )"
      desc: "systolic array engines"
    - name: $T_GPU_DOMAIN_RAYTRACING
      value: "$X_BIT( 8 )"
      desc: "raytracing engines"
    - name: $T_GPU_DOMAIN_LOCAL_MEMORY
      value: "$X_BIT( 9 )"
      desc: "local memory"
    - name: $T_GPU_DOMAIN_BASE_CHIPLET_LINK
      value: "$X_BIT( 10 )"
      desc: "link between base die and chiplet"
--- #--------------------------------------------------------------------------
type: enum
desc: "Clock types"
class: $tDevice
name: $t_clock_type_t
etors:
    - name: $T_CLOCK_FIXED
      value: "0"
      desc: "fixed crystal clock"
    - name: $T_CLOCK_PLL
      desc: "phase-locked-loop (PLL) frequency range"
    - name: $T_CLOCK_DIVIDER
      desc: "frequency is linked to another domain by a divider"
--- #--------------------------------------------------------------------------
type: enum
desc: "Frequency throttle reasons"
class: $tDevice
name: $t_freq_throttle_reasons_t
etors:
    - name: $T_FREQ_THROTTLE_REASON_NONE
      value: "0"
      desc: "frequency not throttled"
    - name: $T_FREQ_THROTTLE_REASON_AVE_PWR_CAP
      value: "$X_BIT( 0 )"
      desc: "frequency throttled due to average power excursion (PL1)"
    - name: $T_FREQ_THROTTLE_REASON_BURST_PWR_CAP
      value: "$X_BIT( 1 )"
      desc: "frequency throttled due to burst power excursion (PL2)"
    - name: $T_FREQ_THROTTLE_REASON_CURRENT_LIMIT
      value: "$X_BIT( 2 )"
      desc: "frequency throttled due to current excursion (PL4)"
    - name: $T_FREQ_THROTTLE_REASON_THERMAL_LIMIT
      value: "$X_BIT( 3 )"
      desc: "frequency throttled due to thermal excursion (T > TjMax)"
    - name: $T_FREQ_THROTTLE_REASON_PSU_ALERT
      value: "$X_BIT( 4 )"
      desc: "frequency throttled due to power supply assertion"
    - name: $T_FREQ_THROTTLE_REASON_SW_RANGE
      value: "$X_BIT( 5 )"
      desc: "frequency throttled due to software supplied frequency range"
    - name: $T_FREQ_THROTTLE_REASON_HW_RANGE
      value: "$X_BIT( 6 )"
      desc: "frequency throttled due to a sub block that has a lower frequency range when it receives clocks"
--- #--------------------------------------------------------------------------
type: handle
desc: "Handle of a frequency domain on a device"
class: $tDevice
name: "$t_freq_domain_handle_t"
--- #--------------------------------------------------------------------------
type: struct
desc: "Properties of a frequency domain"
class: $tDevice
name: $t_freq_domain_properties_t
details:
    - "A frequency domain contains one or more GPU functional blocks - see $t_gpu_domain_t"
    - "There is more than one type of clock - check clockType"
    - "For clock type $T_CLOCK_FIXED, minClockMHz and maxClockMHz will be the same and numClockPoints will be 1."
    - "For clock type $T_CLOCK_PLL, numClockPoints is given for informational purposes. Do not assume the frequency step between min/max clocks is (max - min) / (numClockPoints - 1). Instead, use the function $tPowerFreqDomainGetSupportedClocks to get the list of all supported clocks between min/max."
    - "For clock type $T_CLOCK_DIVIDER, the frequency of the domain is given by multiplying the divider by the frequency of the source domain. The possible divider values can be obtained using the function $tPowerFreqDomainGetSupportedDividers. For this clock type, minClockMHz/maxClockMHz specifies the total range of frequencies whereas the actual range depends on the current divider value."
members:
    - type: uint32_t
      name: gpuDomains
      desc: "[in] bitfield of xex_gpu_domain_t"
    - type: $t_clock_type_t
      name: clockType
      desc: "[in] clock type"
    - type: uint32_t
      name: minClockMHz
      desc: "[in] minimum frequency of the domain"
    - type: uint32_t
      name: maxClockMHz
      desc: "[in] maximum frequency of the domain"
    - type: uint32_t
      name: numClockPoints
      desc: "[in] number of discrete clock points between and including min/max"
    - type: $t_freq_domain_handle_t
      name: srcFreqDomain
      desc: "[in] for clock type $T_CLOCK_DIVIDER, this is the handle to the source frequency domain"
    - type: uint32_t
      name: numClockDividers
      desc: "[in] for clock type $T_CLOCK_DIVIDER, this gives the number of dividers available"
--- #--------------------------------------------------------------------------
type: struct
desc: "Frequency divider configuration"
class: $tDevice
name: $t_clock_divider_t
details:
    - "The frequency of a domain of type $T_CLOCK_DIVIDER is obtained by the formula:"
    - "freqMHz = src_domain_freqMHz * numerator / denominator"
members:
    - type: uint16_t
      name: numerator
      desc: "[in/out] numerator of the ratio"
    - type: uint16_t
      name: denominator
      desc: "[in/out] denominator of the ratio"
--- #--------------------------------------------------------------------------
type: function
desc: "Get the number of frequency domains on the device"
class: $tDevice
name: PowerFreqDomainCount
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t*
      name: pNumFreqDomains
      desc: "[out] the number of frequency domains"
--- #--------------------------------------------------------------------------
type: function
desc: "Get a handle to a frequency domain"
class: $tDevice
name: PowerFreqDomainGetHandle
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t
      name: ordinal
      desc: "[in] frequency domain index [0 .. $tPowerFreqDomainCount - 1]"
    - type: $t_freq_domain_handle_t*
      name: phFreqDomain
      desc: "[out] pointer to handle of frequency domain object"
--- #--------------------------------------------------------------------------
type: function
desc: "Get the properties for a frequency domain"
class: $tDevice
name: PowerFreqDomainGetProperties
params:
    - type: $t_freq_domain_handle_t
      name: hFreqDomain
      desc: "[in] handle of the frequency domain"
    - type: $t_freq_domain_properties_t*
      name: pFreqDomainProperties
      desc: "[out] pointer to properties for the frequency domain"
--- #--------------------------------------------------------------------------
type: function
desc: "Get supported frequency points for frequency domains with clock type $T_CLOCK_PLL"
class: $tDevice
name: PowerFreqDomainGetSupportedClocks
details:
    - "The total available list of frequencies can be found in $t_freq_domain_properties_t.numClockPoints."
params:
    - type: $t_freq_domain_handle_t
      name: hFreqDomain
      desc: "[in] handle of the frequency domain"
    - type: uint32_t
      name: numClockPoints
      desc: "[in] number of elements in pClocksMHz"
    - type: uint32_t*
      name: pClocksMHz
      desc: "[out] pointer to array of frequencies"
--- #--------------------------------------------------------------------------
type: function
desc: "Get supported frequency dividers for frequency domains with clock type $T_CLOCK_DIVIDER"
class: $tDevice
name: PowerFreqDomainGetSupportedClockDividers
details:
    - "The total available list of frequencies can be found in $t_freq_domain_properties_t.numClockDividers."
params:
    - type: $t_freq_domain_handle_t
      name: hFreqDomain
      desc: "[in] handle of the frequency domain"
    - type: uint32_t
      name: numClockDividers
      desc: "[in] number of elements in pDividers"
    - type: $t_clock_divider_t*
      name: pDividers
      desc: "[out] pointer to array of dividers"
--- #--------------------------------------------------------------------------
type: function
desc: "Get the frequency range for a frequency domain with clock type $T_CLOCK_PLL."
class: $tDevice
name: $tPowerFreqDomainGetClockRange
params:
    - type: $t_freq_domain_handle_t
      name: hFreqDomain
      desc: "[in] handle of the frequency domain"
    - type: uint32_t*
      name: pMinClockMHz
      desc: "[out] min clock frequency in units of MHz"
    - type: uint32_t*
      name: pMaxClockMHz
      desc: "[out] max clock frequency in units of MHz"
--- #--------------------------------------------------------------------------
type: function
desc: "Set the frequency range for a frequency domain with clock type $T_CLOCK_PLL."
class: $tDevice
name: $tPowerFreqDomainSetClockRange
details:
    - "Turbo (dynamic hardware frequency management) will select frequencies between this range based on the current Turbo mode in effect."
    - "Setting minClockMHz = maxClockMHz will fix the frequency for that frequency domain."
    - "Setting minClockMHz = 0 will instruct the hardware to use the default min value."
    - "Setting maxClockMHz = 0 will instruct the hardware to use the default max value."
params:
    - type: $t_freq_domain_handle_t
      name: hFreqDomain
      desc: "[in] handle of the frequency domain"
    - type: uint32_t
      name: minClockMHz
      desc: "[in] min clock frequency in units of MHz"
    - type: uint32_t
      name: maxClockMHz
      desc: "[in] max clock frequency in units of MHz"
--- #--------------------------------------------------------------------------
type: function
desc: "Set frequency divider for a frequency domain with clock type $T_CLOCK_DIVIDER"
class: $tDevice
name: PowerFreqDomainSetClockDivider
details:
    - "This disables dynamic frequency divider management running on the hardware."
    - "Setting pClockDivider to nullptr will enable dynamic frequency divider management."
params:
    - type: $t_freq_domain_handle_t
      name: hFreqDomain
      desc: "[in] handle of the frequency domain"
    - type: $t_clock_divider_t*
      name: pClockDividerRequest
      desc: "[out] pointer to frequency divider request"
--- #--------------------------------------------------------------------------
type: function
desc: "Get current frequency"
class: $tDevice
name: PowerGetCurrentFrequency
params:
    - type: $t_freq_domain_handle_t
      name: hFreqDomain
      desc: "[in] handle of the frequency domain"
    - type: uint32_t*
      name: pFreqRequestMHz
      desc: "[out] current frequency in MHz requested by the driver"
    - type: uint32_t*
      name: pFreqResolvedMHz
      desc: "[out] the actual frequency in MHz"
    - type: $t_freq_throttle_reasons_t*
      name: pFreqThrottleReasons
      desc: "[out] the reason the resolved frequency is lower than the request"

--- #--------------------------------------------------------------------------
type: enum
desc: "Fan capabilities"
name: $t_fan_capabilities_t
etors:
    - name: $T_FAN_CAP_GET_SPEED_PERCENTAGE
      value: "$X_BIT( 0 )"
      desc: "can query fan speed as a percentage"
    - name: $T_FAN_CAP_SET_SPEED_PERCENTAGE
      value: "$X_BIT( 1 )"
      desc: "can set fan speed as a percentage"
    - name: $T_FAN_CAP_GET_SPEED_RPM
      value: "$X_BIT( 2 )"
      desc: "can query fan speed as rpm"
    - name: $T_FAN_CAP_SET_SPEED_RPM
      value: "$X_BIT( 3 )"
      desc: "can set fan speed as rpm"
    - name: $T_FAN_CAP_HAVE_TEMPERATURE_SPEED_TABLE
      value: "$X_BIT( 4 )"
      desc: "can set temperature/fan speed table"
--- #--------------------------------------------------------------------------
type: enum
desc: "Fan speed modes"
name: $t_fan_mode_t
etors:
    - name: $T_FAN_SPEED_AUTO
      value: "0"
      desc: "fan speed is dynamically controlled based on temperature"
    - name: $T_FAN_SPEED_FIXED
      desc: "fan speed is fixed"
--- #--------------------------------------------------------------------------
type: struct
desc: "Fan properties"
class: $tDevice
name: $t_fan_properties_t
members:
    - type: uint32_t
      name: fanCapabilities
      desc: "[in] bitfield of $t_fan_capabilities_t"
    - type: uint32_t
      name: maxRpm
      desc: "[in] maximum RPM of the fan. Will be 0 if maximum is not known."
    - type: uint32_t
      name: maxTemperatureSpeedPoints
      desc: "[in] the maximum number of temperature/fan-speed points that can be programmed"
--- #--------------------------------------------------------------------------
type: struct
desc: "Temperature/fan-speed point"
class: $tDevice
name: $t_fan_point_t
members:
    - type: $x_bool_t
      name: fanSpeedInRpm
      desc: "[in/out] false means fanSpeed is in percentage, true means fanSpeed is in RPM"
    - type: uint16_t
      name: temperatureDegreesCentigrate
      desc: "[in/out] temperature in degrees centigrate"
    - type: uint16_t
      name: fanSpeed
      desc: "[in/out] the fan speed as a percentage (or RPM if fanSpeedInRpm is true)"
--- #--------------------------------------------------------------------------
type: struct
desc: "Fan speed info"
class: $tDevice
name: $t_fan_speed_info_t
members:
    - type: $x_bool_t
      name: fanSpeedInRpm
      desc: "[in/out] false means fanSpeed is in percentage, true means fanSpeed is in RPM"
    - type: $t_fan_mode_t
      name: fanSpeedMode
      desc: "[in/out] whether the fan speed is fixed or being controlled dynamically"
    - type: uint16_t
      name: fanSpeed
      desc: "[in/out] the fan speed as a percentage (or RPM if fanSpeedInRpm is true)"
--- #--------------------------------------------------------------------------
type: function
desc: "Get number of fans on the device"
class: $tDevice
name: PowerFanCount
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t*
      name: pFanCount
      desc: "[out] the number of fans on the device"
--- #--------------------------------------------------------------------------
type: function
desc: "Get fan properties for one of the fans on a device"
class: $tDevice
name: PowerFanGetProperties
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t
      name: fanIndex
      desc: "[in] fan index [0 .. $tPowerFanCount - 1]"
    - type: $t_fan_properties_t*
      name: pFanProperties
      desc: "[out] pointer to storage for fan properties"
--- #--------------------------------------------------------------------------
type: function
desc: "Get fan speed table"
class: $tDevice
name: PowerFanGetSpeedTable
details:
    - "Set pFanSpeedTable = nullptr to find out the current number of fan speed points in the table."
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t
      name: fanIndex
      desc: "[in] fan index [0 .. $tPowerFanCount - 1]"
    - type: $x_bool_t
      name: fanSpeedInRpm
      desc: "[in] true will request fan speeds in RPM, otherwise in percentage"
    - type: uint32_t*
      name: pNumFanPoints
      desc: "[in/out] input number of elements in pFanSpeedTable array; output number of elements returned"
    - type: $t_fan_point_t*
      name: pFanPoints
      desc: "[out] pointer to an array of temperature/fan-speed points"
--- #--------------------------------------------------------------------------
type: function
desc: "Set fan speed table"
class: $tDevice
name: PowerFanSetSpeedTable
details:
    - "Use $tPowerGetFanCapabilities to determine acceptable units for fan speed (percent, RPM)."
    - "Fan points should be ordered according to increasing temperature."
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t
      name: fanIndex
      desc: "[in] fan index [0 .. $tPowerFanCount - 1]"
    - type: uint32_t
      name: numFanPoints
      desc: "[in] number of points in pFanSpeedTable array"
    - type: $t_fan_point_t*
      name: pFanPoints
      desc: "[in] pointer to an array of temperature/fan-speed points"
--- #--------------------------------------------------------------------------
type: function
desc: "Get current fan speeds"
class: $tDevice
name: PowerFanGetSpeed
details:
    - "The array pFanSpeed must contain at least numFans entries."
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t
      name: startFanIndex
      desc: "[in] fan index [0 .. $tPowerFanCount - 1]"
    - type: uint32_t
      name: numFans
      desc: "[in] pFanSpeed will contain results for fan index (startFanIndex)..(startFanIndex + numFans - 1)"
    - type: $x_bool_t
      name: fanSpeedInRpm
      desc: "[in] true will request fan speeds in RPM, otherwise in percentage"
    - type: $t_fan_speed_info_t*
      name: pFanSpeed
      desc: "[out] pointer to an array of current fan speeds"
--- #--------------------------------------------------------------------------
type: function
desc: "Set fan speeds"
class: $tDevice
name: PowerFanSetSpeed
details:
    - "Use t_fan_speed_info_t.fanSpeedMode to set whether the speed should be fixed or dynamically controlled"
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t
      name: startFanIndex
      desc: "[in] fan index [0 .. $tPowerFanCount - 1]"
    - type: uint32_t
      name: numFans
      desc: "[in] pFanSpeed will contain results for fan index (startFanIndex)..(startFanIndex + numFans - 1)"
    - type: $t_fan_speed_info_t*
      name: pFanSpeed
      desc: "[in] pointer to an array of current fan speeds"



--- #--------------------------------------------------------------------------
type: struct
desc: "Temperature sensor properties"
class: $tDevice
name: $t_temperature_properties_t
details:
    - "Temperature sensor index 0 is special - it is a virtual sensor that gives the max across all sensors. The member **location** equals 0xFFFFFFFF in this case."
    - "Most systems apply the temperature threshold globally. In this case, member **canChangeThreshold** will only be true for sensor index 0."
members:
    - type: uint32_t
      name: location
      desc: "[in] bitfield of $t_gpu_domain_t whose temperature is measured by this sensor"
    - type: uint16_t
      name: maxTemperature
      desc: "[in] the temperature limit in celsius beyond which the power control unit (Punit) will throttle the frequency"
    - type: uint16_t
      name: shutdownTemperature
      desc: "[in] the temperature limit in celsius beyond which the power control unit (Punit) will shutdown the device"
    - type: $x_bool_t
      name: canChangeThreshold
      desc: "[in] true indicates that this a different threshold can be set"
--- #--------------------------------------------------------------------------
type: function
desc: "Get number of temperature sensors on the device"
class: $tDevice
name: PowerTemperatureSensorCount
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t*
      name: pSensorCount
      desc: "[out] the number of temperature sensors on the device"
--- #--------------------------------------------------------------------------
type: function
desc: "Get temperatures sensor properties"
class: $tDevice
name: PowerGetTemperatureProperties
details:
    - "Temperature sensor index 0 is special - it gives the maximum temperature across all sensors"
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t
      name: sensorIndex
      desc: "[in] sensor index [0 .. $tPowerTemperatureSensorCount]"
    - type: $t_temperature_properties_t*
      name: pProperties
      desc: "[out] pointer to properties for this sensor"
--- #--------------------------------------------------------------------------
type: function
desc: "Get current temperatures"
class: $tDevice
name: PowerGetTemperature
details:
    - "Temperature sensor index 0 is special - it gives the maximum temperature across all sensors"
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t
      name: startSensorIndex
      desc: "[in] sensor index [0 .. $tPowerTemperatureSensorCount]"
    - type: uint32_t
      name: numSensors
      desc: "[in] pTemperatures will contain results for sensors index (startSensorIndex)..(startSensorIndex + numSensors - 1)"
    - type: uint16_t*
      name: pTemperatures
      desc: "[out] pointer to an array of temperatures in units of degrees celsius"
--- #--------------------------------------------------------------------------
type: function
desc: "Set temperature threshold"
class: $tDevice
name: PowerSetTemperatureThreshold
details:
    - "Check $t_temperature_properties_t.canChangeThreshold to determine if the threshold can be changed."
    - "On most systems, there is only one threshold and sensorIndex should be 0."
    - "**This is an overclocking feature and will void device warranty**"
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t
      name: sensorIndex
      desc: "[in] sensor index [0 .. $tPowerTemperatureSensorCount]"
    - type: uint16_t
      name: maxTemperature
      desc: "[in] temperature threshold in degrees celsius beyond which frequency will be throttled"
      
--- #--------------------------------------------------------------------------
type: struct
desc: "Activity counter properties"
class: $tDevice
name: $t_activity_properties_t
details:
    - "Activity counter 0 is a normalized accumulation of activity across all blocks. The member **blocks** equals 0xFFFFFFFF in this case."
members:
    - type: uint32_t
      name: blocks
      desc: "[in] bitfield of $t_gpu_domain_t whose activity is included in this counter"
--- #--------------------------------------------------------------------------
type: struct
desc: "Activity counter data"
class: $tDevice
name: $t_activity_counters_t
details:
    - "Activity counter 0 is a normalized accumulation of activity across all blocks."
    - "Samples these counters between two points and calculate utilization by dividing delta(activityCounterUsec) / delta(timeCounterUsec)."
    - "Powered down time is given by timeCounterUsec - activityCounterUsec - idleCounterUsec."
members:
    - type: uint64_t
      name: activityCounterUsec
      desc: "[out] Monotonically increasing counter of activity in microseconds"
    - type: uint64_t
      name: idleCounterUsec
      desc: "[out] Monotonically increasing counter of time blocks are powered on but idle in microseconds"
    - type: uint64_t
      name: timeCounterUsec
      desc: "[out] Monotonically increasing counter of time in microseconds"
--- #--------------------------------------------------------------------------
type: function
desc: "Get number of activity counters"
class: $tDevice
name: PowerActivityCount
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t*
      name: pActivityCount
      desc: "[out] the number of activity counters on the device"
--- #--------------------------------------------------------------------------
type: function
desc: "Get activity counter properties"
class: $tDevice
name: PowerGetActivityProperties
details:
    - "Activity counter index 0 is special - it acculates activity across all blocks."
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t
      name: activityIndex
      desc: "[in] activity counter index [0 .. $tPowerActivityCount]"
    - type: $t_activity_properties_t*
      name: pProperties
      desc: "[out] pointer to properties for this activity counter"
--- #--------------------------------------------------------------------------
type: function
desc: "Get activity counters"
class: $tDevice
name: PowerGetActivityCounters
details:
    - "Activity counter index 0 is special - it acculates activity across all blocks."
params:
    - type: $t_power_handle_t
      name: hPower
      desc: "[in] handle of the power object"
    - type: uint32_t
      name: startCounterIndex
      desc: "[in] sensor index [0 .. $tPowerActivityCount]"
    - type: uint32_t
      name: numCounters
      desc: "[in] pCounters will contain results for activity counter index (startCounterIndex)..(startCounterIndex + numCounters - 1)"
    - type: $t_activity_counters_t*
      name: pCounters
      desc: "[out] pointer to an array of activity counter data"
