--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Tool APIs for System Resource Management (SMI)"
--- #--------------------------------------------------------------------------
type: enum
desc: "API version of SMI"
class: $tSysman
name: $t_sysman_version_t
etors:
    - name: $T_SYSMAN_VERSION_CURRENT
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: function
desc: "Get the handle to access SMI features for a device"
class: $tSysman
name: Get
decl: static
details:
    - "The returned handle is unique"
params:
    - type: "$t_device_handle_t"
      name: hDevice
      desc: "[in] Handle of the device"
    - type: "$t_sysman_version_t"
      name: version
      desc: "[in] SMI version that application was built with"
    - type: "$t_sysman_handle_t*"
      name: phSysman
      desc: "[out] Handle for accessing SMI features"

--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum number of characters in string properties."
name: $T_STRING_PROPERTY_SIZE
value: "32"

--- #--------------------------------------------------------------------------
type: enum
desc: "Device mode"
class: $tSysman
name: $t_operating_mode_t
etors:
    - name: $T_OPERATING_MODE_DEFAULT
      value: "0"
      desc: "Multiple workloads are running on the device"
    - name: $T_OPERATING_MODE_EXCLUSIVE_COMPUTE_PROCESS
      desc: "A single process submitting compute workloads can monopolize the accelerator resources"

--- #--------------------------------------------------------------------------
type: enum
desc: "Frequency domains"
class: $tSysman
name: $t_freq_domain_t
etors:
    - name: $T_FREQ_DOMAIN_GPU
      value: "0"
      desc: "Frequency of the GPU."
    - name: $T_FREQ_DOMAIN_MEMORY
      desc: "Frequency of the local memory."
    - name: $T_FREQ_DOMAIN_NUM
      desc: "The total number of frequency domains."

--- #--------------------------------------------------------------------------
type: enum
desc: "Event types"
class: $tSysman
name: $t_sysman_event_type_t
etors:
    - name: $T_SYSMAN_EVENT_TYPE_FREQ_THROTTLED
      value: "0"
      desc: "The frequency is being throttled"
    - name: $T_SYSMAN_EVENT_TYPE_ENERGY_THRESHOLD_CROSSED
      desc: "Interrupt from the PCU when the energy threshold is crossed."
    - name: $T_SYSMAN_EVENT_TYPE_RAS_ERRORS
      desc: "ECC/RAS errors"
    - name: $T_SYSMAN_EVENT_TYPE_NUM
      desc: "The number of event types"

--- #--------------------------------------------------------------------------
type: struct
desc: "Device properties"
class: $tSysman
name: $t_sysman_properties_t
members:
    - type: $x_device_type_t
      name: type
      desc: "[out] generic device type"
    - type: uint32_t
      name: "vendorId"
      desc: "[out] vendorId from PCI configuration"
    - type: uint32_t
      name: "deviceId"
      desc: "[out] deviceId from PCI configuration"
    - type: $x_device_uuid_t
      name: "uuid"
      desc: "[out] Device UUID"
    - type: $x_bool_t
      name: isSubdevice
      desc: "[out] If this handle refers to a sub-device."
    - type: uint32_t
      name: subdeviceId
      desc: "[out] sub-device id. Only valid if isSubdevice is true."
    - type: int8_t
      name: "serialNumber[$T_STRING_PROPERTY_SIZE]"
      desc: "[out] Manufacturing serial number (NULL terminated string value)"
    - type: int8_t
      name: "boardNumber[$T_STRING_PROPERTY_SIZE]"
      desc: "[out] Manufacturing board number (NULL terminated string value)"
    - type: int8_t
      name: "brandName[$T_STRING_PROPERTY_SIZE]"
      desc: "[out] Brand name of the device (NULL terminated string value)"
    - type: int8_t
      name: "modelName[$T_STRING_PROPERTY_SIZE]"
      desc: "[out] Model name of the device (NULL terminated string value)"
    - type: int8_t
      name: "vendorName[$T_STRING_PROPERTY_SIZE]"
      desc: "[out] Vendor name of the device (NULL terminated string value)"
    - type: int8_t
      name: "driverVersion[$T_STRING_PROPERTY_SIZE]"
      desc: "[out] Installed driver version (NULL terminated string value)"
    - type: $x_bool_t
      name: "numSwitches"
      desc: "[out] The number of switches on the device"
    - type: uint32_t
      name: "numFirmwares"
      desc: "[out] Number of firmwares that can be managed"
    - type: uint32_t
      name: "numPsus"
      desc: "[out] Number of power supply units that can be managed"
    - type: uint32_t
      name: "numFans"
      desc: "[out] Number of fans that can be managed"
    - type: uint32_t
      name: "numLeds"
      desc: "[out] Number of LEDs that can be managed"
    - type: $x_bool_t
      name: "supportedEvents[$T_SYSMAN_EVENT_TYPE_NUM]"
      desc: "[out] Set to true for the events that are supported"
--- #--------------------------------------------------------------------------
type: function
desc: "Get properties about the device"
class: $tSysman
name: DeviceGetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_sysman_properties_t*
      name: pProperties
      desc: "[in] Structure that will contain information about the device."
--- #--------------------------------------------------------------------------
type: function
desc: "Get operating mode of the device"
class: $tSysman
name: DeviceGetOperatingMode
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_operating_mode_t*
      name: pMode
      desc: "[in] The current operating mode of the device."
--- #--------------------------------------------------------------------------
type: function
desc: "Set operating mode of the device"
class: $tSysman
name: DeviceSetOperatingMode
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_operating_mode_t
      name: pMode
      desc: "[in] The new operating mode of the device."
--- #--------------------------------------------------------------------------
type: function
desc: "Reset device"
class: $tSysman
name: DeviceReset
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle for the device"

--- #--------------------------------------------------------------------------
type: struct
desc: "Properties related to device power settings"
class: $tSysman
name: $t_power_properties_t
members:
    - type: $x_bool_t
      name: "canControl"
      desc: "[out] Software can change the power limits."
    - type: uint32_t
      name: "maxLimit"
      desc: "[out] The maximum power limit in milliwatts that can be requested."
--- #--------------------------------------------------------------------------
type: struct
desc: "Energy counter snapshot"
class: $tSysman
name: $t_power_energy_counter_t
details:
    - "Average power is calculated by taking two snapshots (s1, s2) and using the equation: PowerWatts = (s2.energy - s1.energy) / (s2.timestamp - s1.timestamp)"
members:
    - type: uint64_t
      name: "energy"
      desc: "[out] The monotonic energy counter in microjoules."
    - type: uint64_t
      name: "timestamp"
      desc: |
            [out] Microsecond timestamp when energy was captured.
            No assumption should be made about the absolute value of the timestamp.
            It should only be used to calculate delta time between two snapshots of the same structure.
            Never take the delta of this timestamp with the timestamp from a different structure.
--- #--------------------------------------------------------------------------
type: struct
desc: "Energy threshold"
class: $tSysman
name: $t_power_energy_threshold_t
details:
    - "Energy threshold value, when this value is crossed, pcu will signal an interrupt."
members:
    - type: uint32_t
      name: "energy"
      desc: "[in,out] The energy threshold in joules."
--- #--------------------------------------------------------------------------
type: struct
desc: "Sustained power limits"
class: $tSysman
name: $t_power_sustained_limit_t
details:
    - "The power controller (Punit) will throttle the operating frequency if the power averaged over a window (typically seconds) exceeds this limit."
members:
    - type: $x_bool_t
      name: enabled
      desc: "[in,out] indicates if the limit is enabled (true) or ignored (false)"
    - type: uint32_t
      name: power
      desc: "[in,out] power limit in milliwatts"
    - type: uint32_t
      name: interval
      desc: "[in,out] power averaging window (Tau) in milliseconds"
--- #--------------------------------------------------------------------------
type: struct
desc: "Burst power limit"
class: $tSysman
name: $t_power_burst_limit_t
details:
    - "The power controller (Punit) will throttle the operating frequency of the device if the power averaged over a few milliseconds exceeds a limit known as PL2. Typically PL2 > PL1 so that it permits the frequency to burst higher for short periods than would be otherwise permitted by PL1."
members:
    - type: $x_bool_t
      name: enabled
      desc: "[in,out] indicates if the limit is enabled (true) or ignored (false)"
    - type: uint32_t
      name: power
      desc: "[in,out] power limit in milliwatts"
--- #--------------------------------------------------------------------------
type: struct
desc: "Peak power limit"
class: $tSysman
name: $t_power_peak_limit_t
details:
    - "The power controller (Punit) will preemptively throttle the operating frequency of the device when the instantaneous power exceeds this limit. The limit is known as PL4. It expresses the maximum power that can be drawn from the power supply."
    - "If this power limit is removed or set too high, the power supply will generate an interrupt when it detects an overcurrent condition and the power controller will throttle the device frequencies down to min. It is thus better to tune the PL4 value in order to avoid such excursions."
members:
    - type: uint32_t
      name: power
      desc: "[in,out] power limit in milliwatts"
--- #--------------------------------------------------------------------------
type: function
desc: "Get properties related to power"
class: $tSysman
name: PowerGetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_power_properties_t*
      name: pProperties
      desc: "[in] Structure that will contain property data."
--- #--------------------------------------------------------------------------
type: function
desc: "Get energy counter"
class: $tSysman
name: PowerGetEnergyCounter
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_power_energy_counter_t*
      name: pEnergy
      desc: "[in] Will contain the latest snapshot of the energy counter and timestamp when the last counter value was measured."
--- #--------------------------------------------------------------------------
type: function
desc: "Get energy threshold"
class: $tSysman
name: PowerGetEnergyThreshold
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_power_energy_threshold_t*
      name: pThreshold
      desc: "[out] The current energy threshold value in joules."
--- #--------------------------------------------------------------------------
type: function
desc: "Set energy threshold"
class: $tSysman
name: PowerSetEnergyThreshold
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_power_energy_threshold_t*
      name: pThreshold
      desc: "[in] The energy threshold to be set in joules."
--- #--------------------------------------------------------------------------
type: function
desc: "Get power limits"
class: $tSysman
name: PowerGetLimits
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_power_sustained_limit_t*
      name: pSustained
      desc: "[in][optional] The sustained power limit."
    - type: $t_power_burst_limit_t*
      name: pBurst
      desc: "[in][optional] The burst power limit."
    - type: $t_power_peak_limit_t*
      name: pPeak
      desc: "[in][optional] The peak power limit."
--- #--------------------------------------------------------------------------
type: function
desc: "Set power limits"
class: $tSysman
name: PowerSetLimits
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: const $t_power_sustained_limit_t*
      name: pSustained
      desc: "[in][optional] The sustained power limit."
    - type: const $t_power_burst_limit_t*
      name: pBurst
      desc: "[in][optional] The burst power limit."
    - type: const $t_power_peak_limit_t*
      name: pPeak
      desc: "[in][optional] The peak power limit."

--- #--------------------------------------------------------------------------
type: struct
desc: "Frequency properties"
class: $tSysman
name: $t_freq_properties_t
details:
    - "Provides the set of frequencies as a list and as a range/step."
    - "It is generally recommended that applications choose frequencies from the list. However applications can also construct the list themselves using the range/steps provided."
members:
    - type: $x_bool_t
      name: canControl
      desc: "[out] Indicates if software can control the frequency of this domain"
    - type: $x_bool_t
      name: canOverclock
      desc: "[out] Indicates if software can overclock this frequency domain"
    - type: double
      name: min
      desc: "[out] The minimum clock frequency in units of MHz"
    - type: double
      name: max
      desc: "[out] The maximum clock frequency in units of MHz"
    - type: double
      name: step
      desc: "[out] The step clock frequency in units of MHz"
    - type: uint32_t
      name: num
      desc: "[out] The number of clocks in the array pClocks"
    - type: "const double*"
      name: "pClocks"
      desc: "[out] Array of clock frequencies in units of MHz ordered from smallest to largest."
--- #--------------------------------------------------------------------------
type: struct
desc: "Frequency limits between which the hardware can operate."
class: $tSysman
name: $t_freq_limits_t
members:
    - type: double
      name: "min"
      desc: "[in,out] The min frequency in MHz below which hardware frequency management will not request frequencies. Setting to 0 will use the hardware default value."
    - type: double
      name: "max"
      desc: "[in,out] The max frequency in MHz above which hardware frequency management will not request frequencies. Setting to 0 will use the hardware default value."
--- #--------------------------------------------------------------------------
type: enum
desc: "Frequency throttle reasons"
class: $tSysman
name: $t_freq_throttle_reasons_t
etors:
    - name: $T_FREQ_THROTTLE_REASONS_NONE
      value: "0"
      desc: "frequency not throttled"
    - name: $T_FREQ_THROTTLE_REASONS_AVE_PWR_CAP
      value: "$X_BIT( 0 )"
      desc: "frequency throttled due to average power excursion (PL1)"
    - name: $T_FREQ_THROTTLE_REASONS_BURST_PWR_CAP
      value: "$X_BIT( 1 )"
      desc: "frequency throttled due to burst power excursion (PL2)"
    - name: $T_FREQ_THROTTLE_REASONS_CURRENT_LIMIT
      value: "$X_BIT( 2 )"
      desc: "frequency throttled due to current excursion (PL4)"
    - name: $T_FREQ_THROTTLE_REASONS_THERMAL_LIMIT
      value: "$X_BIT( 3 )"
      desc: "frequency throttled due to thermal excursion (T > TjMax)"
    - name: $T_FREQ_THROTTLE_REASONS_PSU_ALERT
      value: "$X_BIT( 4 )"
      desc: "frequency throttled due to power supply assertion"
    - name: $T_FREQ_THROTTLE_REASONS_SW_RANGE
      value: "$X_BIT( 5 )"
      desc: "frequency throttled due to software supplied frequency range"
    - name: $T_FREQ_THROTTLE_REASONS_HW_RANGE
      value: "$X_BIT( 6 )"
      desc: "frequency throttled due to a sub block that has a lower frequency range when it receives clocks"
--- #--------------------------------------------------------------------------
type: struct
desc: "Frequency state"
class: $tSysman
name: $t_freq_state_t
members:
    - type: double
      name: "request"
      desc: "[out] The current frequency request in MHz."
    - type: double
      name: "tdp"
      desc: "[out] The maximum frequency in MHz supported under the current TDP conditions"
    - type: double
      name: "efficient"
      desc: "[out] The efficient minimum frequency in MHz"
    - type: double
      name: "actual"
      desc: "[out] The resolved frequency in MHz"
    - type: uint32_t
      name: "throttleReasons"
      desc: "[out] The reasons that the frequency is being limited by the hardware (Bitfield of (1<<$t_freq_throttle_reasons_t))."
--- #--------------------------------------------------------------------------
type: struct
desc: "Frequency throttle time snapshot"
class: $tSysman
name: $t_freq_throttle_time_t
details:
    - "Percent time throttled is calculated by taking two snapshots (s1, s2) and using the equation: %throttled = (s2.throttleTime - s1.throttleTime) / (s2.timestamp - s1.timestamp)"
members:
    - type: uint64_t
      name: "throttleTime"
      desc: "[out] The monotonic counter of time in microseconds that the frequency has been limited by the hardware."
    - type: uint64_t
      name: "timestamp"
      desc: |
            [out] Microsecond timestamp when throttleTime was captured.
            No assumption should be made about the absolute value of the timestamp.
            It should only be used to calculate delta time between two snapshots of the same structure.
            Never take the delta of this timestamp with the timestamp from a different structure.
--- #--------------------------------------------------------------------------
type: function
desc: "Get frequency properties - available frequencies"
class: $tSysman
name: FrequencyGetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_freq_domain_t
      name: domain
      desc: "[in] The frequency domain."
    - type: $t_freq_properties_t*
      name: pProperties
      desc: "[in] The frequency properties for the specified domain."
--- #--------------------------------------------------------------------------
type: function
desc: "Get current frequency limits"
class: $tSysman
name: FrequencyGetLimits
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_freq_domain_t
      name: domain
      desc: "[in] The frequency domain."
    - type: $t_freq_limits_t*
      name: pLimits
      desc: "[in] The limits between which the hardware can operate for the specified domain."
--- #--------------------------------------------------------------------------
type: function
desc: "Set frequency limits between which the hardware can operate."
class: $tSysman
name: FrequencySetLimits
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_freq_domain_t
      name: domain
      desc: "[in] The frequency domain."
    - type: const $t_freq_limits_t*
      name: pLimits
      desc: "[in] The limits between which the hardware can operate for the specified domain."
--- #--------------------------------------------------------------------------
type: function
desc: "Get current frequency state - frequency request, actual frequency, TDP limits"
class: $tSysman
name: FrequencyGetState
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_freq_domain_t
      name: domain
      desc: "[in] The frequency domain."
    - type: $t_freq_state_t*
      name: pState
      desc: "[in] Frequency state for the specified domain."
--- #--------------------------------------------------------------------------
type: function
desc: "Get frequency throttle time"
class: $tSysman
name: FrequencyGetThrottleTime
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_freq_domain_t
      name: domain
      desc: "[in] The frequency domain."
    - type: $t_freq_throttle_time_t*
      name: pThrottleTime
      desc: "[in] Will contain a snapshot of the throttle time counters for the specified domain."

--- #--------------------------------------------------------------------------
type: enum
desc: "Activity components"
class: $tSysman
name: $t_activity_type_t
etors:
    - name: $T_ACTIVITY_TYPE_GLOBAL
      value: "0"
      desc: "Overall activity of all accelerators on the device."
    - name: $T_ACTIVITY_TYPE_COMPUTE
      desc: "Activity of all compute accelerators on the device."
    - name: $T_ACTIVITY_TYPE_MEDIA
      desc: "Activity of all media accelerators on the device."
--- #--------------------------------------------------------------------------
type: struct
desc: "Activity counters"
details:
    - "Percent utilization is calculated by taking two snapshots (s1, s2) and using the equation: %util = (s2.activeTime - s1.activeTime) / (s2.timestamp - s1.timestamp)"
class: $tSysman
name: $t_activity_stats_t
members:
    - type: uint64_t
      name: "activeTime"
      desc: "[out] Monotonic counter for time in microseconds that this resource is actively running workloads."
    - type: uint64_t
      name: "timestamp"
      desc: |
            [out] Monotonic timestamp counter in microseconds when activeTime counter was sampled.
            No assumption should be made about the absolute value of the timestamp.
            It should only be used to calculate delta time between two snapshots of the same structure.
            Never take the delta of this timestamp with the timestamp from a different structure.
--- #--------------------------------------------------------------------------
type: function
desc: "Get the activity counters of a part of the device"
class: $tSysman
name: ActivityGetStats
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_activity_type_t
      name: type
      desc: "[in] The type of activity stats."
    - type: $t_activity_stats_t*
      name: pStats
      desc: "[in] Will contain a snapshot of the activity counters."

--- #--------------------------------------------------------------------------
type: enum
desc: "Memory resource types"
class: $tSysman
name: $t_mem_type_t
etors:
    - name: $T_MEM_TYPE_HBM
      value: "0"
      desc: "HBM memory"
    - name: $T_MEM_TYPE_DDR
      desc: "DDR memory"
    - name: $T_MEM_TYPE_SRAM
      desc: "SRAM memory"
    - name: $T_MEM_TYPE_L1
      desc: "L1 cache"
    - name: $T_MEM_TYPE_L3
      desc: "L3 cache"
    - name: $T_MEM_TYPE_GRF
      desc: "Execution unit register file"
    - name: $T_MEM_TYPE_SLM
      desc: "Execution unit shared local memory"
--- #--------------------------------------------------------------------------
type: struct
desc: "Memory properties"
class: $tSysman
name: $t_mem_properties_t
members:
    - type: $t_mem_type_t
      name: type
      desc: "[out] The memory type"
    - type: uint64_t
      name: size
      desc: "[out] Physical memory size in bytes"
--- #--------------------------------------------------------------------------
type: struct
desc: "Memory bandwidth"
class: $tSysman
name: $t_mem_bandwidth_t
details:
    - "Percent bandwidth is calculated by taking two snapshots (s1, s2) and using the equation: %bw = 10^6 * ((s2.readCounter - s1.readCounter) + (s2.writeCounter - s1.writeCounter)) / (s2.maxBandwidth * (s2.timestamp - s1.timestamp))"
members:
    - type: uint64_t
      name: readCounter
      desc: "[out] Total bytes read from memory"
    - type: uint64_t
      name: writeCounter
      desc: "[out] Total bytes written to memory"
    - type: uint64_t
      name: maxBandwidth
      desc: "[out] Current maximum bandwidth in units of bytes/sec"
    - type: uint64_t
      name: timestamp
      desc: |
            [out] The timestamp when these measurements were sampled.
            No assumption should be made about the absolute value of the timestamp.
            It should only be used to calculate delta time between two snapshots of the same structure.
            Never take the delta of this timestamp with the timestamp from a different structure.
--- #--------------------------------------------------------------------------
type: struct
desc: "Memory allocation"
class: $tSysman
name: $t_mem_alloc_t
details:
    - "Percent allocation is given by 100 * allocated / total."
    - "Percent free is given by 100 * (total - allocated) / total."
members:
    - type: uint64_t
      name: allocated
      desc: "[out] The total allocated bytes"
    - type: uint64_t
      name: total
      desc: "[out] The total physical memory in bytes"
--- #--------------------------------------------------------------------------
type: function
desc: "Get memory properties"
class: $tSysman
name: MemoryGetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_mem_properties_t*
      name: pProperties
      desc: "[in] Will contain memory properties."
--- #--------------------------------------------------------------------------
type: function
desc: "Get memory bandwidth"
class: $tSysman
name: MemoryGetBandwidth
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_mem_bandwidth_t*
      name: pBandwidth
      desc: "[in] Will contain a snapshot of the bandwidth counters."
--- #--------------------------------------------------------------------------
type: function
desc: "Get memory allocation"
class: $tSysman
name: MemoryGetAllocated
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_mem_alloc_t*
      name: pAllocated
      desc: "[in] Will contain the current allocated memory."

--- #--------------------------------------------------------------------------
type: struct
desc: "PCI address"
class: $tSysman
name: $t_pci_address_t
members:
    - type: uint32_t
      name: "domain"
      desc: "[out] BDF domain"
    - type: uint32_t
      name: "bus"
      desc: "[out] BDF bus"
    - type: uint32_t
      name: "device"
      desc: "[out] BDF device"
    - type: uint32_t
      name: "function"
      desc: "[out] BDF function"
--- #--------------------------------------------------------------------------
type: struct
desc: "PCI speed"
class: $tSysman
name: $t_pci_speed_t
members:
    - type: uint32_t
      name: "gen"
      desc: "[out] The link generation"
    - type: uint32_t
      name: "width"
      desc: "[out] The number of lanes"
    - type: uint32_t
      name: "maxBandwidth"
      desc: "[out] The maximum bandwidth in bytes/sec"
    - type: uint32_t
      name: "maxPacketSize"
      desc: "[out] Maximum packet size in bytes."
--- #--------------------------------------------------------------------------
type: struct
desc: "Static PCI properties"
class: $tSysman
name: $t_pci_properties_t
members:
    - type: $t_pci_address_t
      name: "address"
      desc: "[out] The BDF address"
    - type: uint32_t
      name: "numBars"
      desc: "[out] The number of configured bars"
    - type: $t_pci_speed_t
      name: "maxSpeed"
      desc: "[out] Fastest port configuration supported by the device."
--- #--------------------------------------------------------------------------
type: struct
desc: "Dynamic PCI state"
class: $tSysman
name: $t_pci_state_t
members:
    - type: $t_pci_speed_t
      name: "speed"
      desc: "[out] The current port configure speed"
--- #--------------------------------------------------------------------------
type: enum
desc: "PCI bar types"
class: $tSysman
name: $t_pci_bar_type_t
etors:
    - name: $T_PCI_BAR_TYPE_CONFIG
      value: "0"
      desc: "PCI configuration space"
    - name: $T_PCI_BAR_TYPE_MMIO
      desc: "MMIO registers"
    - name: $T_PCI_BAR_TYPE_VRAM
      desc: "VRAM aperture"
    - name: $T_PCI_BAR_TYPE_ROM
      desc: "ROM aperture"
    - name: $T_PCI_BAR_TYPE_VGA_IO
      desc: "Legacy VGA IO ports"
    - name: $T_PCI_BAR_TYPE_VGA_MEM
      desc: "Legacy VGA memory"
    - name: $T_PCI_BAR_TYPE_INDIRECT_IO
      desc: "Indirect IO port access"
    - name: $T_PCI_BAR_TYPE_INDIRECT_MEM
      desc: "Indirect memory access"
    - name: $T_PCI_BAR_TYPE_OTHER
      desc: "Other type of PCI bar"
--- #--------------------------------------------------------------------------
type: struct
desc: "Properties of a pci bar"
class: $tSysman
name: $t_pci_bar_properties_t
members:
    - type: $t_pci_bar_type_t
      name: "type"
      desc: "[out] The type of bar"
    - type: uint64_t
      name: "base"
      desc: "[out] Base address of the bar."
    - type: uint64_t
      name: "size"
      desc: "[out] Size of the bar."
--- #--------------------------------------------------------------------------
type: struct
desc: "PCI throughput"
class: $tSysman
name: $t_pci_throughput_t
details:
    - "Percent throughput is calculated by taking two snapshots (s1, s2) and using the equation: %bw = 10^6 * ((s2.rxCounter - s1.rxCounter) + (s2.txCounter - s1.txCounter)) / (s2.maxBandwidth * (s2.timestamp - s1.timestamp))"
members:
    - type: uint64_t
      name: "timestamp"
      desc: |
            [out] Monotonic timestamp counter in microseconds when the measurement was made.
            No assumption should be made about the absolute value of the timestamp.
            It should only be used to calculate delta time between two snapshots of the same structure.
            Never take the delta of this timestamp with the timestamp from a different structure.
    - type: uint64_t
      name: "rxCounter"
      desc: "[out] Monotonic counter for the number of bytes received"
    - type: uint64_t
      name: "txCounter"
      desc: "[out] Monotonic counter for the number of bytes transmitted (including replays)"
    - type: uint32_t
      name: "maxBandwidth"
      desc: "[out] The maximum bandwidth in bytes/sec under the current configuration"
--- #--------------------------------------------------------------------------
type: struct
desc: "PCI stats counters"
class: $tSysman
name: $t_pci_stats_t
details:
    - "Percent replays is calculated by taking two snapshots (s1, s2) and using the equation: %replay = 10^6 * (s2.replayCounter - s1.replayCounter) / (s2.maxBandwidth * (s2.timestamp - s1.timestamp))"
members:
    - type: uint64_t
      name: "timestamp"
      desc: |
            [out] Monotonic timestamp counter in microseconds when the measurement was made.
            No assumption should be made about the absolute value of the timestamp.
            It should only be used to calculate delta time between two snapshots of the same structure.
            Never take the delta of this timestamp with the timestamp from a different structure.
    - type: uint64_t
      name: "replayCounter"
      desc: "[out] Monotonic counter for the number of replay packets"
    - type: uint64_t
      name: "packetCounter"
      desc: "[out] Monotonic counter for the number of packets"
--- #--------------------------------------------------------------------------
type: function
desc: "Get PCI properties - address, max speed"
class: $tSysman
name: PciGetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_pci_properties_t*
      name: pProperties
      desc: "[in] Will contain the PCI properties."
--- #--------------------------------------------------------------------------
type: function
desc: "Get current PCI state - current speed"
class: $tSysman
name: PciGetState
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_pci_state_t*
      name: pState
      desc: "[in] Will contain the PCI properties."
--- #--------------------------------------------------------------------------
type: function
desc: "Get properties of a bar"
class: $tSysman
name: PciGetBarProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: barIndex
      desc: "[in] The index of the bar (0 ... [$t_pci_properties_t.numBars - 1])."
    - type: $t_pci_bar_properties_t*
      name: pProperties
      desc: "[in] Will contain properties of the specified bar"
--- #--------------------------------------------------------------------------
type: function
desc: "Get PCI throughput"
class: $tSysman
name: PciGetThroughput
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_pci_throughput_t*
      name: pThroughput
      desc: "[in] Will contain a snapshot of the latest throughput counters."
--- #--------------------------------------------------------------------------
type: function
desc: "Get PCI stats"
class: $tSysman
name: PciGetStats
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_pci_stats_t*
      name: pStats
      desc: "[in] Will contain a snapshot of the latest stats."

--- #--------------------------------------------------------------------------
type: struct
desc: "Switch properties"
class: $tSysman
name: $t_switch_properties_t
members:
    - type: uint32_t
      name: "numPorts"
      desc: "[out] The number of ports"
    - type: $x_bool_t
      name: "onSubdevice"
      desc: "[out] True if the switch is located on a sub-device; false means that the switch is on the device of the calling SMI handle"
    - type: $x_device_uuid_t
      name: "subdeviceUuid"
      desc: "[out] If onSubdevice is true, this gives the UUID of the sub-device"
--- #--------------------------------------------------------------------------
type: struct
desc: "Switch state"
class: $tSysman
name: $t_switch_state_t
members:
    - type: $x_bool_t
      name: "enabled"
      desc: "[out] Indicates if the switch is enabled/disabled"
--- #--------------------------------------------------------------------------
type: struct
desc: "Switch port speed"
class: $tSysman
name: $t_switch_port_speed_t
members:
    - type: uint32_t
      name: "bitRate"
      desc: "[out] Bits/sec that the link is operating at"
    - type: uint32_t
      name: "width"
      desc: "[out] The number of lanes"
    - type: uint32_t
      name: "maxBandwidth"
      desc: "[out] The maximum bandwidth in bytes/sec"
--- #--------------------------------------------------------------------------
type: struct
desc: "Switch Port properties"
class: $tSysman
name: $t_switch_port_properties_t
members:
    - type: $t_switch_port_speed_t
      name: "maxSpeed"
      desc: "[out] Maximum bandwidth supported by the port"
--- #--------------------------------------------------------------------------
type: struct
desc: "Switch Port state"
class: $tSysman
name: $t_switch_port_state_t
members:
    - type: $x_bool_t
      name: "isConnected"
      desc: "[out] Indicates if the port is connected to a remote Switch"
    - type: $x_device_uuid_t
      name: "remoteDeviceUuid"
      desc: "[out] If connected is true, this gives the device UUID where the port connects"
    - type: uint32_t
      name: "remoteDeviceSwitchIndex"
      desc: "[out] If connected is true, this gives the switch index on the remote device where the port connects"
    - type: uint32_t
      name: "remoteSwitchPortIndex"
      desc: "[out] If connected is true, this gives the port index on the remote switch"
    - type: $t_switch_port_speed_t
      name: "rxSpeed"
      desc: "[out] Current maximum receive speed"
    - type: $t_switch_port_speed_t
      name: "txSpeed"
      desc: "[out] Current maximum transmit speed"
--- #--------------------------------------------------------------------------
type: struct
desc: "Switch Port throughput"
class: $tSysman
name: $t_switch_port_throughput_t
details:
    - "Percent throughput is calculated by taking two snapshots (s1, s2) and using the equation:"
    - "    %rx_bandwidth = 10^6 * (s2.rxCounter - s1.rxCounter) / (s2.rxMaxBandwidth * (s2.timestamp - s1.timestamp))"
    - "    %tx_bandwidth = 10^6 * (s2.txCounter - s1.txCounter) / (s2.txMaxBandwidth * (s2.timestamp - s1.timestamp))"
members:
    - type: uint64_t
      name: "timestamp"
      desc: |
            [out] Monotonic timestamp counter in microseconds when the measurement was made.
            No assumption should be made about the absolute value of the timestamp.
            It should only be used to calculate delta time between two snapshots of the same structure.
            Never take the delta of this timestamp with the timestamp from a different structure.
    - type: uint64_t
      name: "rxCounter"
      desc: "[out] Monotonic counter for the number of bytes received"
    - type: uint64_t
      name: "txCounter"
      desc: "[out] Monotonic counter for the number of bytes transmitted"
    - type: uint32_t
      name: "rxMaxBandwidth"
      desc: "[out] The current maximum bandwidth in bytes/sec for receiving packats"
    - type: uint32_t
      name: "txMaxBandwidth"
      desc: "[out] The current maximum bandwidth in bytes/sec for transmitting packets"
--- #--------------------------------------------------------------------------
type: struct
desc: "Switch Port stats counters"
class: $tSysman
name: $t_switch_port_stats_t
details:
    - "Percent replays is calculated by taking two snapshots (s1, s2) and using the equation: %replay = 10^6 * (s2.replayCounter - s1.replayCounter) / (s2.maxBandwidth * (s2.timestamp - s1.timestamp))"
members:
    - type: uint64_t
      name: "timestamp"
      desc: |
            [out] Monotonic timestamp counter in microseconds when the measurement was made.
            No assumption should be made about the absolute value of the timestamp.
            It should only be used to calculate delta time between two snapshots of the same structure.
            Never take the delta of this timestamp with the timestamp from a different structure.
    - type: uint64_t
      name: "replayCounter"
      desc: "[out] Monotonic counter for the number of replay packets"
    - type: uint64_t
      name: "packetCounter"
      desc: "[out] Monotonic counter for the number of packets"
--- #--------------------------------------------------------------------------
type: function
desc: "Get Switch properties"
class: $tSysman
name: SwitchGetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: switchIndex
      desc: "[in] The index of the switch (0 ... [$t_sysman_properties_t.numSwitches - 1])."
    - type: $t_switch_properties_t*
      name: pProperties
      desc: "[in] Will contain the Switch properties."
--- #--------------------------------------------------------------------------
type: function
desc: "Get Switch state"
class: $tSysman
name: SwitchGetState
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: switchIndex
      desc: "[in] The index of the switch (0 ... [$t_sysman_properties_t.numSwitches - 1])."
    - type: $t_switch_state_t*
      name: pState
      desc: "[in] Will contain the current state of the switch (enabled/disabled)."
--- #--------------------------------------------------------------------------
type: function
desc: "Set Switch state"
class: $tSysman
name: SwitchSetState
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: switchIndex
      desc: "[in] The index of the switch (0 ... [$t_sysman_properties_t.numSwitches - 1])."
    - type: $x_bool_t
      name: enable
      desc: "[in] Set to true to enable the Switch, otherwise it will be disabled."
--- #--------------------------------------------------------------------------
type: function
desc: "Get Switch Port properties"
class: $tSysman
name: SwitchPortGetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: switchIndex
      desc: "[in] The index of the switch (0 ... [$t_sysman_properties_t.numSwitches - 1])."
    - type: uint32_t
      name: portIndex
      desc: "[in] The index of the port (0 ... [$t_switch_properties_t.numPorts - 1])."
    - type: $t_switch_port_properties_t*
      name: pProperties
      desc: "[in] Will contain properties of the Switch Port"
--- #--------------------------------------------------------------------------
type: function
desc: "Get Switch Port state"
class: $tSysman
name: SwitchPortGetState
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: switchIndex
      desc: "[in] The index of the switch (0 ... [$t_sysman_properties_t.numSwitches - 1])."
    - type: uint32_t
      name: portIndex
      desc: "[in] The index of the port (0 ... [$t_switch_properties_t.numPorts - 1])."
    - type: $t_switch_port_state_t*
      name: pState
      desc: "[in] Will contain the current state of the Switch Port"
--- #--------------------------------------------------------------------------
type: function
desc: "Get Switch Port throughput"
class: $tSysman
name: SwitchPortGetThroughput
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: switchIndex
      desc: "[in] The index of the switch (0 ... [$t_sysman_properties_t.numSwitches - 1])."
    - type: uint32_t
      name: portIndex
      desc: "[in] The index of the port (0 ... [$t_switch_properties_t.numPorts - 1])."
    - type: $t_switch_port_throughput_t*
      name: pThroughput
      desc: "[in] Will contain the Switch port throughput counters."
--- #--------------------------------------------------------------------------
type: function
desc: "Get Switch Port stats"
class: $tSysman
name: SwitchPortGetStats
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: switchIndex
      desc: "[in] The index of the switch (0 ... [$t_sysman_properties_t.numSwitches - 1])."
    - type: uint32_t
      name: portIndex
      desc: "[in] The index of the port (0 ... [$t_switch_properties_t.numPorts - 1])."
    - type: $t_switch_port_stats_t*
      name: pStats
      desc: "[in] Will contain the Switch port stats."

--- #--------------------------------------------------------------------------
type: enum
desc: "Temperature sensors"
class: $tSysman
name: $t_temp_sensors_t
etors:
    - name: $T_TEMP_SENSORS_GLOBAL
      value: "0"
      desc: "The maximum temperature across all device sensors"
    - name: $T_TEMP_SENSORS_GPU
      desc: "The maximum temperature across all sensors in the GPU"
    - name: $T_TEMP_SENSORS_MEMORY
      desc: "The maximum temperature across all sensors in the local memory"
    - name: $T_TEMP_SENSORS_NUM
      desc: "The number of sensors"
--- #--------------------------------------------------------------------------
type: function
desc: "Get the temperature from a specified sensor"
class: $tSysman
name: TemperatureGet
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_temp_sensors_t
      name: sensor
      desc: "[in] The port address."
    - type: uint32_t*
      name: pTemperature
      desc: "[in] Will contain the temperature read from the specified sensor."

--- #--------------------------------------------------------------------------
type: enum
desc: "Standby promotion modes"
class: $tSysman
name: $t_stby_promo_mode_t
etors:
    - name: $T_STBY_PROMO_MODE_DEFAULT
      value: "0"
      desc: "Best compromise between performance and energy savings."
    - name: $T_STBY_PROMO_MODE_NEVER
      desc: "The device/component will never shutdown. This can improve performance but uses more energy."
--- #--------------------------------------------------------------------------
type: function
desc: "Get the current standby promotion mode"
class: $tSysman
name: StandbyGetMode
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_stby_promo_mode_t*
      name: pMode
      desc: "[in] Will contain the current standby mode."
--- #--------------------------------------------------------------------------
type: function
desc: "Set standby promotion mode"
class: $tSysman
name: StandbySetMode
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: $t_stby_promo_mode_t
      name: mode
      desc: "[in] New standby mode."

--- #--------------------------------------------------------------------------
type: struct
desc: "Firmware properties"
class: $tSysman
name: $t_firmware_properties_t
members:
    - type: $x_bool_t
      name: "canControl"
      desc: "[out] Indicates if software can flash the firmware"
    - type: int8_t
      name: "name[$T_STRING_PROPERTY_SIZE]"
      desc: "[out] NULL terminated string value"
    - type: int8_t
      name: "version[$T_STRING_PROPERTY_SIZE]"
      desc: "[out] NULL terminated string value"
--- #--------------------------------------------------------------------------
type: function
desc: "Get firmware properties"
class: $tSysman
name: FirmwareGetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: firmwareIndex
      desc: "[in] The index of the firmware (0 ... [$t_sysman_properties_t.numFirmwares - 1])."
    - type: $t_firmware_properties_t*
      name: pProperties
      desc: "[in] Pointer to an array that will hold the properties of the firmware"
--- #--------------------------------------------------------------------------
type: function
desc: "Get firmware checksum"
class: $tSysman
name: FirmwareGetChecksum
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: firmwareIndex
      desc: "[in] The index of the firmware (0 ... [$t_sysman_properties_t.numFirmwares - 1])."
    - type: uint32_t*
      name: pChecksum
      desc: "[in] Calculated checksum of the installed firmware."
--- #--------------------------------------------------------------------------
type: function
desc: "Flash a new firmware image"
class: $tSysman
name: FirmwareFlash
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: firmwareIndex
      desc: "[in] The index of the firmware (0 ... [$t_sysman_properties_t.numFirmwares - 1])."
    - type: void*
      name: pImage
      desc: "[in] Image of the new firmware to flash."
    - type: uint32_t
      name: size
      desc: "[in] Size of the flash image."

--- #--------------------------------------------------------------------------
type: enum
desc: "PSU voltage status"
class: $tSysman
name: $t_psu_voltage_status_t
etors:
    - name: $T_PSU_VOLTAGE_STATUS_NORMAL
      value: "0"
      desc: "No unusual voltages have been detected"
    - name: $T_PSU_VOLTAGE_STATUS_OVER
      desc: "Over-voltage has occurred"
    - name: $T_PSU_VOLTAGE_STATUS_UNDER
      desc: "Under-voltage has occurred"
--- #--------------------------------------------------------------------------
type: struct
desc: "Static properties of the power supply"
class: $tSysman
name: $t_psu_properties_t
members:
    - type: $x_bool_t
      name: "canControl"
      desc: "[out] Indicates if software can control the PSU"
    - type: $x_bool_t
      name: "haveFan"
      desc: "[out] True if the power supply has a fan"
    - type: uint32_t
      name: "ampLimit"
      desc: "[out] The maximum electrical current in amperes that can be drawn"
--- #--------------------------------------------------------------------------
type: struct
desc: "Dynamic state of the power supply"
class: $tSysman
name: $t_psu_state_t
members:
    - type: $t_psu_voltage_status_t
      name: "voltStatus"
      desc: "[out] The current PSU voltage status"
    - type: $x_bool_t
      name: "fanFailed"
      desc: "[out] Indicates if the fan has failed"
    - type: uint32_t
      name: "temperature"
      desc: "[out] Read the current heatsink temperature in degrees celcius"
    - type: uint32_t
      name: "current"
      desc: "[out] The amps being drawn in amperes"
--- #--------------------------------------------------------------------------
type: function
desc: "Get power supply properties"
class: $tSysman
name: PsuGetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: psuIndex
      desc: "[in] The index of the power supply (0 ... [$t_sysman_properties_t.numPsus - 1])."
    - type: $t_psu_properties_t*
      name: pProperties
      desc: "[in] Will contain the properties of the power supply."
--- #--------------------------------------------------------------------------
type: function
desc: "Get current power supply state"
class: $tSysman
name: PsuGetState
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: psuIndex
      desc: "[in] The index of the power supply (0 ... [$t_sysman_properties_t.numPsus - 1])."
    - type: $t_psu_state_t*
      name: pState
      desc: "[in] Will contain the current state of the power supply."

--- #--------------------------------------------------------------------------
type: enum
desc: "Fan resource speed mode"
class: $tSysman
name: $t_fan_speed_mode_t
etors:
    - name: $T_FAN_SPEED_MODE_DEFAULT
      value: "0"
      desc: "The fan speed is operating using the hardware default settings"
    - name: $T_FAN_SPEED_MODE_FIXED
      desc: "The fan speed is currently set to a fixed value"
    - name: $T_FAN_SPEED_MODE_TABLE
      desc: "The fan speed is currently controlled dynamically by hardware based on a temp/speed table"
--- #--------------------------------------------------------------------------
type: enum
desc: "Fan speed units"
class: $tSysman
name: $t_fan_speed_units_t
etors:
    - name: $T_FAN_SPEED_UNITS_RPM
      value: "0"
      desc: "The fan speed is in units of revolutions per minute (rpm)"
    - name: $T_FAN_SPEED_UNITS_PERCENT
      desc: "The fan speed is a percentage of the maximum speed of the fan"
--- #--------------------------------------------------------------------------
type: struct
desc: "Fan temperature/speed pair"
class: $tSysman
name: $t_fan_temp_speed_t
members:
    - type: uint32_t
      name: "temperature"
      desc: "[in,out] Temperature in degrees celcius"
    - type: uint32_t
      name: "speed"
      desc: "[in,out] The speed of the fan"
    - type: $t_fan_speed_units_t
      name: "units"
      desc: "[in,out] The units of the member speed"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum number of fan temperature/speed pairs in the fan speed table."
name: $T_FAN_TEMP_SPEED_PAIR_COUNT
value: "32"
--- #--------------------------------------------------------------------------
type: struct
desc: "Fan properties"
class: $tSysman
name: $t_fan_properties_t
members:
    - type: $x_bool_t
      name: "canControl"
      desc: "[out] Indicates if software can control the fan speed"
    - type: uint32_t
      name: "maxSpeed"
      desc: "[out] The maximum RPM of the fan"
    - type: uint32_t
      name: "maxPoints"
      desc: "[out] The maximum number of points in the fan temp/speed table"
--- #--------------------------------------------------------------------------
type: struct
desc: "Fan configuration"
class: $tSysman
name: $t_fan_config_t
members:
    - type: $t_fan_speed_mode_t
      name: "mode"
      desc: "[in,out] The fan speed mode (fixed, temp-speed table)"
    - type: uint32_t
      name: "speed"
      desc: "[in,out] The fixed fan speed setting"
    - type: $t_fan_speed_units_t
      name: "speedUnits"
      desc: "[in,out] The units of the fixed fan speed setting"
    - type: uint32_t
      name: "numPoints"
      desc: "[in,out] The number of valid points in the fan speed table"
    - type: $t_fan_temp_speed_t
      name: "table[$T_FAN_TEMP_SPEED_PAIR_COUNT]"
      desc: "[in,out] Array of temperature/fan speed pairs"
--- #--------------------------------------------------------------------------
type: struct
desc: "Fan state"
class: $tSysman
name: $t_fan_state_t
members:
    - type: $t_fan_speed_mode_t
      name: "mode"
      desc: "[out] The fan speed mode (default, fixed, temp-speed table)"
    - type: $t_fan_speed_units_t
      name: "speedUnits"
      desc: "[out] The units of the fan speed"
    - type: uint32_t
      name: "speed"
      desc: "[out] The current fan speed"
--- #--------------------------------------------------------------------------
type: function
desc: "Get fan properties"
class: $tSysman
name: FanGetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: fanIndex
      desc: "[in] The index of the fan (0 ... [$t_sysman_properties_t.numFans - 1])."
    - type: $t_fan_properties_t*
      name: pProperties
      desc: "[in] Will contain the properties of the fan."
--- #--------------------------------------------------------------------------
type: function
desc: "Get current fan configuration"
class: $tSysman
name: FanGetConfig
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: fanIndex
      desc: "[in] The index of the fan (0 ... [$t_sysman_properties_t.numFans - 1])."
    - type: $t_fan_config_t*
      name: pConfig
      desc: "[in] Will contain the current configuration of the fan."
--- #--------------------------------------------------------------------------
type: function
desc: "Set fan configuration"
class: $tSysman
name: FanSetConfig
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: fanIndex
      desc: "[in] The index of the fan (0 ... [$t_sysman_properties_t.numFans - 1])."
    - type: const $t_fan_config_t*
      name: pConfig
      desc: "[in] New fan configuration."
--- #--------------------------------------------------------------------------
type: function
desc: "Get current state of a fan - current mode and speed"
class: $tSysman
name: FanGetState
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: fanIndex
      desc: "[in] The index of the fan (0 ... [$t_sysman_properties_t.numFans - 1])."
    - type: $t_fan_speed_units_t
      name: units
      desc: "[in] The units in which the fan speed should be returned."
    - type: $t_fan_state_t*
      name: pState
      desc: "[in] Will contain the current state of the fan."

--- #--------------------------------------------------------------------------
type: struct
desc: "LED properties"
class: $tSysman
name: $t_led_properties_t
members:
    - type: $x_bool_t
      name: "canControl"
      desc: "[out] Indicates if software can control the LED"
    - type: $x_bool_t
      name: "haveRGB"
      desc: "[out] Indicates if the LED is RGB capable"
--- #--------------------------------------------------------------------------
type: struct
desc: "LED state"
class: $tSysman
name: $t_led_state_t
members:
    - type: $x_bool_t
      name: isOn
      desc: "[in,out] Indicates if the LED is on or off"
    - type: uint8_t
      name: "red"
      desc: "[in,out][range(0, 255)] The LED red value"
    - type: uint8_t
      name: "green"
      desc: "[in,out][range(0, 255)] The LED green value"
    - type: uint8_t
      name: "blue"
      desc: "[in,out][range(0, 255)] The LED blue value"
--- #--------------------------------------------------------------------------
type: function
desc: "Get LED properties"
class: $tSysman
name: LedGetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: ledIndex
      desc: "[in] The index of the LED (0 ... [$t_sysman_properties_t.numLeds - 1])."
    - type: $t_led_properties_t*
      name: pProperties
      desc: "[in] Will contain the properties of the LED."
--- #--------------------------------------------------------------------------
type: function
desc: "Get current state of a LED - on/off, color"
class: $tSysman
name: LedGetState
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: ledIndex
      desc: "[in] The index of the LED (0 ... [$t_sysman_properties_t.numLeds - 1])."
    - type: $t_led_state_t*
      name: pState
      desc: "[in] Will contain the current state of the LED."
--- #--------------------------------------------------------------------------
type: function
desc: "Set state of a LED - on/off, color"
class: $tSysman
name: LedSetState
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle of the device."
    - type: uint32_t
      name: ledIndex
      desc: "[in] The index of the LED (0 ... [$t_sysman_properties_t.numLeds - 1])."
    - type: const $t_led_state_t*
      name: pState
      desc: "[in] New state of the LED."

--- #--------------------------------------------------------------------------
type: struct
desc: "RAS properties"
class: $tSysman
name: $t_ras_properties_t
members:
    - type: $x_bool_t
      name: "supported"
      desc: "[out] True if RAS is supported on this device"
    - type: $x_bool_t
      name: "enabled"
      desc: "[out] True if RAS is enabled on this device"
    - type: $x_bool_t
      name: "repaired"
      desc: "[out] True if the device has been repaired"
--- #--------------------------------------------------------------------------
type: enum
desc: "RAS error type"
class: $tSysman
name: $t_ras_error_type_t
etors:
    - name: $T_RAS_ERROR_TYPE_CORRECTABLE
      value: "0"
      desc: "Errors were corrected by hardware"
    - name: $T_RAS_ERROR_TYPE_UNCORRECTABLE
      desc: "Error were not corrected"
    - name: $T_RAS_ERROR_TYPE_NUM
      desc: "The number of error types"
--- #--------------------------------------------------------------------------
type: struct
desc: "RAS error details"
class: $tSysman
name: $t_ras_details_t
members:
    - type: uint64_t
      name: "numResets"
      desc: "[out] The number of accelerator resets that have taken place"
    - type: uint64_t
      name: "numProgrammingErrors"
      desc: "[out] The number of hardware exceptions generated by the way workloads have programmed the hardware"
    - type: uint64_t
      name: "numDriverErrors"
      desc: "[out] The number of low level driver communication errors have occurred"
    - type: uint64_t
      name: "numComputeErrors"
      desc: "[out] The number of errors that have occurred in the compute accelerator hardware"
    - type: uint64_t
      name: "numNonComputeErrors"
      desc: "[out] The number of errors that have occurred in the fixed-function accelerator hardware"
    - type: uint64_t
      name: "numCacheErrors"
      desc: "[out] The number of errors that have occurred in caches (L1/L3/register file/shared local memory/sampler)"
    - type: uint64_t
      name: "numMemoryErrors"
      desc: "[out] The number of errors that have occurred in the local memory"
    - type: uint64_t
      name: "numPciErrors"
      desc: "[out] The number of errors that have occurred in the PCI link"
    - type: uint64_t
      name: "numSwitchErrors"
      desc: "[out] The number of errors that have occurred in the P2P links"
    - type: uint64_t
      name: "numDisplayErrors"
      desc: "[out] The number of errors that have occurred in the display"
--- #--------------------------------------------------------------------------
type: function
desc: "Get RAS properties of the device"
class: $tSysman
name: RasGetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] Handle of the SMI object"
    - type: $t_ras_properties_t*
      name: pProperties
      desc: "[in] Structure describing RAS properties"
--- #--------------------------------------------------------------------------
type: function
desc: "Get the number of errors of a given type"
class: $tSysman
name: RasGetErrors
details:
    - "Clearing errors will affect other threads/applications - the counter values will start from zero."
    - "Clearing errors requires write permissions."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] Handle of the SMI object"
    - type: $t_ras_error_type_t
      name: type
      desc: "[in] The type of errors"
    - type: $x_bool_t
      name: clear
      desc: "[in] Set to 1 to clear the counters of this type"
    - type: uint64_t*
      name: pTotalErrors
      desc: "[in] The number total number of errors of the given type that have occurred"
    - type: $t_ras_details_t*
      name: pDetails
      desc: "[in][optional] Breakdown of where errors have occurred"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED:
        - "This device does not support RAS."
    - $X_RESULT_ERROR_INSUFFICENT_PERMISSIONS:
        - "Don't have permissions to clear error counters."

--- #--------------------------------------------------------------------------
type: struct
desc: "Request structure used to register/unregister events"
class: $tSysman
name: $t_event_request_t
members:
    - type: $t_sysman_event_type_t
      name: "event"
      desc: "[in] The event type to register."
    - type: uint32_t
      name: "threshold"
      desc: "[in] The application only receives a notification when the total count exceeds this value. Set to zero to receive a notification for every new event."
--- #--------------------------------------------------------------------------
type: function
desc: "Register to receive events"
class: $tSysman
name: EventsRegister
details:
    - "This will only register the specified list of events. If other events have been registered, notifications for them will continue."
    - "Set count to zero to receive notifications for all events."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle for the device"
    - type: uint32_t
      name: count
      desc: "[in] Number of entries in the array pEvents. If zero, all events will be registered."
    - type: $t_event_request_t*
      name: pEvents
      desc: "[in][optional] Events to register."
--- #--------------------------------------------------------------------------
type: function
desc: "Unregister events"
class: $tSysman
name: EventsUnregister
details:
    - "This will only unregister the specified list of events. If other events have been registered, notifications for them will continue."
    - "Set count to zero to no longer receive any notifications."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] Handle of the SMI object"
    - type: uint32_t
      name: count
      desc: "[in] Number of entries in the array pEvents. If zero, all events will be unregistered."
    - type: $t_event_request_t*
      name: pEvents
      desc: "[in][optional] Events to unregister."
--- #--------------------------------------------------------------------------
type: macro
desc: "Wait infinitely for events to arrive."
name: $T_EVENT_WAIT_INFINITE
value: "0xFFFFFFFF"
--- #--------------------------------------------------------------------------
type: function
desc: "Get events that have been triggered for a specific device or from all registered devices"
class: $tSysman
decl: static
name: EventsListen
details:
    - "If events have occurred, they are returned and the corresponding event status is cleared if the argument clear = true."
    - "If listening to events from multiple devices, it is recommended to call this function with hSysman = nullptr, clear = false and timeout = $T_EVENT_WAIT_INFINITE. Then call this function for each device with clear = true and timeout = 0."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle for a device. Set to nullptr to get events from any device for which the application has registered to receive notifications."
    - type: $x_bool_t
      name: clear
      desc: "[in] Clear the event status."
    - type: uint32_t
      name: timeout
      desc: "[in] How long to wait in milliseconds for events to arrive. Zero will check status and return immediately. Set to $T_EVENT_WAIT_INFINITE to block until events arrive."
    - type: "uint32_t*"
      name: pEvents
      desc: "[in] Bitfield of events (1<<$t_sysman_event_type_t) that have been triggered."

--- #--------------------------------------------------------------------------
type: enum
desc: "Diagnostic type"
class: $tSysman
name: $t_diag_type_t
etors:
    - name: $T_DIAG_TYPE_SCAN
      value: "0"
      desc: "Run SCAN diagnostics"
    - name: $T_DIAG_TYPE_ARRAY
      desc: "Run Array diagnostics"
--- #--------------------------------------------------------------------------
type: enum
desc: "Diagnostic results"
class: $tSysman
name: $t_diag_result_t
etors:
    - name: $T_DIAG_RESULT_NO_ERRORS
      value: "0"
      desc: "Diagnostic completed without finding errors to repair"
    - name: $T_DIAG_RESULT_ABORT
      desc: "Diagnostic had problems running tests"
    - name: $T_DIAG_RESULT_FAIL_CANT_REPAIR
      desc: "Diagnostic had problems setting up repairs"
    - name: $T_DIAG_RESULT_REBOOT_FOR_REPAIR
      desc: "Diagnostics found errors, setup for repair and reboot is required to complete the process"
--- #--------------------------------------------------------------------------
type: macro
desc: "Diagnostic test index to use for the very first test."
name: $T_DIAG_FIRST_TEST_INDEX
value: "0x0"
--- #--------------------------------------------------------------------------
type: macro
desc: "Diagnostic test index to use for the very last test."
name: $T_DIAG_LAST_TEST_INDEX
value: "0xFFFFFFFF"
--- #--------------------------------------------------------------------------
type: struct
desc: "Diagnostic test"
class: $tSysman
name: $t_diag_test_t
members:
    - type: uint32_t
      name: "index"
      desc: "[out] Index of the test"
    - type: const char*
      name: "name"
      desc: "[out] Name of the test"
--- #--------------------------------------------------------------------------
type: struct
desc: "List of all diagnostic tests of a given type $t_diag_type_t"
class: $tSysman
name: $t_diag_test_list_t
members:
    - type: $t_diag_type_t
      name: "type"
      desc: "[out] The type of tests"
    - type: uint32_t
      name: "count"
      desc: "[out] The number of tests in the array pTests"
    - type: $t_diag_test_t*
      name: "pTests"
      desc: "[out] Array of tests, sorted by increasing value of $t_diag_test_t.index"
--- #--------------------------------------------------------------------------
type: function
desc: "Get diagnostic tests"
class: $tSysman
name: DiagnosticsGetTestList
details:
    - "Tests are returned in order of increasing index."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle for the device"
    - type: $t_diag_type_t
      name: type
      desc: "[in] Type of diagnostic to run"
    - type: const $t_diag_test_list_t**
      name: ppTests
      desc: "[in] Returns a constant pointer to the list of diagnostic tests"
--- #--------------------------------------------------------------------------
type: function
desc: "Run diagnostics"
class: $tSysman
name: DiagnosticsRunTests
details:
    - "This function will block until the diagnostics have completed."
params:
    - type: $t_sysman_handle_t
      name: hSysman
      desc: "[in] SMI handle for the device"
    - type: $t_diag_type_t
      name: type
      desc: "[in] Type of diagnostic to run"
    - type: uint32_t
      name: start
      desc: "[in] The index of the first test to run. Set to $T_DIAG_FIRST_TEST_INDEX to start from the beginning."
    - type: uint32_t
      name: end
      desc: "[in] The index of the last test to run. Set to $T_DIAG_LAST_TEST_INDEX to complete all tests after the start test."
    - type: $t_diag_result_t*
      name: pResult
      desc: "[in] The result of the diagnostics"

--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for SMI of a device"
name: $tSysman
owner: $tDevice
members:
    - type: $t_sysman_handle_t
      name: handle
      desc: "[in] handle of SMI object" 
      init: nullptr
    - type: $tDevice*
      name: pDevice
      desc: "[in] pointer to owner object"